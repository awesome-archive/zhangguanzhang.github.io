<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhangguanzhang</title>
  
  <subtitle>站在巨人的肩膀上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangguanzhang.github.io/"/>
  <updated>2019-12-09T02:38:52.321Z</updated>
  <id>http://zhangguanzhang.github.io/</id>
  
  <author>
    <name>Zhangguanzhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>opensuse的一次救援</title>
    <link href="http://zhangguanzhang.github.io/2019/12/05/suse-fix-data-but-device-busy/"/>
    <id>http://zhangguanzhang.github.io/2019/12/05/suse-fix-data-but-device-busy/</id>
    <published>2019-12-05T01:55:19.000Z</published>
    <updated>2019-12-09T02:38:52.321Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚吃完晚饭回到办公室，右边同事在控制台看着一个suse起不来一直启动的时候卡在suse的蜥蜴logo背景图那。见我来了叫我看下，他们已经尝试过恢复快照，但是还不行，应该是很久之前损坏的，只不过因为没重启没发现，我叫他重启下看看卡在哪，重启后进入内核后显示背景图那按下esc然后看卡在/sysroot挂载那。目测分区损坏了，经历了ubuntu的安装iso的rescue mode就是渣渣后，我还是信任centos的iso。</p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><h3 id="先备份和准备工作"><a href="#先备份和准备工作" class="headerlink" title="先备份和准备工作"></a>先备份和准备工作</h3><p>关闭虚机，后台拷贝下系统盘的卷先备份下。然后给虚机的IDE光驱挂载了个centos 7.5 DVD的iso，修改虚机启动顺序到ISO，进<code>Troubleshooting</code> –&gt; <code>Rescue a CentOS Linux system</code><br>一般损坏的都不建议选1，因为挂载不上，所以是选3手动处理</p><h3 id="Device-or-resource-busy"><a href="#Device-or-resource-busy" class="headerlink" title="Device or resource busy"></a>Device or resource busy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) Continue</span><br><span class="line">2) Read-only mount</span><br><span class="line">3) Skip to shell</span><br><span class="line">4) Quit (Reboot)</span><br><span class="line">Please make a selection from the above: 3</span><br></pre></td></tr></table></figure><p>最开始我lsblk和看了下硬盘的分区表，最后<code>vgchange -a y</code>激活lvm后<code>xfs_repair /dev/mapper/suse-lv_root</code>的时候提示该设备繁忙，遂查看了下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# lsof /dev/mapper/suse-lv_root</span><br><span class="line">sh-4.2# ps aux | less</span><br></pre></td></tr></table></figure></p><p>lsof和fuser都是返回空的，最后就<code>ps aux</code>一个个看，发现了个mount进程一直hung在那<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# ps aux | grep moun[t]</span><br><span class="line">root       6126  0.0  0.0  19940    840 pts/0      D+   11:56   0:00 /usr/bin/mount -t xfs -o defaults,ro /dev/mapper/suse-lv_root /mnt/sysimage</span><br></pre></td></tr></table></figure></p><p>这个进程尝试过了，死活杀不掉，进rescue mode的时候选的<code>Skip to shell</code>，以为是iso的版本bug，换了一个7.6 minimal的iso进入rescue mode后不选择直接<code>ctrl+alt+F2</code>进到tty还是一样会自动挂载，于是想下从父进程的角度上看看能不能处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# ps aux | grep moun[t]</span><br><span class="line">root       6113  0.0  0.0  19940    840 pts/0      D+   12:02   0:00 /usr/bin/mount -t xfs -o defaults,ro /dev/mapper/suse-lv_root /mnt/sysimage</span><br><span class="line">[anaconda root@localhost /]# ps -Al | grep mount</span><br><span class="line">4 D     0   6113   5862  0  80   0 -  4985 xfs_bu pts/0    00:00:00 mount</span><br><span class="line">[anaconda root@localhost /]# ps aux | grep 586[2] </span><br><span class="line">root       5862  0.0  0.0  19940    840 pts/0      D+   12:02   0:00 python anaconda</span><br></pre></td></tr></table></figure></p><p>找到了该mount的父进程是anaconda，也就是我们进入rescue mode的第一个tty提供交互，直接杀掉它，mount终止<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# kill -9 5862;kill 6113</span><br><span class="line">bash: kill: (6113) - No such process</span><br></pre></td></tr></table></figure></p><p>但是还是busy，发现该mount又tm的起来了，最终想了个骚套路，在杀掉后把mount命名改名，重启再进入rescue mode，然后不选择，<code>ctrl+alt+F2</code>进到tty后执行下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# mv /usr/bin/mount&#123;,.bak&#125;  #先改名，再杀进程</span><br><span class="line">[anaconda root@localhost /]# ps aux | grep moun[t]</span><br><span class="line">root       6128  0.3  0.0  19940    844 pts/0      D+   12:06   0:00 /usr/bin/mount -t xfs -o defaults,ro /dev/mapper/suse-lv_root /mnt/sysimage</span><br><span class="line">[anaconda root@localhost /]# ps -Al | grep mount</span><br><span class="line">4 D     0   6128   5877  0  80   0 -  4985 xfs_bu pts/0    00:00:00 mount</span><br><span class="line">[anaconda root@localhost /]# kill -9 5877;kill 6128</span><br><span class="line">bash: kill: (6128) - No such process</span><br><span class="line">[anaconda root@localhost /]# ps aux | grep moun[t] #然后再也没mount进程</span><br></pre></td></tr></table></figure></p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>接着前面的，激活lvm，这里不详细说，可以自己去<code>lsblk</code>和<code>fdisk -l /dev/vdx</code>去看相关分区信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# vgchange -a y</span><br><span class="line">  1 logical volume(s) in volume group &quot;suse&quot; now active</span><br><span class="line">  4 logical volume(s) in volume group &quot;vgsap&quot; now active</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# xfs_repair /dev/mapper/suse-lv_root</span><br><span class="line">ERROR: The filesystem has valuable metadata changes in a log which needs to</span><br><span class="line">be replayed.  Mount the filesystem to replay the log, and unmount it before</span><br><span class="line">re-running xfs_repair.  If you are unable to mount the filesystem, then use</span><br><span class="line">the -L option to destroy the log and attempt a repair.</span><br><span class="line">Note that destroying the log may cause corruption -- please attempt a mount</span><br><span class="line">of the filesystem before doing this.</span><br></pre></td></tr></table></figure><p>该报错大致意思是: 文件系统的log需要在repair之前先mount它来回放log，如果无法挂载，使用<code>xfs_repair</code>带上<code>-L</code>选项摧毁log强制修复<br>正确姿势是先使用<code>xfs_metadump</code>导出metadata，见文章 <a href="https://serverfault.com/questions/777299/proper-way-to-deal-with-corrupt-xfs-filesystems" target="_blank" rel="noopener">https://serverfault.com/questions/777299/proper-way-to-deal-with-corrupt-xfs-filesystems</a><br>这里因为已经损坏了，没必要测试mount了，我未导出metadata，直接-L修复的，下次遇到了相似场景可以试下<code>xfs_metadump</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# xfs_repair -L /dev/mapper/suse-lv_root</span><br></pre></td></tr></table></figure></p><p>漫长的等待修复，然后卡在了一个inode那，等待了20分钟直接<code>ctrl c</code>取消再来，然当这次不需要带<code>-L</code>选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# xfs_repair /dev/mapper/suse-lv_root</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">resetting inode 15847758 nlinks from 0 to 2</span><br><span class="line">resetting inode 16180728 nlinks from 0 to 2</span><br><span class="line">resetting inode 16500950 nlinks from 0 to 2</span><br><span class="line">resetting inode 17347042 nlinks from 0 to 2</span><br><span class="line">resetting inode 19414733 nlinks from 0 to 2</span><br><span class="line">Metadata corruption detected at xfs_dir3_block block 0x2a09ba8/0x1000</span><br><span class="line">libxfs_writebufr: write verufer failed on xfs_dur3_block bno 0x2a09ba8/0x1000</span><br><span class="line">Metadata corruption detected at xfs_dir3_block block 0x145ce28/0x1000</span><br><span class="line">libxfs_writebufr: write verufer failed on xfs_dur3_block bno 0x145ce28/0x1000</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Maximum metadata LSN (1919513701:1600352110) is ahead of log (1:2).</span><br><span class="line">Format log to cycle 1919513704.</span><br><span class="line">releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!releasing dirty buffer (bulk) to free list!done</span><br></pre></td></tr></table></figure></p><p>然后再次修复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# xfs_repair /dev/mapper/suse-lv_root</span><br><span class="line">Phase 1 - find and verify superblock...</span><br><span class="line">Phase 2 - using internal log</span><br><span class="line">        - zero log...</span><br><span class="line">        - scan filesystem freespace and inode maps...</span><br><span class="line">        - found root inode chunk</span><br><span class="line">Phase 3 - for each AG...</span><br><span class="line">        - scan and clear agi unlinked lists...</span><br><span class="line">        - process known inodes and perfrom inode discovery...</span><br><span class="line">        - agno = 0</span><br><span class="line">...</span><br><span class="line">        - setting up duplicate extent list...</span><br><span class="line">        - check for inodes claiming duplicate blocks...</span><br><span class="line">        - agno = 1</span><br><span class="line">        - agno = 0</span><br><span class="line">        - agno = 2</span><br><span class="line">        - agno = 3</span><br><span class="line">Phase 5 - rebuild AG headers and trees...</span><br><span class="line">        - reset superblock...</span><br><span class="line">Phase 6 - check inode connectivity...</span><br><span class="line">        - resetting contents of realtime bitmap and summary inodes</span><br><span class="line">        - traversing filesystem ...</span><br><span class="line">        - traversal finished ...</span><br><span class="line">        - moveing disconnected inodes to lost_found ...</span><br><span class="line">Phase 7 - verify and correct link counts...</span><br><span class="line">resetting inode 64 nlinks from 25 to 24</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>然后挂载试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[anaconda root@localhost /]# mount /dev/mapper/suse-lv_root /mnt/sysimage</span><br><span class="line">bash： mount: command not found</span><br><span class="line">[anaconda root@localhost /]# mount.bak /dev/mapper/suse-lv_root /mnt/sysimage #漫长等待，大概30多秒</span><br><span class="line">[anaconda root@localhost /]# ls -l /mnt/sysimage</span><br><span class="line">total 40296</span><br><span class="line">drwxr-xr-x    2 root root       4096 Aug  6  2018 bin</span><br><span class="line">drwxr-xr-x    3 root root          6 Aug  6  2018 boot</span><br><span class="line">drwxr-xr-x   22 root root          6 Aug  6 22:19 dev</span><br><span class="line">drwxr-xr-x  131 root root       8192 Nov 30 04:05 etc</span><br><span class="line">drwxr-xr-x    5 root root         46 Oct 18  2018 home</span><br><span class="line">drwxr-xr-x   12 root root       8192 Nov 30 04:04 lib</span><br><span class="line">drwxr-xr-x    7 root root       8192 Aug  6  2018 lib64</span><br><span class="line">drwxr-xr-x 2270 root root   27242496 Dec  4 20:47 lost+found</span><br><span class="line">drwxr-xr-x    2 root root          6 Jun 27  2017 mnt</span><br><span class="line">drwxr-xr-x    2 root root          6 Jun 27  2017 opt</span><br><span class="line">dr-xr-xr-x  190 root root          6 Aug  6  2018 proc</span><br><span class="line">drwx------   21 root root       4096 Nov 30 04:39 root</span><br><span class="line">drwxr-xr-x   31 root root          6 Aug  6  2018 run</span><br><span class="line">drwxr-xr-x    4 root sapsys        6 Oct 11  2018 sapmnt</span><br><span class="line">drwxr-xr-x    2 root root       8192 Oct 11  2018 sbin</span><br><span class="line">drwxr-xr-x    2 root root          6 Jun 27  2017 selinux</span><br><span class="line">drwxr-xr-x    9 root root       4096 Oct 11  2018 software</span><br><span class="line">drwxr-xr-x    4 root root         28 Aug  6  2018 srv</span><br><span class="line">dr-xr-xr-x   13 root root          0 Dec  4 22:16 sys</span><br><span class="line">drwxrwxrwt   31 root root       4096 Dec  3 22:18 tmp</span><br><span class="line">drwxr-xr-x   14 root root        182 Nov 30 04:37 usr</span><br><span class="line">drwxr-xr-x   13 root root        201 Nov 30 04:37 var</span><br></pre></td></tr></table></figure></p><p>然后取消光驱挂载，修改启动顺序重启，能进到登陆，直接<code>ctrl+alt+F2</code>进到tty登陆，发现没有网络，查看了下失败的启动，控制台观察的，输出不能被复制，下面命令输出大致的写下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl --failed</span><br><span class="line">  UNIT                  LOAD   ACTIVE SUB    DESCRIPTION</span><br><span class="line">● cryptctl-auto-unlock@sys-devices-pci0000:00-0000:00:08.0-virtio3-block-vda.service</span><br><span class="line">● cryptctl-auto-unlock@aD7Wov-Krfg-KPbq-Dnf6-1dAj-e9dM-N7dUir.service</span><br><span class="line">● cryptctl-auto-unlock@abd69e01-d874-4658-b738-1107d33cd84c.service</span><br><span class="line">● cryptctl-auto-unlock@abd69e01-d874-4658-b738-1107d33cd84c.service</span><br><span class="line">● cryptctl-auto-unlock@0zSmA1-nPGR-FuVE-ZIvq-vxhl-2WdX-eh58e2.service</span><br><span class="line">● postfix.service       loaded failed failed Postfix Mail Transport Agent</span><br><span class="line">● wicked.service        loaded failed failed wicked managed network interfaces</span><br><span class="line">● wickedd-auto4.service loaded failed failed wicked AutoIPv4 supplicant service</span><br><span class="line">● wickedd-dhcp4.service loaded failed failed wicked DHCPv4 supplicant service</span><br><span class="line">● wickedd-dhcp6.service loaded failed failed wicked DHCPv6 supplicant service</span><br><span class="line">● wickedd.service       loaded failed failed wicked network management service daemon</span><br><span class="line"></span><br><span class="line">LOAD   = Reflects whether the unit definition was properly loaded.</span><br><span class="line">ACTIVE = The high-level unit activation state, i.e. generalization of SUB.</span><br><span class="line">SUB    = The low-level unit activation state, values depend on unit type.</span><br></pre></td></tr></table></figure></p><p>查看了下系统日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vi /var/log/messages</span><br><span class="line">2019-12-04T21:42:56.401177+08:00 bpcprdascs1 cryptctl[1506]: open /etc/sysconfig/cryptctl-client: no such file or directory</span><br><span class="line">2019-12-04T21:42:56.403110+08:00 bpcprdascs1 cryptctl[1515]: open /etc/sysconfig/cryptctl-client: no such file or directory</span><br><span class="line">2019-12-04T21:42:56.408475+08:00 bpcprdascs1 cryptctl[1495]: open /etc/sysconfig/cryptctl-client: no such file or directory</span><br><span class="line">2019-12-04T21:42:56.408634+08:00 bpcprdascs1 cryptctl[1529]: open /etc/sysconfig/cryptctl-client: no such file or directory</span><br><span class="line">2019-12-04T21:42:56.408807+08:00 bpcprdascs1 cryptctl[1508]: open /etc/sysconfig/cryptctl-client: no such file or directory</span><br><span class="line">2019-12-04T21:42:56.414068+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@sys-devices-pci0000:00-0000:00:08.0-virtio3-block-vda.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class="line">2019-12-04T21:42:56.414237+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@sys-devices-pci0000:00-0000:00:08.0-virtio3-block-vda.service: Unit entered failed state.</span><br><span class="line">2019-12-04T21:42:56.414319+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@sys-devices-pci0000:00-0000:00:08.0-virtio3-block-vda.service: Failed with result &apos;exit-code&apos;.</span><br><span class="line">2019-12-04T21:42:56.414403+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@aD7Wov-Krfg-KPbq-Dnf6-1dAj-e9dM-N7dUir.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class="line">2019-12-04T21:42:56.414467+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@aD7Wov-Krfg-KPbq-Dnf6-1dAj-e9dM-N7dUir.service: Unit entered failed state.</span><br><span class="line">2019-12-04T21:42:56.414528+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@aD7Wov-Krfg-KPbq-Dnf6-1dAj-e9dM-N7dUir.service: Failed with result &apos;exit-code&apos;.</span><br><span class="line">2019-12-04T21:42:56.414596+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@abd69e01-d874-4658-b738-1107d33cd84c.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class="line">2019-12-04T21:42:56.414657+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@abd69e01-d874-4658-b738-1107d33cd84c.service: Unit entered failed state.</span><br><span class="line">2019-12-04T21:42:56.414735+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@abd69e01-d874-4658-b738-1107d33cd84c.service: Failed with result &apos;exit-code&apos;.</span><br><span class="line">2019-12-04T21:42:56.414794+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@0zSmA1-nPGR-FuVE-ZIvq-vxhl-2WdX-eh58e2.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class="line">2019-12-04T21:42:56.414851+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@0zSmA1-nPGR-FuVE-ZIvq-vxhl-2WdX-eh58e2.service: Unit entered failed state.</span><br><span class="line">2019-12-04T21:42:56.414907+08:00 bpcprdascs1 systemd[1]: cryptctl-auto-unlock@0zSmA1-nPGR-FuVE-ZIvq-vxhl-2WdX-eh58e2.service: Failed with result &apos;exit-code&apos;.</span><br></pre></td></tr></table></figure></p><p>发现该文件丢失，同样系统的机器上去把内容手动创建，然后重启只剩下这些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">● wicked.service        loaded failed failed wicked managed network interfaces</span><br><span class="line">● wickedd-auto4.service loaded failed failed wicked AutoIPv4 supplicant service</span><br><span class="line">● wickedd-dhcp4.service loaded failed failed wicked DHCPv4 supplicant service</span><br><span class="line">● wickedd-dhcp6.service loaded failed failed wicked DHCPv6 supplicant service</span><br><span class="line">● wickedd.service       loaded failed failed wicked network management service daemon</span><br></pre></td></tr></table></figure></p><p>找到相关日志，或者手动启动wicked或者网卡也报错下面类似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-12-04T21:54:50.170654+08:00 bpcprdascs1 wickedd[1399]: Failed to register dbus bus name &quot;org.opensuse.Network&quot; (Connection &quot;:1.2&quot; is not allowed to own the service &quot;org.opensuse.Network&quot; due to security policies in the configuration file)</span><br><span class="line">2019-12-04T21:54:50.170657+08:00 bpcprdascs1 wickedd[1399]: unable to initialize dbus service</span><br><span class="line">2019-12-04T21:54:50.170659+08:00 bpcprdascs1 systemd[1]: wickedd.service: Main process exited, code=exited, status=1/FAILURE</span><br><span class="line">2019-12-04T21:54:50.170661+08:00 bpcprdascs1 systemd[1]: Failed to start wicked network management service daemon.</span><br><span class="line">...</span><br><span class="line">2019-12-04T22:02:05.868058+08:00 bpcprdascs1 wicked: /org/opensuse/Network/Interface.getManagedObjects failed. Server responds:</span><br><span class="line">2019-12-04T22:02:05.868883+08:00 bpcprdascs1 wicked: org.freedesktop.DBus.Error.ServiceUnknown: The name org.opensuse.Network was not provided by any .service files</span><br></pre></td></tr></table></figure></p><p>这个错误找了一圈都没正确的解决办法，还是自己突发奇想在<code>/etc/dbus-1/</code>对比了下发现文件丢失<br>正常机器上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">bpcprdascs2:/etc/dbus-1/system.d # find /etc/dbus-1/ -type f </span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.Snapper.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.hostname1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.import1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.locale1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.login1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.machine1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.systemd1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.timedate1.conf</span><br><span class="line">/etc/dbus-1/system.d/com.redhat.PrinterDriversInstaller.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.UPower.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.GeoClue2.Agent.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.GeoClue2.conf</span><br><span class="line">/etc/dbus-1/system.d/bluetooth.conf</span><br><span class="line">/etc/dbus-1/system.d/com.redhat.tuned.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.PolicyKit1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.UDisks2.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.RealtimeKit1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.Accounts.conf</span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.Network.AUTO4.conf</span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.Network.DHCP4.conf</span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.Network.DHCP6.conf</span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.Network.Nanny.conf</span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.Network.conf</span><br><span class="line">/etc/dbus-1/system.d/pulseaudio-system.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.PackageKit.conf</span><br><span class="line">/etc/dbus-1/system.d/cups.conf</span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.CupsPkHelper.Mechanism.conf</span><br><span class="line">/etc/dbus-1/system.d/gdm.conf</span><br><span class="line">/etc/dbus-1/session.conf</span><br><span class="line">/etc/dbus-1/system.conf</span><br></pre></td></tr></table></figure></p><p>该故障机器上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bpcprdascs1:/var/log # find /etc/dbus-1/ -type f </span><br><span class="line">/etc/dbus-1/system.d/org.opensuse.Snapper.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.hostname1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.import1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.locale1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.login1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.machine1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.systemd1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.timedate1.conf</span><br><span class="line">/etc/dbus-1/system.d/com.redhat.PrinterDriversInstaller.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.UPower.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.GeoClue2.Agent.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.GeoClue2.conf</span><br><span class="line">/etc/dbus-1/system.d/bluetooth.conf</span><br><span class="line">/etc/dbus-1/system.d/com.redhat.tuned.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.PolicyKit1.conf</span><br><span class="line">/etc/dbus-1/system.d/org.freedesktop.RealtimeKit1.conf</span><br><span class="line">/etc/dbus-1/session.conf</span><br><span class="line">/etc/dbus-1/system.conf</span><br></pre></td></tr></table></figure></p><p>因为故障机器的网络无法启动，即使手动<code>ip addr add</code>也报错dbus，所以无法通过网络scp。于是在后台正常机器给添加了一个数据盘，把该目录的文件拷贝到数据盘上，再把数据盘挂载到故障机器上。然后cp拷贝完冲去，然后网络起来了<br>只剩下故障<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl --failed</span><br><span class="line">  UNIT                  LOAD   ACTIVE SUB    DESCRIPTION</span><br><span class="line">● wickedd-auto4.service loaded failed failed wicked AutoIPv4 supplicant service</span><br><span class="line">● wickedd-dhcp4.service loaded failed failed wicked DHCPv4 supplicant service</span><br><span class="line">● wickedd-dhcp6.service loaded failed failed wicked DHCPv6 supplicant service</span><br></pre></td></tr></table></figure></p><p>上面三个通过系统日志可以找到是文件丢失，其他机器上去拷贝就行了，当然也不是只有这三个服务的文件丢失，其他服务的文件也丢失了，自行看下系统日志处理下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2019-12-04T21:54:50.170648+08:00 bpcprdascs1 display-manager[1429]: /usr/lib/X11/display-manager: line 17: /etc/sysconfig/displaymanager: No such file or directory</span><br><span class="line">2019-12-04T22:18:03.689878+08:00 bpcprdascs1 systemd[1395]: wickedd-dhcp6.service: Failed at step EXEC spawning /usr/lib/wicked/bin/wickedd-dhcp6: No such file or directory</span><br><span class="line">...</span><br><span class="line">2019-12-04T22:18:03.689884+08:00 bpcprdascs1 systemd[1396]: wickedd-dhcp4.service: Failed at step EXEC spawning /usr/lib/wicked/bin/wickedd-dhcp4: No such file or directory</span><br><span class="line">...</span><br><span class="line">2019-12-04T22:18:03.689897+08:00 bpcprdascs1 systemd[1403]: wickedd-auto4.service: Failed at step EXEC spawning /usr/lib/wicked/bin/wickedd-auto4: No such file or directory</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨晚吃完晚饭回到办公室，右边同事在控制台看着一个suse起不来一直启动的时候卡在suse的蜥蜴logo背景图那。见我来了叫我看下，他们已经尝试过恢复快照，但是还不行，应该是很久之前损坏的，只不过因为没重启没发现，我叫他重启下看看卡在哪，重启后进入内核后显示背景图那按下esc
      
    
    </summary>
    
    
      <category term="boot" scheme="http://zhangguanzhang.github.io/categories/boot/"/>
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/categories/boot/grub/"/>
    
      <category term="suse" scheme="http://zhangguanzhang.github.io/categories/boot/grub/suse/"/>
    
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/tags/grub/"/>
    
      <category term="boot" scheme="http://zhangguanzhang.github.io/tags/boot/"/>
    
      <category term="suse" scheme="http://zhangguanzhang.github.io/tags/suse/"/>
    
  </entry>
  
  <entry>
    <title>从PTTYPE=&quot;dos&quot;到TYPE=&quot;LVM2_member&quot;的救援</title>
    <link href="http://zhangguanzhang.github.io/2019/12/03/dos-to-gpt/"/>
    <id>http://zhangguanzhang.github.io/2019/12/03/dos-to-gpt/</id>
    <published>2019-12-03T11:38:48.000Z</published>
    <updated>2019-12-09T02:39:21.907Z</updated>
    
    <content type="html"><![CDATA[<p>同事叫我救援一台云主机，虽说是虚拟机，但是类比到硬件服务器还是一样的操作，这里记录下给后来者查阅</p><h2 id="故障信息"><a href="#故障信息" class="headerlink" title="故障信息"></a>故障信息</h2><p>控制台进去看到centos7的背景虚化的数字7+转圈，重启下看下完整的错误，重启选了内核然后进到图形界面的时候按下ecs取消，观察终端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[  OK ] Started Show Plymouth Boot Screen.</span><br><span class="line">[  OK ] Reached target Paths.</span><br><span class="line">[  OK ] Reached target Basic System.</span><br><span class="line">[  124.522110] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts</span><br><span class="line">[  125.034736] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts</span><br><span class="line">[  125.542788] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts</span><br><span class="line">[  126.522110] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts</span><br><span class="line">[  127.068643] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts</span><br><span class="line">[  127.576830] dracut-initqueue[240]: Warning: dracut-initqueue timeout - starting timeout scripts</span><br><span class="line">...</span><br><span class="line">[  185.082387] dracut-initqueue[240]: Warning: Could not boot.</span><br><span class="line">[  185.118736] dracut-initqueue[240]: Warning: /dev/centos/root does not exist</span><br><span class="line">[  185.119239] dracut-initqueue[240]: Warning: /dev/mapper/centos-root does not exist</span><br><span class="line">          Starting Dracut Emergency Shell...</span><br><span class="line">Warning: /dev/centos/root does not exist</span><br><span class="line">Warning: /dev/mapper/centos-root does not exist</span><br><span class="line">Generating &quot;/run/initramfs/rdsosreport.txt&quot;</span><br><span class="line"></span><br><span class="line">Entering emergency mode. Exit the shell to continue.</span><br><span class="line">Type &quot;journalctl&quot; to view system logs.</span><br><span class="line">You might want to save &quot;/run/initramfs/rdsosreport.txt&quot; to a USB stack or /boot</span><br><span class="line">after mounting them and attach it to a bug report.</span><br><span class="line"></span><br><span class="line">dracut:/#</span><br></pre></td></tr></table></figure></p><h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><h3 id="挂载iso进救援模式"><a href="#挂载iso进救援模式" class="headerlink" title="挂载iso进救援模式"></a>挂载iso进救援模式</h3><p>找不到根分区，关闭虚机，后台拷贝下系统盘的卷先备份下。然后给虚机的IDE光驱挂载了个centos的iso，修改虚机启动顺序到ISO，进<code>Troubleshooting</code> –&gt; <code>Rescue a CentOS Linux system</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) Continue</span><br><span class="line">2) Read-only mount</span><br><span class="line">3) Skip to shell</span><br><span class="line">3) Quit (Reboot)</span><br><span class="line">Please make a selection from the above: 1</span><br></pre></td></tr></table></figure></p><p>选择了1后提示没有任何Linux分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=====================================================================================</span><br><span class="line">=====================================================================================</span><br><span class="line">Rescue Mount</span><br><span class="line"></span><br><span class="line">You don&apos;t have any Linux partitions. The system will reboot automatically when you exit from the shell.</span><br><span class="line">Please press &lt;return&gt; to get a shell.</span><br></pre></td></tr></table></figure></p><p>按下回车进入交互式shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# lsblk</span><br><span class="line">NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">vda             252:0    0    40G  0 disk </span><br><span class="line">├─vda1          252:1    0     2M  0 part</span><br><span class="line">├─vda2          252:2    0   200M  0 part</span><br><span class="line">└─vda3          252:3    0  39.8G  0 part</span><br><span class="line">vdb             252:16   0   400G  0 disk</span><br><span class="line">loop0             7:1    0 420.3M  1 loop</span><br><span class="line">loop1             7:1    0     2G  1 loop</span><br><span class="line">├─live-rw       253:0    0     2G  0 dm    /</span><br><span class="line">└─live-base     253:1    0     2G  1 dm</span><br><span class="line">loop2             7:2    0   512M  1 loop</span><br><span class="line">└─live-rw       253:0    0     2G  0 dm    /</span><br><span class="line">sh-4.2# fdisk -l /dev/vda</span><br><span class="line"></span><br><span class="line">Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0x000ad4f2</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/vda1            2048        6143        2048   83  Linux</span><br><span class="line">/dev/vda2   *        6144      415743      204800   83  Linux</span><br><span class="line">/dev/vda3          415744    83886079    41735168   8e  Linux LVM</span><br><span class="line">sh-4.2# blkid</span><br><span class="line">/run/install/repo/LiveOS/squashfs.img: TYPE=&quot;squashfs&quot;</span><br><span class="line">/dev/sr0: UUID=&quot;2018-05-03-20-55-23-00&quot; LABEL=&quot;Centos 7 x86_64&quot; TYPE=&quot;iso9660&quot; PTTYPE=&quot;dos&quot;</span><br><span class="line">/dev/sr1: UUID=&quot;2019-11-01-16-33-37-00&quot; LABEL=&quot;config-2&quot; TYPE=&quot;iso9660&quot;</span><br><span class="line">/dev/vda1: UUID=&quot;e438c18a-c97d-432c-ae66-a538cd1fbb4d&quot; TYPE=&quot;xfs&quot;</span><br><span class="line">/dev/vda3: PTTYPE=&quot;dos&quot;</span><br><span class="line">/dev/loop0: TYPE=&quot;squashfs&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>查看下块，vda2是boot，vda3是lvm也就是根所在，问题是<code>/dev/vda3: PTTYPE=&quot;dos&quot;</code>不知道为何变成了dos类型，正常应该是<code>TYPE=&quot;LVM2_member&quot;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/dev/vda3: UUID=&quot;xxxxxxxxxxxxxx&quot; TYPE=&quot;LVM2_member&quot;</span><br></pre></td></tr></table></figure></p><p>看看lvm的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /mnt/sysimage</span><br><span class="line">vgchange -a y</span><br><span class="line">mount /dev/centos/root /mnt/sysimage</span><br><span class="line">ls -l /mnt/sysimage</span><br></pre></td></tr></table></figure></p><p>发现根分区的文件还在</p><h3 id="重做lvm为了去掉PTTYPE-”dos”"><a href="#重做lvm为了去掉PTTYPE-”dos”" class="headerlink" title="重做lvm为了去掉PTTYPE=”dos”"></a>重做lvm为了去掉PTTYPE=”dos”</h3><p>尝试着重做pv试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# vgremove centos</span><br><span class="line">Do you really wanto ro remove volume group &quot;centos&quot; containing 1 logical volumes? [y/n]: y</span><br><span class="line">  Logical volume &quot;root&quot; successfully removed</span><br><span class="line">  Volume group &quot;centos&quot; successfully removed</span><br><span class="line">sh-4.2# pvremove /dev/vda3</span><br><span class="line">  Labels on physical volume &quot;/dev/vda3&quot; successfully wiped.</span><br><span class="line">sh-4.2# pvcreate /dev/vda3</span><br><span class="line">WARNING: dos signature detected on /dev/vda3 at offset 510. Wipe it? [y/n]: y</span><br><span class="line">  Wiping dos signature on /dev/vda3.</span><br><span class="line">  Physical volume &quot;/dev/vda3&quot; successfully created.</span><br><span class="line">sh-4.2# vgcreate centos /dev/vda3</span><br><span class="line">  Volume group &quot;centos&quot; successfully created</span><br><span class="line">sh-4.2# lvcreate -n root -l 100%FREE centos</span><br><span class="line">  Logical volume &quot;root&quot; created</span><br><span class="line">sh-4.2# mkdir /mnt/root</span><br><span class="line">sh-4.2# mount /dev/centos/root /mnt/root</span><br></pre></td></tr></table></figure></p><p>被后面的<code>xfs_repair</code>输出滚动冲没了，大致就是lvcreate的时候提示有xfs标签，选择不擦除，最终得到了个残缺的的<code>/dev/centos/root</code>，然后<code>xfs_repair</code>它后重启也无法正常开机。再次进救援模式挂载了后，在chroot到故障的根进不去报错<code>/bin/bash no such file</code>，才意识到损坏了文件，很多so文件都丢了<br>最开始留有备份，打算在文件层面恢复</p><h3 id="最后也应该是最开应该做的正确操作"><a href="#最后也应该是最开应该做的正确操作" class="headerlink" title="最后也应该是最开应该做的正确操作"></a>最后也应该是最开应该做的正确操作</h3><p>下发了台不是lvm的centos7.6机器，然后给该机器挂载了数据盘为vdb(50G，其实大于等于故障机器根的真实占用大小即可)，备份的卷挂载为vdc。利用数据盘中转下原有的根的文件<br>打算把lvm的文件系统文件拷贝到数据盘vdb的文件系统上，然后在故障机器的救援模式下挂载这个数据盘，把数据盘的根文件拷贝到残缺的系统盘的根下</p><h4 id="格式化vdb"><a href="#格式化vdb" class="headerlink" title="格式化vdb"></a>格式化vdb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@fix-data ~]# lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1 1024M  0 rom  </span><br><span class="line">sr1     11:1    1  464K  0 rom  </span><br><span class="line">vda    253:0    0   40G  0 disk </span><br><span class="line">└─vda1 253:1    0   40G  0 part /</span><br><span class="line">vdb    253:16   0   50G  0 disk </span><br><span class="line">[root@fix-data ~]# parted /dev/vdb</span><br><span class="line">GNU Parted 3.1</span><br><span class="line">Using /dev/vdb</span><br><span class="line">Welcome to GNU Parted! Type &apos;help&apos; to view a list of commands.</span><br><span class="line">(parted) mklabel gpt                                                      </span><br><span class="line">(parted) mkpart                                                           </span><br><span class="line">Partition name?  []? 1                                                    </span><br><span class="line">File system type?  [ext2]? xfs                                            </span><br><span class="line">Start? 1                                                                  </span><br><span class="line">End? 100%                                                                 </span><br><span class="line">(parted) p                                                                </span><br><span class="line">Model: Virtio Block Device (virtblk)</span><br><span class="line">Disk /dev/vdb: 53.7GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name  Flags</span><br><span class="line"> 1      1049kB  53.7GB  53.7GB               1</span><br><span class="line"></span><br><span class="line">(parted) q                                                                </span><br><span class="line">Information: You may need to update /etc/fstab.</span><br><span class="line"></span><br><span class="line">[root@fix-data ~]# mkfs.xfs /dev/vdb1</span><br><span class="line">meta-data=/dev/vdb1              isize=512    agcount=4, agsize=3276672 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0, sparse=0</span><br><span class="line">data     =                       bsize=4096   blocks=13106688, imaxpct=25</span><br><span class="line">         =                       sunit=0      swidth=0 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line">log      =internal log           bsize=4096   blocks=6399, version=2</span><br><span class="line">         =                       sectsz=512   sunit=0 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">[root@fix-data ~]# mkdir -p /mnt/&#123;root,data&#125;</span><br></pre></td></tr></table></figure><h4 id="挂载需要修复的系统盘的克隆卷"><a href="#挂载需要修复的系统盘的克隆卷" class="headerlink" title="挂载需要修复的系统盘的克隆卷"></a>挂载需要修复的系统盘的克隆卷</h4><p>后台挂载好后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># lsblk</span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0     11:0    1 1024M  0 rom  </span><br><span class="line">sr1     11:1    1  464K  0 rom  </span><br><span class="line">vda    253:0    0   40G  0 disk </span><br><span class="line">└─vda1 253:1    0   40G  0 part /</span><br><span class="line">vdb    253:16   0   50G  0 disk </span><br><span class="line">└─vdb1 253:17   0   50G  0 part </span><br><span class="line">vdc    253:32   0   40G  0 disk </span><br><span class="line">├─vdc1 253:33   0    2M  0 part </span><br><span class="line">├─vdc2 253:34   0  200M  0 part </span><br><span class="line">└─vdc3 253:35   0 39.8G  0 part</span><br></pre></td></tr></table></figure></p><p>安装lvm2工具(新机器因为不是lvm的根分区所以系统没有安装这个)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y lvm2</span><br></pre></td></tr></table></figure></p><p>激活lvm状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vgchange -a y</span><br><span class="line">  1 logical volume(s) in volume group &quot;centos&quot; now active</span><br></pre></td></tr></table></figure></p><p>根 –&gt; /mnt/root/<br>/boot  –&gt; /mnt/root/boot<br>数据盘 –&gt; /mnt/data/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/centos/root /mnt/root/</span><br><span class="line">mount /dev/vdc2 /mnt/root/boot</span><br><span class="line">mount /dev/vdb1 /mnt/data</span><br></pre></td></tr></table></figure></p><p>然后拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -a /mnt/root/* /mnt/data/</span><br></pre></td></tr></table></figure></p><p>拷贝完后取消挂载并关机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">umount /mnt/data/</span><br><span class="line">umount /mnt/root/boot/</span><br><span class="line">umount /mnt/root/</span><br><span class="line">poweroff</span><br></pre></td></tr></table></figure></p><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><p>后台把该数据盘挂载到故障机器上，故障机器在救援模式里操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# lsblk</span><br><span class="line">NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sr0              11:0    1   4.2G  0 rom  /run/install/repo</span><br><span class="line">sr1              11:1    1   464K  0 rom </span><br><span class="line">vda             252:0    0    40G  0 disk </span><br><span class="line">├─vda1          252:1    0     2M  0 part</span><br><span class="line">├─vda2          252:2    0   200M  0 part /mnt/sysimage/boot</span><br><span class="line">└─vda3          252:3    0  39.8G  0 part </span><br><span class="line">  └─centos-root 253:2    0  39.8G  0 lvm  /mnt/sysimage</span><br><span class="line">vdb             252:16   0   400G  0 disk</span><br><span class="line">vdc             252:32   0    50G  0 disk</span><br><span class="line">└─vdc1          252:33   0    50G  0 part</span><br><span class="line">loop0             7:1    0 420.3M  1 loop</span><br><span class="line">loop1             7:1    0     2G  1 loop</span><br><span class="line">├─live-rw       253:0    0     2G  0 dm    /</span><br><span class="line">└─live-base     253:1    0     2G  1 dm</span><br><span class="line">loop2             7:2    0   512M  1 loop</span><br><span class="line">└─live-rw       253:0    0     2G  0 dm    /</span><br></pre></td></tr></table></figure></p><p>可以看到数据盘为vdc，挂载vdc1到<code>/mnt/data</code>，然后拷贝到<code>/mnt/sysimage</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# mkdir /mnt/data</span><br><span class="line">sh-4.2# mount /dev/vdc1 /mnt/data</span><br><span class="line">sh-4.2# ls -l /mnt/data</span><br><span class="line">total 16</span><br><span class="line">lrwxrwxrwx    1 root root    7 Jul 24  2018 bin -&gt; usr/bin</span><br><span class="line">dr-xr-xr-x.   5 root root 4096 Jul 24  2018 boot</span><br><span class="line">drwxr-xr-x.   2 root root   18 Dec  3 04:24 dev</span><br><span class="line">drwxr-xr-x. 143 root root 8192 Dec  3 03:54 etc</span><br><span class="line">drwxr-xr-x.   3 root root   20 Jul 25  2018 home</span><br><span class="line">lrwxrwxrwx    1 root root    7 Jul 24  2018 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx    1 root root    9 Jul 24  2018 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x.   2 root root    6 Apr 11  2018 media</span><br><span class="line">drwxr-xr-x.   2 root root    6 Apr 11  2018 mnt</span><br><span class="line">drwxr-xr-x.   4 root root   34 Nov  1 17:19 opt</span><br><span class="line">drwxr-xr-x.   2 root root    6 Jul 24  2018 proc</span><br><span class="line">dr-xr-x---.   9 root root  258 Nov  5 16:14 root</span><br><span class="line">drwxr-xr-x.   2 root root    6 Jul 24  2018 run</span><br><span class="line">lrwxrwxrwx    1 root root    8 Jul 24  2018 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root    6 Apr 11  2018 srv</span><br><span class="line">drwxr-xr-x.   2 root root    6 Jul 24  2018 sys</span><br><span class="line">drwxrwxrwt.   7 root root  114 Dec  3 04:55 tmp</span><br><span class="line">drwx------    7 root root   66 Jul 24  2018 usr</span><br><span class="line">drwxr-xr-x.  21 root root 4096 Jul 24  2018 var</span><br><span class="line">drwxr-xr-x.   2 root root    6 Nov  4 02:09 version</span><br><span class="line">sh-4.2# cd /mnt/sysimage</span><br><span class="line">sh-4.2# cp -a /mnt/data/* .</span><br></pre></td></tr></table></figure></p><p>重做grub.cfg，该系统不是grub2，如果是grub2则/boot下有grub2目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mount -o bind /dev /mnt/sysimage/dev</span><br><span class="line">mount -o bind /proc /mnt/sysimage/proc</span><br><span class="line">mount -o bind /run /mnt/sysimage/run</span><br><span class="line">mount -o bind /sys /mnt/sysimage/sys</span><br><span class="line">mv boot/grub/grub.cfg&#123;,.bak&#125;</span><br></pre></td></tr></table></figure></p><p>然后chroot进来生成<code>grub.cfg</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chroot .</span><br><span class="line">grub-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></p><p>开机正常</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;同事叫我救援一台云主机，虽说是虚拟机，但是类比到硬件服务器还是一样的操作，这里记录下给后来者查阅&lt;/p&gt;
&lt;h2 id=&quot;故障信息&quot;&gt;&lt;a href=&quot;#故障信息&quot; class=&quot;headerlink&quot; title=&quot;故障信息&quot;&gt;&lt;/a&gt;故障信息&lt;/h2&gt;&lt;p&gt;控制台进去看
      
    
    </summary>
    
    
      <category term="boot" scheme="http://zhangguanzhang.github.io/categories/boot/"/>
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/categories/boot/grub/"/>
    
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/tags/grub/"/>
    
      <category term="boot" scheme="http://zhangguanzhang.github.io/tags/boot/"/>
    
  </entry>
  
  <entry>
    <title>应大多数人要求写下kubeadm的基础使用</title>
    <link href="http://zhangguanzhang.github.io/2019/11/24/kubeadm-base-use/"/>
    <id>http://zhangguanzhang.github.io/2019/11/24/kubeadm-base-use/</id>
    <published>2019-11-24T11:36:53.000Z</published>
    <updated>2019-12-09T08:59:35.019Z</updated>
    
    <content type="html"><![CDATA[<p>市面上很多kubeadm的文章都是错误示范或者不够详细，大多数都没写系统设置之类的就直接<code>kubeadm init</code>导致很多跟着做的人会报错</p><p>我期望看到本文的读者最少具备以下知识:</p><ul><li>Linux一些目录规范和systemd</li><li>学过一点docker</li><li>懂dns和/etc/hosts、curl互相结合来测试一些web的接口响应状态</li><li>不要求github有自己项目，至少会浏览github</li></ul><p>本教学将以下列节点数与规格来进行部署Kubernetes集群,系统<code>CentOS 7.6+</code>，有条件<code>7.7</code>，不要使用centos7.4以及一下，容器技术依赖于内核技术，低版本系统部署和运行后问题会非常多。有读者用debian10测试过了，apt系列的ubuntu应该16.04以上也行。总之本教程使用与yum系列的系统和apt的系统</p><table><thead><tr><th style="text-align:left">IP</th><th style="text-align:center">Hostname</th><th style="text-align:center">role</th><th style="text-align:center">CPU</th><th style="text-align:center">Memory</th></tr></thead><tbody><tr><td style="text-align:left">172.19.0.2</td><td style="text-align:center">K8S-M1</td><td style="text-align:center">master</td><td style="text-align:center">4</td><td style="text-align:center">8G</td></tr><tr><td style="text-align:left">172.19.0.3</td><td style="text-align:center">K8S-M2</td><td style="text-align:center">master</td><td style="text-align:center">4</td><td style="text-align:center">8G</td></tr><tr><td style="text-align:left">172.19.0.4</td><td style="text-align:center">K8S-M3</td><td style="text-align:center">master</td><td style="text-align:center">4</td><td style="text-align:center">8G</td></tr><tr><td style="text-align:left">172.19.0.5</td><td style="text-align:center">K8S-N1</td><td style="text-align:center">node</td><td style="text-align:center">2</td><td style="text-align:center">4G</td></tr></tbody></table><blockquote><ul><li>kubeadm好像要求最低配置2c2g还是多少来着</li><li>所有操作全部用root使用者进行，系统盘尽量大点，不然到时候镜像多了例如到了85%会被gc回收镜像</li><li>高可用一般建议大于等于3台的奇数台,我使用3台<code>master</code>来做高可用</li><li>一台也可以，但是差距不大，差异性我会在文章中注明的，并且单台master的话其他的master ip不用写即可</li></ul></blockquote><h2 id="事前准备-每台机器"><a href="#事前准备-每台机器" class="headerlink" title="事前准备(每台机器)"></a>事前准备(每台机器)</h2><h3 id="系统层面设置"><a href="#系统层面设置" class="headerlink" title="系统层面设置"></a>系统层面设置</h3><p>假设系统是刚用官方iso安装完成未作任何配置(网络和dns自行去配置)，apt系列的系统可能需要自行配制下国内的包管理源。对于各系统的差异性我会在命令前加系统区别开，没有生命系统的就是通用的命名</p><ul><li>所有防火墙与SELinux 已关闭。如CentOS：<br>否则后续 K8S 挂载目录时可能报错 Permission denied，有些云厂商的ip是被NetworkManager纳管的(例如青云)，停了它会网络不通，可以不停。<br>yum系列系统:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable --now firewalld NetworkManager</span><br><span class="line">#关闭selinux</span><br><span class="line">setenforce 0</span><br><span class="line">sed -ri &apos;/^[^#]*SELINUX=/s#=.+$#=disabled#&apos; /etc/selinux/config</span><br></pre></td></tr></table></figure></li></ul><p>apt系列系统:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw disable</span><br></pre></td></tr></table></figure></p><p>设置时区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></p><ul><li><p>关闭 dnsmasq (可选)<br>linux 系统开启了 dnsmasq 后(如 GUI 环境)，将系统 DNS Server 设置为 127.0.0.1，这会导致 docker 容器无法解析域名，需要关闭它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> --now dnsmasq</span><br></pre></td></tr></table></figure></li><li><p>Kubernetes 建议关闭系统Swap,在<code>所有机器</code>使用以下指令关闭swap并注释掉<code>/etc/fstab</code>中swap的行，不想关闭可以不执行，后面会应对的配置选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br><span class="line">sed -ri <span class="string">'/^[^#]*swap/s@^@#@'</span> /etc/fstab</span><br></pre></td></tr></table></figure></li><li><p>安装一些基础依赖和工具<br>yum系列系统:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install -y \</span><br><span class="line">    curl \</span><br><span class="line">    wget \</span><br><span class="line">    git \</span><br><span class="line">    conntrack-tools \</span><br><span class="line">    psmisc \</span><br><span class="line">    nfs-utils \</span><br><span class="line">    jq \</span><br><span class="line">    socat \</span><br><span class="line">    bash-completion \</span><br><span class="line">    ipset \</span><br><span class="line">    ipvsadm \</span><br><span class="line">    conntrack \</span><br><span class="line">    libseccomp \</span><br><span class="line">    net-tools \</span><br><span class="line">    crontabs \</span><br><span class="line">    sysstat \</span><br><span class="line">    unzip \</span><br><span class="line">    bind-utils \</span><br><span class="line">    tcpdump \</span><br><span class="line">    telnet \</span><br><span class="line">    lsof \</span><br><span class="line">    htop</span><br></pre></td></tr></table></figure></li></ul><p>apt系列系统:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y wget \</span><br><span class="line">  git \</span><br><span class="line">  psmisc \</span><br><span class="line">  nfs-kernel-server \</span><br><span class="line">  nfs-common \</span><br><span class="line">  jq \</span><br><span class="line">  socat \</span><br><span class="line">  bash-completion \</span><br><span class="line">  ipset \</span><br><span class="line">  ipvsadm \</span><br><span class="line">  conntrack \</span><br><span class="line">  libseccomp2 \</span><br><span class="line">  net-tools \</span><br><span class="line">  cron \</span><br><span class="line">  sysstat \</span><br><span class="line">  unzip \</span><br><span class="line">  dnsutils \</span><br><span class="line">  tcpdump \</span><br><span class="line">  telnet \</span><br><span class="line">  lsof \</span><br><span class="line">  htop \</span><br><span class="line">  curl \</span><br><span class="line">  apt-transport-https \</span><br><span class="line">  ca-certificates</span><br></pre></td></tr></table></figure></p><ul><li>如果集群kube-proxy想使用ipvs模式的话需要开机加载下列模块儿，按照规范使用<code>systemd-modules-load</code>来加载而不是在<code>/etc/rc.local</code>里写modprobe<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">:&gt; /etc/modules-load.d/ipvs.conf</span><br><span class="line">module=(</span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack</span><br><span class="line">br_netfilter</span><br><span class="line">  )</span><br><span class="line">for kernel_module in $&#123;module[@]&#125;;do</span><br><span class="line">    /sbin/modinfo -F filename $kernel_module |&amp; grep -qv ERROR &amp;&amp; echo $kernel_module &gt;&gt; /etc/modules-load.d/ipvs.conf || :</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul><p>apt系列的系统先使用<code>systemctl cat systemd-modules-load</code>看下有没有<code>Install</code>段，没有则执行下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat&gt;&gt;/usr/lib/systemd/system/systemd-modules-load.service&lt;&lt;EOF</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>启动该模块管理服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable --now systemd-modules-load.service</span><br></pre></td></tr></table></figure></p><p>上面如果systemctl enable命令报错可以systemctl status -l systemd-modules-load.service看看哪个内核模块加载不了,在/etc/modules-load.d/ipvs.conf里注释掉它再enable试试<br>确认内核模块加载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod | grep ip_v</span><br><span class="line">ip_vs_sh               12688  0 </span><br><span class="line">ip_vs_wrr              12697  0 </span><br><span class="line">ip_vs_rr               12600  11 </span><br><span class="line">ip_vs                 145497  17 ip_vs_rr,ip_vs_sh,ip_vs_wrr</span><br><span class="line">nf_conntrack          133095  7 ip_vs,nf_nat,nf_nat_ipv4,xt_conntrack,nf_nat_masquerade_ipv4,nf_conntrack_netlink,nf_conntrack_ipv4</span><br><span class="line">libcrc32c              12644  3 ip_vs,nf_nat,nf_conntrack</span><br></pre></td></tr></table></figure></p><ul><li><code>所有机器</code>需要设定<code>/etc/sysctl.d/k8s.conf</code>的系统参数，目前对ipv6支持不怎么好，所以里面也关闭ipv6了。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time = 120</span><br><span class="line">net.ipv4.conf.all.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 0</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.lo.arp_announce = 2</span><br><span class="line">net.ipv4.conf.all.arp_announce = 2</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line"><span class="comment"># 要求iptables不对bridge的数据进行处理</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 1</span><br><span class="line">net.netfilter.nf_conntrack_max = 2310720</span><br><span class="line">fs.inotify.max_user_watches=89100</span><br><span class="line">fs.may_detach_mounts = 1</span><br><span class="line">fs.file-max = 52706963</span><br><span class="line">fs.nr_open = 52706963</span><br><span class="line">vm.overcommit_memory=1</span><br><span class="line">vm.panic_on_oom=0</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></li></ul><p>如果选择关闭swap也要在内核里关闭，不关闭可以不执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'vm.swappiness = 0'</span> &gt;&gt; /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure></p><p>如果kube-proxy使用ipvs的话为了防止timeout需要设置下tcp参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; /etc/sysctl.d/k8s.conf</span><br><span class="line"><span class="comment"># https://github.com/moby/moby/issues/31208 </span></span><br><span class="line"><span class="comment"># ipvsadm -l --timout</span></span><br><span class="line"><span class="comment"># 修复ipvs模式下长连接timeout问题 小于900即可</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 600</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 30</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 10</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure></p><ul><li><p>优化设置 journal 日志相关，避免日志重复搜集，浪费系统资源。修改systemctl启动的最小文件打开数量。关闭ssh反向dns解析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面两句apt系列系统没有，执行不影响</span></span><br><span class="line">sed -ri <span class="string">'s/^\$ModLoad imjournal/#&amp;/'</span> /etc/rsyslog.conf</span><br><span class="line">sed -ri <span class="string">'s/^\$IMJournalStateFile/#&amp;/'</span> /etc/rsyslog.conf</span><br><span class="line"></span><br><span class="line">sed -ri <span class="string">'s/^#(DefaultLimitCORE)=/\1=100000/'</span> /etc/systemd/system.conf</span><br><span class="line">sed -ri <span class="string">'s/^#(DefaultLimitNOFILE)=/\1=100000/'</span> /etc/systemd/system.conf</span><br><span class="line"></span><br><span class="line">sed -ri <span class="string">'s/^#(UseDNS )yes/\1no/'</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></li><li><p>文件最大打开数，按照规范，在子配置文件写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat&gt;/etc/security/limits.d/kubernetes.conf&lt;&lt;EOF</span><br><span class="line">*       soft    nproc   131072</span><br><span class="line">*       hard    nproc   131072</span><br><span class="line">*       soft    nofile  131072</span><br><span class="line">*       hard    nofile  131072</span><br><span class="line">root    soft    nproc   131072</span><br><span class="line">root    hard    nproc   131072</span><br><span class="line">root    soft    nofile  131072</span><br><span class="line">root    hard    nofile  131072</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>集群的HA依赖于时间一致性，安装并配置chrony<br>yum:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y chrony</span><br></pre></td></tr></table></figure></p><p>apt:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y chrony</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">cat&gt;/etc/chrony.conf&lt;&lt;EOF</span><br><span class="line">server cn.pool.ntp.org iburst minpoll 4 maxpoll 10</span><br><span class="line">server s1b.time.edu.cn iburst minpoll 4 maxpoll 10</span><br><span class="line"># Ignor source level</span><br><span class="line">stratumweight 0</span><br><span class="line"></span><br><span class="line"># Record the rate at which the system clock gains/losses time.</span><br><span class="line">driftfile /var/lib/chrony/chrony.drift</span><br><span class="line"></span><br><span class="line"># This directive enables kernel synchronisation (every 11 minutes) of the</span><br><span class="line"># real-time clock. Note that it can’t be used along with the &apos;rtcfile&apos; directive.</span><br><span class="line">rtcsync</span><br><span class="line"></span><br><span class="line"># Allow the system clock to be stepped in the first three updates</span><br><span class="line"># if its offset is larger than 1 second.</span><br><span class="line">makestep 1.0 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Enable hardware timestamping on all interfaces that support it.</span><br><span class="line">#hwtimestamp *</span><br><span class="line"></span><br><span class="line"># Increase the minimum number of selectable sources required to adjust</span><br><span class="line"># the system clock.</span><br><span class="line">#minsources 2</span><br><span class="line"></span><br><span class="line">bindcmdaddress 127.0.0.1</span><br><span class="line"></span><br><span class="line">#bindcmdaddress ::1</span><br><span class="line"></span><br><span class="line"># Specify file containing keys for NTP authentication.</span><br><span class="line">keyfile /etc/chrony/chrony.keys</span><br><span class="line"></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"># adjust time big than 1 sec will log to file</span><br><span class="line">logchange 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl enable --now chronyd</span><br></pre></td></tr></table></figure></p><ul><li><p>修改hostname<br>kubelet和kube-proxy上报node信息默认是取hostname的，除非通过<code>--hostname-override</code>指定，这里自行设置hostname</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl <span class="built_in">set</span>-hostname xxx</span><br></pre></td></tr></table></figure></li><li><p>docker官方的内核检查脚本建议<code>(RHEL7/CentOS7: User namespaces disabled; add &#39;user_namespace.enable=1&#39; to boot command line)</code>，如果是yum系列的系统使用下面命令开启，apt类型的系统不需要<br>yum:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grubby --args=<span class="string">"user_namespace.enable=1"</span> --update-kernel=<span class="string">"<span class="variable">$(grubby --default-kernel)</span>"</span></span><br></pre></td></tr></table></figure></li></ul><p>重启系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ul><li>检查系统内核和模块是否适合运行 docker (仅适用于 linux 系统)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh &gt; check-config.sh</span><br><span class="line">bash ./check-config.sh</span><br></pre></td></tr></table></figure></li></ul><p>现在docker存储驱动都是使用的overlay2(不要使用devicemapper，这个坑非常多)，我们重点关注overlay2是否不是绿色</p><p>这里我们使用年份命名版本的docker-ce，假设我们要安装<code>v1.16.3</code>的k8s，我们去 <a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes</a> 里进对应版本的<code>CHANGELOG-1.16.md</code>里搜<code>The list of validated docker versions remain</code>查找支持的docker版本，docker版本不一定得在支持列表里，实际上19.03也能使用，这里我们使用docker官方的安装脚本安装docker(该脚本支持centos和ubuntu)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> VERSION=19.03</span><br><span class="line">curl -fsSL <span class="string">"https://get.docker.com/"</span> | bash -s -- --mirror Aliyun</span><br></pre></td></tr></table></figure></p><ul><li><code>所有机器</code>配置加速源并配置docker的启动参数使用systemd,使用systemd是官方的建议,详见 <a href="https://kubernetes.io/docs/setup/cri/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/cri/</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker/</span><br><span class="line">cat&gt;/etc/docker/daemon.json&lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">      <span class="string">"https://fz5yth0r.mirror.aliyuncs.com"</span>,</span><br><span class="line">      <span class="string">"http://hub-mirror.c.163.com/"</span>,</span><br><span class="line">      <span class="string">"https://docker.mirrors.ustc.edu.cn/"</span>,</span><br><span class="line">      <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span>,</span><br><span class="line">    <span class="string">"max-file"</span>: <span class="string">"3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>Live Restore Enabled</code>这个千万别开，某些极端情况下容器Dead状态之类的必须重启docker daemon才能解决，开了就只能重启机器解决了</p></blockquote><ul><li>设置docker开机启动，CentOS安装完成后docker需要手动设置docker命令补全：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release bash-completion</span><br></pre></td></tr></table></figure><p>apt系列操作为取消文件<code>/etc/bash.bashrc</code>内下面行的注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># enable bash completion in interactive shells</span><br><span class="line">#if ! shopt -oq posix; then</span><br><span class="line">#  if [ -f /usr/share/bash-completion/bash_completion ]; then</span><br><span class="line">#    . /usr/share/bash-completion/bash_completion</span><br><span class="line">#  elif [ -f /etc/bash_completion ]; then</span><br><span class="line">#    . /etc/bash_completion</span><br><span class="line">#  fi</span><br><span class="line">#fi</span><br></pre></td></tr></table></figure></p><p>复制补全脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/bash-completion/completions/docker /etc/bash_completion.d/</span><br></pre></td></tr></table></figure></p><ul><li>防止FORWARD的DROP策略影响转发,给docker daemon添加下列参数修正，当然暴力点也可以<code>iptables -P FORWARD ACCEPT</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/systemd/system/docker.service.d/</span><br><span class="line">cat&gt;/etc/systemd/system/docker.service.d/10-docker.conf&lt;&lt;EOF</span><br><span class="line">[Service]</span><br><span class="line">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br><span class="line">ExecStopPost=/bin/bash -c <span class="string">'/sbin/iptables -D FORWARD -s 0.0.0.0/0 -j ACCEPT &amp;&gt; /dev/null || :'</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li></ul><p>启动docker并看下信息是否正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable --now docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure></p><p>如果enable docker的时候报错开启debug，如何开见 <a href="https://github.com/zhangguanzhang/Kubernetes-ansible/wiki/systemctl-running-debug" target="_blank" rel="noopener">https://github.com/zhangguanzhang/Kubernetes-ansible/wiki/systemctl-running-debug</a></p><h2 id="kubeadm部署"><a href="#kubeadm部署" class="headerlink" title="kubeadm部署"></a>kubeadm部署</h2><h3 id="安装kubeadm相关"><a href="#安装kubeadm相关" class="headerlink" title="安装kubeadm相关"></a>安装kubeadm相关</h3><p>默认源在国外会无法安装，我们使用国内的镜像源，所有机器都要操作<br>yum:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;/etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>apt:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat&gt;/etc/apt/sources.list.d/kubernetes.list&lt;&lt;EOF</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main&quot;</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br></pre></td></tr></table></figure></p><h4 id="master部分"><a href="#master部分" class="headerlink" title="master部分"></a>master部分</h4><p>k8s的node就是kubelet+cri(一般是docker)，kubectl是一个agent读取kubeconfig去访问kube-apiserver来操作集群，kubeadm是部署，所以master节点需要安装三个，node一般不需要kubectl<br>安装相关软件<br>yum:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y \</span><br><span class="line">    kubeadm-1.16.3 \</span><br><span class="line">    kubectl-1.16.3 \</span><br><span class="line">    kubelet-1.16.3 \</span><br><span class="line">    --disableexcludes=kubernetes &amp;&amp; \</span><br><span class="line">    systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure></p><p>apt:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y \</span><br><span class="line">  kubeadm=1.16.3-00 \</span><br><span class="line">  kubectl-1.16.3-00 \</span><br><span class="line">  kubelet-1.16.3-00</span><br></pre></td></tr></table></figure></p><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y \</span><br><span class="line">    kubeadm-1.16.3 \</span><br><span class="line">    kubelet-1.16.3 \</span><br><span class="line">    --disableexcludes=kubernetes &amp;&amp; \</span><br><span class="line">    systemctl enable kubelet</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y \</span><br><span class="line">  kubeadm=1.16.3-00 \</span><br><span class="line">  kubelet-1.16.3-00</span><br></pre></td></tr></table></figure><h3 id="配置kubelet的参数方法-有需要的话"><a href="#配置kubelet的参数方法-有需要的话" class="headerlink" title="配置kubelet的参数方法(有需要的话)"></a>配置kubelet的参数方法(有需要的话)</h3><p>查看kubelet的systemd文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl cat kubelet</span><br></pre></td></tr></table></figure></p><p>我们可以看到<code>/etc/sysconfig/kubelet</code>是<code>EnvironmentFile</code>，里面注释也写明了我们应该在该文件里写<code>KUBELET_EXTRA_ARGS</code>来给kubelet配置运行参数,下面是个例子，具体参数啥的可以<code>kubelet --help</code>看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/sysconfig/kubelet&lt;&lt;EOF</span><br><span class="line">KUBELET_EXTRA_ARGS=&quot;--xxx=yyy --aaa=bbb&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>文件<code>/var/lib/kubelet/kubeadm-flags.env</code>也一样</p><h3 id="配置HA-所有机器-单个master跳过此步"><a href="#配置HA-所有机器-单个master跳过此步" class="headerlink" title="配置HA,所有机器(单个master跳过此步)"></a>配置HA,所有机器(单个master跳过此步)</h3><p>关于HA我博客 <a href="https://zhangguanzhang.github.io/2019/03/11/k8s-ha/">https://zhangguanzhang.github.io/2019/03/11/k8s-ha/</a> 说得很清楚，这里我用nginx实现local proxy来玩，因为localproxy是每台机器上的，可以不用SLB和vpc无法使用vip的限制，需要每个机器上运行nginx实现<br>每台机器配置hosts<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt;/etc/hosts &lt;&lt; EOF</span><br><span class="line">127.0.0.1 apiserver.k8s.local</span><br><span class="line">172.19.0.2 apiserver01.k8s.local</span><br><span class="line">172.19.0.3 apiserver02.k8s.local</span><br><span class="line">172.19.0.4 apiserver03.k8s.local</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>每台机器生成配置文件，上面的三个hosts可以不写，写下面配置文件里域名写ip即可，但是这样更改ip需要重新加载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/kubernetes</span><br><span class="line">cat &gt; /etc/kubernetes/nginx.conf &lt;&lt; EOF</span><br><span class="line">user nginx nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  20240;</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br><span class="line">error_log /var/<span class="built_in">log</span>/nginx_error.log info;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    upstream kube-servers &#123;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">        server apiserver01.k8s.local:6443 weight=5 max_fails=1 fail_timeout=3s;</span><br><span class="line">        server apiserver02.k8s.local:6443 weight=5 max_fails=1 fail_timeout=3s;</span><br><span class="line">        server apiserver03.k8s.local:6443 weight=5 max_fails=1 fail_timeout=3s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8443 reuseport;</span><br><span class="line">        proxy_connect_timeout 3s;</span><br><span class="line">        <span class="comment"># 加大timeout</span></span><br><span class="line">        proxy_timeout 3000s;</span><br><span class="line">        proxy_pass kube-servers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>因为localproxy是每台机器上的，可以不用SLB和vpc无法使用vip的限制，这里我使用容器运行nginx，当然自己也可以写成staticPod的yaml在init的阶段放入目录里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always \</span><br><span class="line">    -v /etc/kubernetes/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">    -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">    --name k8s \</span><br><span class="line">    --net host \</span><br><span class="line">    -d \</span><br><span class="line">    nginx:alpine</span><br></pre></td></tr></table></figure><h3 id="配置集群信息-第一个master上配置"><a href="#配置集群信息-第一个master上配置" class="headerlink" title="配置集群信息(第一个master上配置)"></a>配置集群信息(第一个master上配置)</h3><ul><li>打印默认init的配置信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; initconfig.yaml</span><br></pre></td></tr></table></figure></li></ul><p>我们看下默认init的集群参数<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="attr">- groups:</span></span><br><span class="line"><span class="attr">  - system:</span><span class="attr">bootstrappers:kubeadm:default-node-token</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">abcdef.0123456789abcdef</span></span><br><span class="line"><span class="attr">  ttl:</span> <span class="number">24</span><span class="string">h0m0s</span></span><br><span class="line"><span class="attr">  usages:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">signing</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line"><span class="attr">  advertiseAddress:</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line"><span class="attr">  bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line"><span class="attr">  criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">k8s-m1</span></span><br><span class="line"><span class="attr">  taints:</span></span><br><span class="line"><span class="attr">  - effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">    key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line"><span class="attr">  timeoutForControlPlane:</span> <span class="number">4</span><span class="string">m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line"><span class="attr">  local:</span></span><br><span class="line"><span class="attr">    dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">k8s.gcr.io</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.16.0</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line"><span class="attr">  dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">  serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></p><p>我们主要关注和只保留<code>ClusterConfiguration</code>的段，然后修改下，可以参考下列的<code>v1beta2</code>文档,如果是低版本可能是v1beta1，某些字段和新的是不一样的，自行查找godoc看<br> <a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#hdr-Basics" target="_blank" rel="noopener">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#hdr-Basics</a><br> <a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2" target="_blank" rel="noopener">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2</a><br> <a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#pkg-constants" target="_blank" rel="noopener">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#pkg-constants</a><br> <a href="https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#ClusterConfiguration" target="_blank" rel="noopener">https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#ClusterConfiguration</a><br>ip啥的自行更改成和自己的一致，cidr不懂咋计算就别乱改。controlPlaneEndpoint写域名(内网没dns所有机器写hosts也行)或者SLB，VIP，原因和注意事项见 <a href="https://zhangguanzhang.github.io/2019/03/11/k8s-ha/">https://zhangguanzhang.github.io/2019/03/11/k8s-ha/</a> 这个文章我把HA解释得很清楚了，不要再问我了，下面是最终的yaml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">gcr.azk8s.cn/google_containers</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.16.3</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">networking:</span> <span class="comment">#https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#Networking</span></span><br><span class="line"><span class="attr">  dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">  serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">  podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">controlPlaneEndpoint:</span> <span class="string">apiserver.k8s.local:8443</span> <span class="comment"># 单个master的话写master的ip或者不写</span></span><br><span class="line"><span class="attr">apiServer:</span> <span class="comment"># https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#APIServer</span></span><br><span class="line"><span class="attr">  timeoutForControlPlane:</span> <span class="number">4</span><span class="string">m0s</span></span><br><span class="line"><span class="attr">  extraArgs:</span></span><br><span class="line"><span class="attr">    authorization-mode:</span> <span class="string">"Node,RBAC"</span></span><br><span class="line"><span class="attr">    enable-admission-plugins:</span> <span class="string">"NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeClaimResize,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,Priority,PodPreset"</span></span><br><span class="line"><span class="attr">    runtime-config:</span> <span class="string">api/all,settings.k8s.io/v1alpha1=true</span></span><br><span class="line"><span class="attr">    storage-backend:</span> <span class="string">etcd3</span></span><br><span class="line"><span class="attr">    etcd-servers:</span> <span class="attr">https://172.19.0.2:2379,https://172.19.0.3:2379,https://172.19.0.4:2379</span></span><br><span class="line"><span class="attr">  certSANs:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># service cidr的第一个ip</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 多个master的时候负载均衡出问题了能够快速使用localhost调试</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">localhost</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">apiserver.k8s.local</span> <span class="comment"># 负载均衡的域名或者vip</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">apiserver01.k8s.local</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">apiserver02.k8s.local</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">apiserver03.k8s.local</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">kubernetes.default</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">kubernetes.default.svc</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">kubernetes.default.svc.cluster.local</span></span><br><span class="line"><span class="attr">  extraVolumes:</span></span><br><span class="line"><span class="attr">  - hostPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="attr">    mountPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">localtime</span></span><br><span class="line"><span class="attr">    readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">controllerManager:</span> <span class="comment"># https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#ControlPlaneComponent</span></span><br><span class="line"><span class="attr">  extraArgs:</span></span><br><span class="line"><span class="attr">    bind-address:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="attr">  extraVolumes:</span></span><br><span class="line"><span class="attr">  - hostPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="attr">    mountPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">localtime</span></span><br><span class="line"><span class="attr">    readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">scheduler:</span> </span><br><span class="line"><span class="attr">  extraArgs:</span></span><br><span class="line"><span class="attr">    bind-address:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="attr">  extraVolumes:</span></span><br><span class="line"><span class="attr">  - hostPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="attr">    mountPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">localtime</span></span><br><span class="line"><span class="attr">    readOnly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">dns:</span> <span class="comment"># https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#DNS</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">CoreDNS</span> <span class="comment"># or kube-dns</span></span><br><span class="line"><span class="comment">#   imageRepository: coredns/coredns</span></span><br><span class="line"><span class="attr">  imageTag:</span> <span class="number">1.6</span><span class="number">.3</span></span><br><span class="line"><span class="attr">etcd:</span> <span class="comment"># https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#Etcd</span></span><br><span class="line"><span class="attr">  local:</span></span><br><span class="line"><span class="attr">    imageRepository:</span> <span class="string">quay.azk8s.cn/coreos</span></span><br><span class="line"><span class="attr">    imageTag:</span> <span class="string">v3.3.17</span></span><br><span class="line"><span class="attr">    dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">    serverCertSANs:</span> <span class="comment"># server和peer的localhost,127,::1都默认自带的不需要写</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">etcd01.k8s.local</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">etcd02.k8s.local</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">etcd03.k8s.local</span></span><br><span class="line"><span class="attr">    peerCertSANs:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.3</span></span><br><span class="line"><span class="bullet">    -</span> <span class="number">172.19</span><span class="number">.0</span><span class="number">.4</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">etcd01.k8s.local</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">etcd02.k8s.local</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">etcd03.k8s.local</span></span><br><span class="line"><span class="attr">    extraArgs:</span> <span class="comment"># 暂时没有extraVolumes</span></span><br><span class="line"><span class="attr">      auto-compaction-retention:</span> <span class="string">"1h"</span></span><br><span class="line"><span class="attr">      max-request-bytes:</span> <span class="string">"33554432"</span></span><br><span class="line"><span class="attr">      quota-backend-bytes:</span> <span class="string">"8589934592"</span></span><br><span class="line"><span class="attr">      enable-v2:</span> <span class="string">"false"</span> <span class="comment"># disable etcd v2 api</span></span><br><span class="line">  <span class="comment"># external: //外部etcd的时候这样配置 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2#Etcd</span></span><br><span class="line">    <span class="comment"># endpoints:</span></span><br><span class="line">    <span class="comment"># - "https://172.19.0.2:2379"</span></span><br><span class="line">    <span class="comment"># - "https://172.19.0.3:2379"</span></span><br><span class="line">    <span class="comment"># - "https://172.19.0.4:2379"</span></span><br><span class="line">    <span class="comment"># caFile: "/etc/kubernetes/pki/etcd/ca.crt"</span></span><br><span class="line">    <span class="comment"># certFile: "/etc/kubernetes/pki/etcd/etcd.crt"</span></span><br><span class="line">    <span class="comment"># keyFile: "/etc/kubernetes/pki/etcd/etcd.key"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span> <span class="comment"># https://godoc.org/k8s.io/kube-proxy/config/v1alpha1#KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span> <span class="comment"># or iptables</span></span><br><span class="line"><span class="attr">ipvs:</span></span><br><span class="line"><span class="attr">  excludeCIDRs:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">  minSyncPeriod:</span> <span class="number">0</span><span class="string">s</span></span><br><span class="line"><span class="attr">  scheduler:</span> <span class="string">"rr"</span> <span class="comment"># 调度算法</span></span><br><span class="line"><span class="attr">  strictARP:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  syncPeriod:</span> <span class="number">15</span><span class="string">s</span></span><br><span class="line"><span class="attr">iptables:</span></span><br><span class="line"><span class="attr">  masqueradeAll:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  masqueradeBit:</span> <span class="number">14</span></span><br><span class="line"><span class="attr">  minSyncPeriod:</span> <span class="number">0</span><span class="string">s</span></span><br><span class="line"><span class="attr">  syncPeriod:</span> <span class="number">30</span><span class="string">s</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span> <span class="comment"># https://godoc.org/k8s.io/kubelet/config/v1beta1#KubeletConfiguration</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span></span><br><span class="line"><span class="attr">failSwapOn:</span> <span class="literal">true</span> <span class="comment"># 如果开启swap则设置为false</span></span><br></pre></td></tr></table></figure></p><p>swap的话看最后一行，apiserver的exterArgs是为了开启<code>podPreset</code>，单台master的话把<code>controlPlaneEndpoint</code>的值改为第一个master的ip<br>etcd的支持版本可以代码里查看 <a href="https://github.com/kubernetes/kubernetes/blob/master/cmd/kubeadm/app/constants/constants.go#L421-L427" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/master/cmd/kubeadm/app/constants/constants.go#L421-L427</a></p><ul><li><p>检查文件是否错误，忽略<code>warning</code>，错误的话会抛出error，没错则会输出到包含字符串<code>kubeadm join xxx</code>啥的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config initconfig.yaml --dry-run</span><br></pre></td></tr></table></figure></li><li><p>检查镜像是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config images list --config initconfig.yaml</span><br></pre></td></tr></table></figure></li><li><p>预先拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config images pull --config initconfig.yaml <span class="comment"># 下面是输出</span></span><br><span class="line">[config/images] Pulled gcr.azk8s.cn/google_containers/kube-apiserver:v1.16.3</span><br><span class="line">[config/images] Pulled gcr.azk8s.cn/google_containers/kube-controller-manager:v1.16.3</span><br><span class="line">[config/images] Pulled gcr.azk8s.cn/google_containers/kube-scheduler:v1.16.3</span><br><span class="line">[config/images] Pulled gcr.azk8s.cn/google_containers/kube-proxy:v1.16.3</span><br><span class="line">[config/images] Pulled gcr.azk8s.cn/google_containers/pause:3.1</span><br><span class="line">[config/images] Pulled quay.azk8s.cn/coreos/etcd:v3.3.17</span><br><span class="line">[config/images] Pulled coredns/coredns:1.6.3</span><br></pre></td></tr></table></figure></li></ul><h3 id="kubeadm-init"><a href="#kubeadm-init" class="headerlink" title="kubeadm init"></a>kubeadm init</h3><p>下面init只在第一个master上面操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config initconfig.yaml</span><br></pre></td></tr></table></figure></p><p>如果超时了看看是不是kubelet没起来，调试见 <a href="https://github.com/zhangguanzhang/Kubernetes-ansible/wiki/systemctl-running-debug" target="_blank" rel="noopener">https://github.com/zhangguanzhang/Kubernetes-ansible/wiki/systemctl-running-debug</a></p><p>记住init后打印的token，复制kubectl的kubeconfig，kubectl的kubeconfig路径默认是<code>~/.kube/config</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo \cp /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure></p><p>init的yaml信息实际上会存在集群的configmap里，我们可以随时查看，该yaml在其他node和master join的时候会使用到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get cm kubeadm-config -o yaml</span><br></pre></td></tr></table></figure></p><p>如果单个master，也不想整其他的node，需要去掉master节点上的污点,下一步的多master操作不需要整<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure></p><h4 id="配置其他master的k8s管理组件"><a href="#配置其他master的k8s管理组件" class="headerlink" title="配置其他master的k8s管理组件"></a>配置其他master的k8s管理组件</h4><p>第一个master上拷贝ca证书到其他master节点上，因为交互输入密码，我们安装sshpass，zhangguanzhang是root密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install sshpass -y</span><br><span class="line"><span class="built_in">alias</span> ssh=<span class="string">'sshpass -p zhangguanzhang ssh -o StrictHostKeyChecking=no'</span></span><br><span class="line"><span class="built_in">alias</span> scp=<span class="string">'sshpass -p zhangguanzhang scp -o StrictHostKeyChecking=no'</span></span><br></pre></td></tr></table></figure></p><p>复制ca证书到其他master节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for node in 172.19.0.3 172.19.0.4;do</span><br><span class="line">    ssh $node &apos;mkdir -p /etc/kubernetes/pki/etcd&apos;</span><br><span class="line">    scp -r /etc/kubernetes/pki/ca.* $node:/etc/kubernetes/pki/</span><br><span class="line">    scp -r /etc/kubernetes/pki/sa.* $node:/etc/kubernetes/pki/</span><br><span class="line">    scp -r /etc/kubernetes/pki/front-proxy-ca.* $node:/etc/kubernetes/pki/</span><br><span class="line">    scp -r /etc/kubernetes/pki/etcd/ca.* $node:/etc/kubernetes/pki/etcd/</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>其他master join进来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join apiserver.k8s.local:8443 \</span><br><span class="line">    --token xxx.zzzzzzzzz     \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:xxxxxxxxxxx --control-plane</span><br></pre></td></tr></table></figure></p><p>token忘记的话可以<code>kubeadm token list</code>查看，可以通过<code>kubeadm token create</code>创建<br>sha256的值可以通过下列命令获取<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> \</span><br><span class="line">    /etc/kubernetes/pki/ca.crt | \</span><br><span class="line">    openssl rsa -pubin -outform der 2&gt;/dev/null | \</span><br><span class="line">    openssl dgst -sha256 -hex | sed <span class="string">'s/^.* //'</span></span><br></pre></td></tr></table></figure></p><h4 id="所有master配置kubectl"><a href="#所有master配置kubectl" class="headerlink" title="所有master配置kubectl"></a>所有master配置kubectl</h4><p>准备kubectl的kubeconfig<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo \cp /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure></p><p>设置kubectl的补全脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl completion bash &gt; /etc/bash_completion.d/kubectl</span><br></pre></td></tr></table></figure></p><h4 id="所有master配置etcdctl"><a href="#所有master配置etcdctl" class="headerlink" title="所有master配置etcdctl"></a>所有master配置etcdctl</h4><p>复制出容器里的etcdctl<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp `docker ps -a | awk <span class="string">'/k8s_etcd/&#123;print $1&#125;'</span>`:/usr/<span class="built_in">local</span>/bin/etcdctl /usr/<span class="built_in">local</span>/bin/etcdctl</span><br></pre></td></tr></table></figure></p><p>1.13还是具体哪个版本后k8s默认使用v3 api的etcd，这里我们配置下etcdctl的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;/etc/profile.d/etcd.sh&lt;&lt;&apos;EOF&apos;</span><br><span class="line">ETCD_CERET_DIR=/etc/kubernetes/pki/etcd/</span><br><span class="line">ETCD_CA_FILE=ca.crt</span><br><span class="line">ETCD_KEY_FILE=healthcheck-client.key</span><br><span class="line">ETCD_CERT_FILE=healthcheck-client.crt</span><br><span class="line">ETCD_EP=https://172.19.0.2:2379,https://172.19.0.3:2379,https://172.19.0.4:2379</span><br><span class="line"></span><br><span class="line">alias etcd_v2=&quot;etcdctl --cert-file $&#123;ETCD_CERET_DIR&#125;/$&#123;ETCD_CERT_FILE&#125; \</span><br><span class="line">              --key-file $&#123;ETCD_CERET_DIR&#125;/$&#123;ETCD_KEY_FILE&#125;  \</span><br><span class="line">              --ca-file $&#123;ETCD_CERET_DIR&#125;/$&#123;ETCD_CA_FILE&#125;  \</span><br><span class="line">              --endpoints $ETCD_EP&quot;</span><br><span class="line"></span><br><span class="line">alias etcd_v3=&quot;ETCDCTL_API=3 \</span><br><span class="line">    etcdctl   \</span><br><span class="line">   --cert $&#123;ETCD_CERET_DIR&#125;/$&#123;ETCD_CERT_FILE&#125; \</span><br><span class="line">   --key $&#123;ETCD_CERET_DIR&#125;/$&#123;ETCD_KEY_FILE&#125; \</span><br><span class="line">   --cacert $&#123;ETCD_CERET_DIR&#125;/$&#123;ETCD_CA_FILE&#125; \</span><br><span class="line">    --endpoints $ETCD_EP&quot;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>重新ssh下或者手动加载下环境变量<code>. /etc/profile.d/etcd.sh</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">etcd_v3 endpoint status --write-out=table <span class="comment"># 下面是输出</span></span><br><span class="line">+-------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">|        ENDPOINT         |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |</span><br><span class="line">+-------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br><span class="line">| https://172.19.0.2:2379 | d7380397c3ec4b90 |  3.3.17 |  2.1 MB |      <span class="literal">true</span> |         9 |      85397 |</span><br><span class="line">| https://172.19.0.3:2379 | f776f8545c82d916 |  3.3.17 |  2.1 MB |     <span class="literal">false</span> |         9 |      85405 |</span><br><span class="line">| https://172.19.0.4:2379 | ead42f3e6c9bb295 |  3.3.17 |  2.1 MB |     <span class="literal">false</span> |         9 |      85406 |</span><br><span class="line">+-------------------------+------------------+---------+---------+-----------+-----------+------------+</span><br></pre></td></tr></table></figure></p><p>配置etcd备份脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/etcd</span><br><span class="line">cat&gt;/opt/etcd/etcd_cron.sh&lt;&lt;<span class="string">'EOF'</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"></span><br><span class="line">:  <span class="variable">$&#123;bak_dir:=/root/&#125;</span> <span class="comment">#缺省备份目录,可以修改成存在的目录</span></span><br><span class="line">:  <span class="variable">$&#123;cert_dir:=/etc/kubernetes/pki/etcd/&#125;</span></span><br><span class="line">:  $&#123;endpoints:=https://172.19.0.2:2379,https://172.19.0.3:2379,https://172.19.0.4:2379</span><br><span class="line"></span><br><span class="line">bak_prefix=<span class="string">'etcd-'</span></span><br><span class="line">cmd_suffix=<span class="string">'date +%Y-%m-%d-%H:%M'</span></span><br><span class="line">bak_suffix=<span class="string">'.db'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将规范化后的命令行参数分配至位置参数（$1,$2,...)</span></span><br><span class="line">temp=`getopt -n <span class="variable">$0</span> -o c:d: -u -- <span class="string">"<span class="variable">$@</span>"</span>`</span><br><span class="line"></span><br><span class="line">[ $? != 0 ] &amp;&amp; &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'</span></span><br><span class="line"><span class="string">Examples:</span></span><br><span class="line"><span class="string">  # just save once</span></span><br><span class="line"><span class="string">  bash $0 /tmp/etcd.db</span></span><br><span class="line"><span class="string">  # save in contab and  keep 5</span></span><br><span class="line"><span class="string">  bash $0 -c 5</span></span><br><span class="line"><span class="string">    '</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">set</span> -- <span class="variable">$temp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -c 备份保留副本数量</span></span><br><span class="line"><span class="comment"># -d 指定备份存放目录</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">        -c)</span><br><span class="line">            [ -z <span class="string">"<span class="variable">$bak_count</span>"</span> ] &amp;&amp; bak_count=<span class="variable">$2</span></span><br><span class="line">            <span class="built_in">printf</span> -v null %d <span class="string">"<span class="variable">$bak_count</span>"</span> &amp;&gt;/dev/null || \</span><br><span class="line">                &#123; <span class="built_in">echo</span> <span class="string">'the value of the -c must be number'</span>;<span class="built_in">exit</span> 1; &#125;</span><br><span class="line">            <span class="built_in">shift</span> 2</span><br><span class="line">            ;;</span><br><span class="line">        -d)</span><br><span class="line">            [ ! -d <span class="string">"<span class="variable">$2</span>"</span> ] &amp;&amp; mkdir -p <span class="variable">$2</span></span><br><span class="line">            bak_dir=<span class="variable">$2</span></span><br><span class="line">            <span class="built_in">shift</span> 2</span><br><span class="line">            ;;</span><br><span class="line">         *)</span><br><span class="line">            [[ -z <span class="string">"<span class="variable">$1</span>"</span> || <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">'--'</span> ]] &amp;&amp; &#123; <span class="built_in">shift</span>;<span class="built_in">break</span>; &#125;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Internal error!"</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">etcd_v2</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    etcdctl --cert-file <span class="variable">$cert_dir</span>/healthcheck-client.crt \</span><br><span class="line">            --key-file  <span class="variable">$cert_dir</span>/healthcheck-client.key \</span><br><span class="line">            --ca-file   <span class="variable">$cert_dir</span>/ca.crt \</span><br><span class="line">        --endpoints <span class="variable">$endpoints</span> <span class="variable">$@</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">etcd_v3</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">    ETCDCTL_API=3 etcdctl   \</span><br><span class="line">       --cert <span class="variable">$cert_dir</span>/healthcheck-client.crt \</span><br><span class="line">       --key  <span class="variable">$cert_dir</span>/healthcheck-client.key \</span><br><span class="line">       --cacert <span class="variable">$cert_dir</span>/ca.crt \</span><br><span class="line">       --endpoints <span class="variable">$endpoints</span> <span class="variable">$@</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">etcd::cron::<span class="function"><span class="title">save</span></span>()&#123;</span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$bak_dir</span>/</span><br><span class="line">    etcd_v3 snapshot save  <span class="variable">$bak_prefix</span>$(<span class="variable">$cmd_suffix</span>)<span class="variable">$bak_suffix</span></span><br><span class="line">    rm_files=`ls -t <span class="variable">$bak_prefix</span>*<span class="variable">$bak_suffix</span> | tail -n +$[bak_count+1]`</span><br><span class="line">    <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$rm_files</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">        rm -f <span class="variable">$rm_files</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    [ -n <span class="string">"<span class="variable">$bak_count</span>"</span> ] &amp;&amp; etcd::cron::save || etcd_v3 snapshot save <span class="variable">$@</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main <span class="variable">$@</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>crontab -e添加下面内容自动保留四个备份副本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash /opt/etcd/etcd_cron.sh  -c 4 -d /opt/etcd/ &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure></p><h3 id="node-1"><a href="#node-1" class="headerlink" title="node"></a>node</h3><p>按照前面的做:</p><ul><li>配置系统设置</li><li>设置hostname</li><li>安装docker-ce</li><li>设置hosts和nginx</li><li>配置软件源，安装kubeadm kubelet</li></ul><p>和master的join一样，提前准备好环境和docker，然后join的时候不需要带<code>--control-plane</code>，只有一个master的话join的那个ip写<code>controlPlaneEndpoint</code>的值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get node -o wide</span><br><span class="line">NAME     STATUS     ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION          CONTAINER-RUNTIME</span><br><span class="line">k8s-m1   NotReady   master   24m   v1.16.3   172.19.0.2    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.el7.x86_64   docker://19.3.5</span><br><span class="line">k8s-m2   NotReady   master   19m   v1.16.3   172.19.0.3    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.el7.x86_64   docker://19.3.5</span><br><span class="line">k8s-m3   NotReady   master   22m   v1.16.3   172.19.0.4    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.el7.x86_64   docker://19.3.5</span><br><span class="line">k8s-n1   NotReady   &lt;none&gt;   12s   v1.16.3   172.19.0.5    &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.el7.x86_64   docker://19.3.5</span><br></pre></td></tr></table></figure></p><p>role只是一个label，可以打label，想显示啥就<code>node-role.kubernetes.io/xxxx</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label node k8s-n1 node-role.kubernetes.io/node=&quot;&quot;</span><br></pre></td></tr></table></figure></p><h3 id="addon-此章开始到结尾选取任意一个master上执行"><a href="#addon-此章开始到结尾选取任意一个master上执行" class="headerlink" title="addon(此章开始到结尾选取任意一个master上执行)"></a>addon(此章开始到结尾选取任意一个master上执行)</h3><p>容器的网络还没处理好，coredns无法分配到ip会处于<code>pending</code>状态，这里我用flannel部署，如果你了解bgp可以使用calico<br>yaml文件来源与flannel官方github <a href="https://github.com/coreos/flannel/tree/master/Documentation" target="_blank" rel="noopener">https://github.com/coreos/flannel/tree/master/Documentation</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul><li><p>如果是在1.16之前使用psp，<code>policy/v1beta1</code>得修改成<code>extensions/v1beta1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: policy/v1beta1</span><br><span class="line">kind: PodSecurityPolicy</span><br></pre></td></tr></table></figure></li><li><p>rbac的version改为下面，不要使用<code>v1beta1</code>了，使用下面命令修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &apos;/apiVersion: rbac/s#v1.+#v1#&apos; kube-flannel.yml</span><br></pre></td></tr></table></figure></li><li><p>官方yaml自带了四种架构的daemonset，我们删掉除了amd64以外的，大概是227行到结尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri <span class="string">'227,$d'</span> kube-flannel.yml</span><br></pre></td></tr></table></figure></li><li><p>pod的cidr修改了的话这里也要修改，如果是在同一个二层，可以使用把<code>vxlan</code>改为<code>host-gw</code>模式,vxlan的话需要安全组放开8472端口的udp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net-conf.json: |</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;Network&quot;: &quot;10.244.0.0/16&quot;,</span><br><span class="line">    &quot;Backend&quot;: &#123;</span><br><span class="line">      &quot;Type&quot;: &quot;vxlan&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用下面命令修改镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &apos;/image/s#quay.io#quay.azk8s.cn#&apos; kube-flannel.yml</span><br></pre></td></tr></table></figure></li><li><p>修改limits，需要大于request</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">limits:</span><br><span class="line">  cpu: &quot;200m&quot;</span><br><span class="line">  memory: &quot;100Mi&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="部署flannel"><a href="#部署flannel" class="headerlink" title="部署flannel"></a>部署flannel</h4><p>1.15后node的cidr是数组，而不是单个了，flannel目前0.11和之前版本部署的话会有下列错误，见文档<br><a href="https://github.com/kubernetes/kubernetes/blob/v1.15.0/staging/src/k8s.io/api/core/v1/types.go#L3890-L3893" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/v1.15.0/staging/src/k8s.io/api/core/v1/types.go#L3890-L3893</a><br><a href="https://github.com/kubernetes/kubernetes/blob/v1.16.3/staging/src/k8s.io/api/core/v1/types.go#L4206-L4216" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/blob/v1.16.3/staging/src/k8s.io/api/core/v1/types.go#L4206-L4216</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error registering network: failed to acquire lease: node &quot;xxx&quot; pod cidr not assigned</span><br></pre></td></tr></table></figure></p><p>手动打patch，后续扩的node也记得打下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nodes=`kubectl get node --no-headers | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> <span class="variable">$nodes</span>;<span class="keyword">do</span></span><br><span class="line">    cidr=`kubectl get node <span class="string">"<span class="variable">$node</span>"</span> -o jsonpath=<span class="string">'&#123;.spec.podCIDRs[0]&#125;'</span>`</span><br><span class="line">    [ -z <span class="string">"<span class="variable">$(kubectl get node $node -o jsonpath='&#123;.spec.podCIDR&#125;')</span>"</span> ] &amp;&amp; &#123;</span><br><span class="line">        kubectl patch node <span class="string">"<span class="variable">$node</span>"</span> -p <span class="string">'&#123;"spec":&#123;"podCIDR":"'</span><span class="string">"<span class="variable">$cidr</span>"</span><span class="string">'"&#125;&#125;'</span> </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="验证集群可用性"><a href="#验证集群可用性" class="headerlink" title="验证集群可用性"></a>验证集群可用性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system get pod -o wide</span><br></pre></td></tr></table></figure><p>等待kube-system空间下的pod都是running后我们来测试下集群可用性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: nginx:alpine</span><br><span class="line">        name: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: zhangguanzhang/centos</span><br><span class="line">    <span class="built_in">command</span>:</span><br><span class="line">      - sleep</span><br><span class="line">      - <span class="string">"3600"</span></span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>等待pod running<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po,svc -o wide</span><br><span class="line">NAME                         READY   STATUS    RESTARTS   AGE    IP            NODE     NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/busybox                  1/1     Running   0          4m4s   10.244.2.18   k8s-n1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx-5c559d5697-2ctxh   1/1     Running   0          4m4s   10.244.2.16   k8s-n1   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE    SELECTOR</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP   12m    &lt;none&gt;</span><br><span class="line">service/nginx        ClusterIP   10.100.39.101   &lt;none&gt;        80/TCP    4m4s   app=nginx</span><br></pre></td></tr></table></figure></p><p>验证集群dns<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -ti busybox -- nslookup kubernetes</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes</span><br><span class="line">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</span><br></pre></td></tr></table></figure></p><p>在master上curl nginx的svc的ip出现nginx的index内容即集群正常，例如我的nginx svc ip是<code>10.100.39.101</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s 10.100.39.101</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>pod里验证集群域名到pod是否正常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -ti busybox -- curl nginx</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="关于使用kubeadm的注意事项和个人建议"><a href="#关于使用kubeadm的注意事项和个人建议" class="headerlink" title="关于使用kubeadm的注意事项和个人建议"></a>关于使用kubeadm的注意事项和个人建议</h3><ul><li>小白不要着急啥都往上部署，例如dashboard和什么helm，没这个必要，先把命令行的kubectl和一些基础学会了</li><li>默认证书是只有一年的，可以自己去修改源码更改</li><li>先去把官方文档的concept和tasks板块看完，市面上的书籍和教程实际上都是讲的这俩板块儿</li><li>不懂网络的话去找点CCIE的教程看下</li><li>systemd和docker以及Linux基础都是挺重要的，–help找选项很多人居然都不会</li><li>yaml，yaml的结构就是无非那些字符，数字，object，数组的混合，可以尝试大脑中把一段yaml转换成json，不然看不懂yaml的结构学不会k8s。很多层级实际上是遵循着逻辑的，例如一个pod有多个容器，所以pod.spec.containers就是一个obkect的数组，又因为pod共享network namepsace，所以<code>hostNetwork</code>这个属性肯定是containers同个级别的</li><li>kubeconfig实际上就是存了三个信息，一个是host(集群)，用户认证信息，这俩都是可以写多个的，所以都是yaml的数组-开头，以及当前的context是哪个host搭配哪个认证信息。和web的jwt思想一样</li><li>互斥和污点都是基础知识，也在concept和tasks板块里，上生产的话多份pod肯定要互斥自己分散开来，就像没有容器技术的时代是每个节点跑一份服务，这样down了一个node业务不会挂</li><li>获取和操作集群资源对象不单单是kubectl，你用curl带上证书啥的也能操作集群。</li><li>kubectl的子命令带上-v=数字能够调试，很多时候是排查的一个手段</li><li>如果不想打开网页，想查看<code>pod.spec.hostNetwork</code>字段的意思，<code>kubectl explain pod.spec.hostNetwork</code> </li></ul><p>kubeadm的master是利用staticPod，kubelet创建staticPod不需要连接kube-apiserver即可创建，虽然kubelet的log会一直刷连不上kube-apiserver，但是kubelet另一边也会创建管理组件和etcd的staticPod，最终kube-apiserver起来后我们就能操作集群里。staticPod也是基础知识，看到过很多人感觉从没看过官方文档，居然还问staticPod是啥</p><h3 id="关于kubeadm过程和更多详细参数选项见下面文章"><a href="#关于kubeadm过程和更多详细参数选项见下面文章" class="headerlink" title="关于kubeadm过程和更多详细参数选项见下面文章"></a>关于kubeadm过程和更多详细参数选项见下面文章</h3><ul><li><a href="https://www.jianshu.com/p/1e65610dd223" target="_blank" rel="noopener">https://www.jianshu.com/p/1e65610dd223</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;市面上很多kubeadm的文章都是错误示范或者不够详细，大多数都没写系统设置之类的就直接&lt;code&gt;kubeadm init&lt;/code&gt;导致很多跟着做的人会报错&lt;/p&gt;
&lt;p&gt;我期望看到本文的读者最少具备以下知识:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux一些目录规范和sys
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://zhangguanzhang.github.io/categories/kubernetes/"/>
    
      <category term="kubeadm" scheme="http://zhangguanzhang.github.io/categories/kubernetes/kubeadm/"/>
    
    
      <category term="k8s" scheme="http://zhangguanzhang.github.io/tags/k8s/"/>
    
      <category term="kubeadm" scheme="http://zhangguanzhang.github.io/tags/kubeadm/"/>
    
  </entry>
  
  <entry>
    <title>consul仅当服务发现在k8s无状态部署使用</title>
    <link href="http://zhangguanzhang.github.io/2019/10/24/deployment-consul-in-k8s/"/>
    <id>http://zhangguanzhang.github.io/2019/10/24/deployment-consul-in-k8s/</id>
    <published>2019-10-24T02:17:53.000Z</published>
    <updated>2019-10-24T10:35:52.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;consul server在机器上的部署已经写完了，但是dba还是希望部署在k8s上，昨天搜了下相关文章扣出来部分步骤自己验证实现了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先说下需求，三台物理机单独跑mysql主从mha，利用consul client的服务注册+ttl向consul server注册成域名，然后配置k8s内部的coredns把域名<code>*.service.consul</code>转发到consul server。架构为下图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Physical server</span><br><span class="line"> +---------------------+                            K8S Cluster</span><br><span class="line"> |                     |                   +--------------------------------+</span><br><span class="line"> |mysql + consul client+-----------+       |     +---------------------+    |</span><br><span class="line"> |                     |           |       |     |    +-------------+  |    |</span><br><span class="line"> +---------------------+           |       |     |    |consul server|  |    |</span><br><span class="line">Physical server                    |       |     | D  +------+------+  |    |</span><br><span class="line"> +---------------------+           |       |     | e         |         |    |</span><br><span class="line"> |                     |           |       |     | p  +------+------+  |    |</span><br><span class="line"> |mysql + consul client+-----------&gt;------&gt;+     | l  |consul server|  |    |</span><br><span class="line"> |                     |           |       |     | o  +------+------+  |    |</span><br><span class="line"> +---------------------+           |       |     | y         |         |    |</span><br><span class="line">Physical server                    |       |     |    +------+------+  |    |</span><br><span class="line"> +---------------------+           |       |     |    |consul server|  |    |</span><br><span class="line"> |                     |           |       |     |    +-------------+  |    |</span><br><span class="line"> |mysql + consul client+-----------+       |     +---------------------+    |</span><br><span class="line"> |                     |                   +--------------------------------+</span><br><span class="line"> +---------------------+</span><br></pre></td></tr></table></figure></p><p>consul有k8s client的相关代码，赋予RBAC后能够用selector能够自动join到其他成员<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;retry_join&quot;: [</span><br><span class="line">    &quot;provider=k8s label_selector=\&quot;app=consul,component=server\&quot;&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然其实市面上还有其他的方案的，为啥我不用</p><ul><li>官方的helm: <a href="https://github.com/hashicorp/consul-helm" target="_blank" rel="noopener">https://github.com/hashicorp/consul-helm</a> 太罗嗦，文件也很多，而且不是tls，花里胡哨的</li><li>官方的consul-k8s: <a href="https://github.com/hashicorp/consul-k8s" target="_blank" rel="noopener">https://github.com/hashicorp/consul-k8s</a> 这个方案可以见 <a href="https://medium.com/wish-engineering/katalog-sync-reliable-integration-of-consul-and-kubernetes-ebe8aae0852a" target="_blank" rel="noopener">https://medium.com/wish-engineering/katalog-sync-reliable-integration-of-consul-and-kubernetes-ebe8aae0852a</a> 同步service到k8s，或者k8s域名同步到consul，没这个必要</li></ul><h2 id="镜像准备"><a href="#镜像准备" class="headerlink" title="镜像准备"></a>镜像准备</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为这里我是consul server跑k8s里，consul client在物理机上，通信我要配置成tls，tls我是secret导入的，cm写配置文件。挂载到pod里后因为官方docker镜像的<code>entrypoint.sh</code>里chown了配置文件目录，而挂载到pod内部是只读的，pod起来后执行到chown那就报错退出了。所以改造了下官方的entrypoint脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM consul:1.6.1</span><br><span class="line">LABEL maintainer=&quot;zhangguanzhang &lt;zhangguanzhang@qq.com&gt;&quot;</span><br><span class="line"></span><br><span class="line">ARG TZ=Asia/Shanghai</span><br><span class="line"></span><br><span class="line">RUN set -eux &amp;&amp; \</span><br><span class="line">    ln -sf /usr/share/zoneinfo/$&#123;TZ&#125; /etc/localtime &amp;&amp; \</span><br><span class="line">    echo $&#123;TZ&#125; &gt; /etc/timezone</span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh</span><br></pre></td></tr></table></figure></p><p><code>docker-entrypoint.sh</code>见我github <a href="https://raw.githubusercontent.com/zhangguanzhang/Dockerfile/master/consul-k8s-dns/docker-entrypoint.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/zhangguanzhang/Dockerfile/master/consul-k8s-dns/docker-entrypoint.sh</a><br>Dockerfile我是打算直接改官方的而不是FROM镜像，但是gpg key出问题所以我写成上面那样构建的镜像。见issue <a href="https://github.com/hashicorp/docker-consul/issues/137" target="_blank" rel="noopener">https://github.com/hashicorp/docker-consul/issues/137</a><br>自己构建镜像的话<code>docker-entrypoint.sh</code>记得加执行权限，我构建的镜像推送到dockerhub上可以直接拉取</p><h2 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h2><p>证书操作都是在容器里生成的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ssl</span><br><span class="line">docker run --rm -ti --entrypoint sh --workdir /root -v $PWD/ssl:/root/ zhangguanzhang/consul-k8s-dns</span><br></pre></td></tr></table></figure></p><p>我们先进入容器</p><h3 id="step-1-创建ca"><a href="#step-1-创建ca" class="headerlink" title="step 1: 创建ca"></a>step 1: 创建ca</h3><p>为了简单起见，这里我使用Consul命令行的的内置TLS功能来创建基本的CA。您只需为数据中心创建一个CA。您应该在用于创建CA的同一服务器上生成所有证书。<br>ca默认五年，其他的证书默认1年，这里需要带参数<code>-days=</code>设置长点的日期<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consul tls ca create -days=36500</span><br><span class="line">==&gt; Saved consul-agent-ca.pem</span><br><span class="line">==&gt; Saved consul-agent-ca-key.pem</span><br></pre></td></tr></table></figure></p><h3 id="step2-创建server角色的证书"><a href="#step2-创建server角色的证书" class="headerlink" title="step2: 创建server角色的证书"></a>step2: 创建server角色的证书</h3><p>这里数据中心默认名字为dc1，其他的自行选项赋值。在创建CA的同一台服务器上重复此过程，直到每台服务器都有一个单独的证书。该命令可以反复调用，它将自动增加证书和密钥号。您将需要将证书分发到服务器。<br>严格来说每个server单独使用，也就是说假如三个server，下面命令应该执行三次。但是我们仅仅当无状态服务使用，如果每个server单独一套证书就不能放secret里，毕竟文件名不一样不能对照到pod上，这里我们仅仅生成一份<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">consul tls cert create -server -dc=dc1 -days=36500</span><br><span class="line">==&gt; WARNING: Server Certificates grants authority to become a</span><br><span class="line">    server and access all state <span class="keyword">in</span> the cluster including root keys</span><br><span class="line">    and all ACL tokens. Do not distribute them to production hosts</span><br><span class="line">    that are not server nodes. Store them as securely as CA keys.</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-0.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-0-key.pem</span><br></pre></td></tr></table></figure></p><h3 id="step3-创建client角色的证书"><a href="#step3-创建client角色的证书" class="headerlink" title="step3: 创建client角色的证书"></a>step3: 创建client角色的证书</h3><p>在Consul 1.5.2中，您可以使用替代过程来自动将证书分发给客户端。要启用此新功能，请设置<code>auto_encrypt</code>。</p><p>您可以继续使用生成证书<code>consul tls cert create -client</code>并手动分发证书。对于需要高度保护的数据中心，仍然需要现有的工作流程。</p><p>如果您正在运行Consul 1.5.1或更早版本，则需要使用来为每个客户端创建单独的证书<code>consul tls cert create -client</code>。客户端证书也由您的CA签名，但是它们没有特殊性<code>Subject Alternative Name</code>，这意味着如果<code>verify_server_hostname</code>启用，则它们不能作为server角色启动。</p><p>这里我是高于1.5.2的，不需要为每个客户端创建证书，客户端只需要拥有<code>consul-agent-ca.pem</code>这个ca下，会自动从server获取证书存在内存中，并且不会持久保存。但是我测试了并没有成功，还是生成了证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ consul tls cert create -client -dc=dc1 -days=36500</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-0.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-0-key.pem</span><br><span class="line">$ consul tls cert create -client -dc=dc1 -days=36500</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-1.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-1-key.pem</span><br></pre></td></tr></table></figure></p><p>客户端实体服务跑，可以单独去生成而不是共用一套</p><h3 id="step4-创建cli的证书"><a href="#step4-创建cli的证书" class="headerlink" title="step4: 创建cli的证书"></a>step4: 创建cli的证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ consul tls cert create -cli -dc=dc1 -days=36500</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-cli-consul-0.pem</span><br><span class="line">==&gt; Saved dc1-cli-consul-0-key.pem</span><br></pre></td></tr></table></figure><p>创建完证书ctrl+d退出容器</p><h2 id="k8s相关yaml"><a href="#k8s相关yaml" class="headerlink" title="k8s相关yaml"></a>k8s相关yaml</h2><p>consul可以跨数据中心，wan相关配置(hostPort模拟)我没有测试成功，而且考虑到高可用，基本是每台机器一台。所以我用了硬性互斥+hostNetwork，关闭serfwan端口。</p><p><code>nodeSelector</code>记得自己去打label固定住<br>apply之前我们先把证书导入成secret<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd ssl</span><br><span class="line">kubectl create secret generic consul \</span><br><span class="line">  --from-file=consul-agent-ca.pem \</span><br><span class="line">  --from-file=dc1-server-consul-0.pem \</span><br><span class="line">  --from-file=dc1-server-consul-0-key.pem \</span><br><span class="line">  --from-file=dc1-cli-consul-0.pem \</span><br><span class="line">  --from-file=dc1-cli-consul-0-key.pem</span><br></pre></td></tr></table></figure></p><h3 id="yaml文件"><a href="#yaml文件" class="headerlink" title="yaml文件"></a>yaml文件</h3><p>另外要注意，因为每次pod重启基本相当于node-id变了，参数<code>leave_on_terminate</code>应该false，见 <a href="https://github.com/hashicorp/consul/issues/6672" target="_blank" rel="noopener">https://github.com/hashicorp/consul/issues/6672</a> 和 <a href="https://github.com/hashicorp/consul/issues/3938" target="_blank" rel="noopener">https://github.com/hashicorp/consul/issues/3938</a> 所以preStop的部分没啥用，忽略即可<br>因为coredns的转发需要写ip或者文件而不能是域名，所以我们得把consul-server的svc的clusterIP给固定住(记住得在svc的cidr内选一个未使用的ip)，或者干脆不创建svc直接使用hostIP，这里按照svc实例<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">consul-server</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      app:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">      component:</span> <span class="string">server</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">        component:</span> <span class="string">server</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      affinity:</span></span><br><span class="line"><span class="attr">        podAntiAffinity:</span></span><br><span class="line"><span class="attr">          requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"><span class="attr">            - labelSelector:</span></span><br><span class="line"><span class="attr">                matchExpressions:</span></span><br><span class="line"><span class="attr">                  - key:</span> <span class="string">app</span></span><br><span class="line"><span class="attr">                    operator:</span> <span class="string">In</span></span><br><span class="line"><span class="attr">                    values:</span></span><br><span class="line"><span class="bullet">                      -</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">              topologyKey:</span> <span class="string">kubernetes.io/hostname</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">consul-server</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line"><span class="attr">        master:</span> <span class="string">"true"</span></span><br><span class="line"><span class="attr">      terminationGracePeriodSeconds:</span> <span class="number">7</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      securityContext:</span></span><br><span class="line"><span class="attr">        fsGroup:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">"zhangguanzhang/consul-k8s-dns"</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">POD_IP</span></span><br><span class="line"><span class="attr">              valueFrom:</span></span><br><span class="line"><span class="attr">                fieldRef:</span></span><br><span class="line"><span class="attr">                  fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">NODE</span></span><br><span class="line"><span class="attr">              valueFrom:</span></span><br><span class="line"><span class="attr">                fieldRef:</span></span><br><span class="line"><span class="attr">                  fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">CONSUL_HTTP_ADDR</span></span><br><span class="line"><span class="attr">              value:</span> <span class="attr">https://localhost:8501</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">CONSUL_CACERT</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">/consul/config/ssl/consul-agent-ca.pem</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">CONSUL_CLIENT_CERT</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">/consul/config/ssl/dc1-cli-consul-0.pem</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">CONSUL_CLIENT_KEY</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">/consul/config/ssl/dc1-cli-consul-0-key.pem</span></span><br><span class="line">            <span class="comment"># - name: RETRY_JOIN</span></span><br><span class="line">            <span class="comment">#   value: 172.19.0.5,172.19.0.6,172.19.0.7</span></span><br><span class="line"><span class="attr">          args:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">agent</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">-advertise=$(POD_IP)</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">-node=$(NODE)</span></span><br><span class="line"><span class="attr">          volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">data</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/consul/data</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/consul/config/</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">tls</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/consul/config/ssl/</span></span><br><span class="line"><span class="attr">          lifecycle:</span></span><br><span class="line"><span class="attr">            preStop:</span></span><br><span class="line"><span class="attr">              exec:</span></span><br><span class="line"><span class="attr">                command:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">consul</span> <span class="string">leave</span></span><br><span class="line"><span class="attr">          readinessProbe:</span></span><br><span class="line"><span class="attr">            exec:</span></span><br><span class="line"><span class="attr">              command:</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">consul</span></span><br><span class="line"><span class="bullet">                -</span> <span class="string">members</span></span><br><span class="line"><span class="attr">            failureThreshold:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">            initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            periodSeconds:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">            successThreshold:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            timeoutSeconds:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8300</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">server</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8301</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">serflan</span></span><br><span class="line">            <span class="comment"># - containerPort: 8302</span></span><br><span class="line">            <span class="comment">#   name: serfwan</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8400</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">alt-port</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8501</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8600</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">dns-udp</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">UDP</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">8600</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">dns-tcp</span></span><br><span class="line"><span class="attr">              protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">consul-server</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">tls</span></span><br><span class="line"><span class="attr">          secret:</span></span><br><span class="line"><span class="attr">            secretName:</span> <span class="string">consul</span>  </span><br><span class="line"><span class="attr">        - name:</span> <span class="string">data</span></span><br><span class="line"><span class="attr">          emptyDir:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">consul-server</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  clusterIP:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8501</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">serflan-tcp</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">"TCP"</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8301</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8301</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">serflan-udp</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">"UDP"</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8301</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8301</span></span><br><span class="line">    <span class="comment"># - name: serfwan-tcp</span></span><br><span class="line">    <span class="comment">#   protocol: "TCP"</span></span><br><span class="line">    <span class="comment">#   port: 8302</span></span><br><span class="line">    <span class="comment">#   targetPort: 8302</span></span><br><span class="line">    <span class="comment"># - name: serfwan-udp</span></span><br><span class="line">    <span class="comment">#   protocol: "UDP"</span></span><br><span class="line">    <span class="comment">#   port: 8302</span></span><br><span class="line">    <span class="comment">#   targetPort: 8302</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">server</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8300</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">8300</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">dns-tcp</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">"TCP"</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8600</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="string">dns-tcp</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">dns-udp</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">"UDP"</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8600</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="string">dns-udp</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">    component:</span> <span class="string">server</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">consul-server</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">    role:</span> <span class="string">server</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">server.json:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">&#123;</span></span><br><span class="line"><span class="attr">        "client_addr":</span> <span class="string">"0.0.0.0"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "datacenter":</span> <span class="string">"dc1"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "bootstrap_expect":</span> <span class="number">3</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "domain":</span> <span class="string">"consul"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "skip_leave_on_interrupt":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">        <span class="string">"leave_on_terminate"</span> <span class="string">:</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "log_level":</span> <span class="string">"INFO"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "retry_join":</span> <span class="string">[</span></span><br><span class="line">            <span class="string">"provider=k8s label_selector=\"app=consul,component=server\""</span></span><br><span class="line">        <span class="string">],</span></span><br><span class="line"><span class="attr">        "retry_interval":</span> <span class="string">"2s"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "verify_incoming":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "verify_outgoing":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "verify_server_hostname":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "ca_file":</span> <span class="string">"/consul/config/ssl/consul-agent-ca.pem"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "cert_file":</span> <span class="string">"/consul/config/ssl/dc1-server-consul-0.pem"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "key_file":</span> <span class="string">"/consul/config/ssl/dc1-server-consul-0-key.pem"</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "ports":</span> <span class="string">&#123;</span></span><br><span class="line"><span class="attr">          "http":</span> <span class="bullet">-1</span><span class="string">,</span></span><br><span class="line"><span class="attr">          "serf_wan":</span> <span class="bullet">-1</span><span class="string">,</span></span><br><span class="line"><span class="attr">          "https":</span> <span class="number">8501</span></span><br><span class="line">        <span class="string">&#125;,</span></span><br><span class="line"><span class="attr">        "server":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"><span class="attr">        "ui":</span> <span class="literal">false</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">consul-server</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">consul</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  - apiGroups:</span> <span class="string">[""]</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pods</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">list</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">consul</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">  - kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">consul-server</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure></p><p>apply后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 consul-tls-ansible]# kubectl get pod -o wide</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE     IP           NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">consul-server-7879498d78-8qjbs   1/1     Running   0          2m34s   172.19.0.6   172.19.0.6   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">consul-server-7879498d78-drm7n   1/1     Running   0          2m34s   172.19.0.7   172.19.0.7   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">consul-server-7879498d78-zjc6z   1/1     Running   0          2m34s   172.19.0.5   172.19.0.5   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>client是实体服务，用我的ansible部署的,client配置服务注册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;services&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;r-3306-mysql&quot;,</span><br><span class="line">      &quot;tags&quot;: [</span><br><span class="line">        &quot;slave-3306&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;address&quot;: &quot;172.16.0.2&quot;,</span><br><span class="line">      &quot;port&quot;: 3306,</span><br><span class="line">      &quot;checks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;args&quot;: [&quot;echo&quot;], //实际应该写健康检查脚本,并去掉此处注释</span><br><span class="line">          &quot;interval&quot;: &quot;5s&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>client的consul reload后看到服务注册上去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019/10/24 13:32:12 [INFO] agent: (LAN) joined: 3</span><br><span class="line">2019/10/24 13:32:12 [INFO] agent: Join LAN completed. Synced with 3 initial agents</span><br><span class="line">2019/10/24 13:32:12 [INFO] agent: Synced service &quot;r-3306-mysql&quot;</span><br><span class="line">2019/10/24 13:32:21 [INFO] agent: Synced check &quot;service:r-3306-mysql&quot;</span><br></pre></td></tr></table></figure></p><p>查看members<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 consul-tls-ansible]# kubectl exec consul-server-7879498d78-8qjbs consul members</span><br><span class="line">Node         Address           Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">172.19.0.5   172.19.0.5:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.6   172.19.0.6:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.7   172.19.0.7:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.13  172.19.0.13:8301  alive   client  1.6.1  2         dc1  &lt;default&gt;</span><br><span class="line">[root@k8s-m1 consul-tls-ansible]# kubectl get svc</span><br><span class="line">NAME            TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                                                 AGE</span><br><span class="line">consul-server   ClusterIP   10.96.0.11   &lt;none&gt;        8501/TCP,8301/TCP,8301/UDP,8300/TCP,8600/TCP,8600/UDP   2m48s</span><br><span class="line">kubernetes      ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP                                                 2d22h</span><br></pre></td></tr></table></figure></p><p>直接使用svc来测试域名解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 consul-tls-ansible]# dig -p 8600 @10.96.0.11 r-3306-mysql.service.consul +short</span><br><span class="line">172.16.0.2</span><br></pre></td></tr></table></figure></p><p>配置coredns转发，coredns的configmap添加下面内容，也可以添加上client的ip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    service.consul:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        cache 30</span><br><span class="line">        forward . 10.96.0.11:8600 172.19.0.13:8600</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>跑一个指定版本带解析的工具pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat&lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox:1.28</span><br><span class="line">    command:</span><br><span class="line">      - sleep</span><br><span class="line">      - &quot;3600&quot;</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>测试解析，不影响集群的内部解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -ti busybox -- nslookup r-3306-mysql.service.consul</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      r-3306-mysql.service.consul</span><br><span class="line">Address 1: 172.16.0.2</span><br><span class="line">$ kubectl exec -ti busybox -- nslookup kubernetes</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes</span><br><span class="line">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.consul.io/docs/platform/k8s/run.html" target="_blank" rel="noopener">https://www.consul.io/docs/platform/k8s/run.html</a><br><a href="https://github.com/kelseyhightower/consul-on-kubernetes" target="_blank" rel="noopener">https://github.com/kelseyhightower/consul-on-kubernetes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;consul server在机器上的部署已经写完了，但是dba还是希
      
    
    </summary>
    
    
      <category term="consul" scheme="http://zhangguanzhang.github.io/categories/consul/"/>
    
    
      <category term="consul" scheme="http://zhangguanzhang.github.io/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>手动修复v1.14-v1.15版本k8s的issue:76956</title>
    <link href="http://zhangguanzhang.github.io/2019/10/21/k8s-v1.14-v1.15-fix-issue/"/>
    <id>http://zhangguanzhang.github.io/2019/10/21/k8s-v1.14-v1.15-fix-issue/</id>
    <published>2019-10-21T13:36:53.000Z</published>
    <updated>2019-12-04T07:14:17.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>该issue见 <a href="https://github.com/kubernetes/kubernetes/issues/76956" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/76956</a>, apiserver和controller-manager每次start的时候会刷下面信息。不影响使用，但是有强迫症可以按照本文思路手动修改。当然本文也是自己编译k8s的教程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E0423 17:35:58.491576       1 prometheus.go:138] failed to register depth metric admission_quota_controller: duplicate metrics collector registration attempted</span><br><span class="line">E0423 17:35:58.491625       1 prometheus.go:150] failed to register adds metric admission_quota_controller: duplicate metrics collector registration attempted</span><br><span class="line">E0423 17:35:58.491901       1 prometheus.go:162] failed to register latency metric admission_quota_controller: duplicate metrics collector registration attempted</span><br><span class="line">E0423 17:35:58.492191       1 prometheus.go:174] failed to register work_duration metric admission_quota_controller: duplicate metrics collector registration attempted</span><br><span class="line">E0423 17:35:58.492367       1 prometheus.go:189] failed to register unfinished_work_seconds metric admission_quota_controller: duplicate metrics collector registration attempted</span><br><span class="line">E0423 17:35:58.492507       1 prometheus.go:202] failed to register longest_running_processor_microseconds metric admission_quota_controller: duplicate metrics collector registration attempted</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从这个issue我们可以找到对应的修复pr <a href="https://github.com/kubernetes/kubernetes/pull/77553" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/pull/77553</a>, 我们看到是metrics信息被注册了两次的错误输出。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是该pr只被merge到了<code>v1.16</code>以上 <a href="https://github.com/kubernetes/kubernetes/commit/f101466d2e4d96854c80f58203de2cc6b5aaeb6a#diff-60187c78fbca5a995fd7d2ac913eb6c8" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/commit/f101466d2e4d96854c80f58203de2cc6b5aaeb6a#diff-60187c78fbca5a995fd7d2ac913eb6c8</a>, 意味着1.14，1.15都存在这个。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master (#77553)  v1.17.0-alpha.2  v1.17.0-alpha.1 v1.17.0-alpha.0 v1.16.3-beta.0 v1.16.2 v1.16.2-beta.0 v1.16.1 v1.16.1-beta.0 v1.16.0 v1.16.0-rc.2 v1.16.0-rc.1 v1.16.0-beta.2 v1.16.0-beta.1 v1.16.0-beta.0 v1.16.0-alpha.3 v1.16.0-alpha.2</span><br></pre></td></tr></table></figure></p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>手动下载源码编译，这里我使用<code>v1.15.5</code>来做示范。我们使用容器编译，这里我使用<code>4c8g</code>的<code>centos7.6</code>+<code>docker-ce-18.09</code>。想办法把源码拉下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/kubernetes/kubernetes -b v1.15.5</span><br><span class="line">cd kubernetes</span><br><span class="line">git checkout -b v1.15.5</span><br></pre></td></tr></table></figure></p><h3 id="编译前准备"><a href="#编译前准备" class="headerlink" title="编译前准备"></a>编译前准备</h3><p>因为我们拉取后修改了源码，编译出的version信息会是下面带<code>-dirty</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kube-controller-manager --version</span><br><span class="line">Kubernetes v1.15.5-dirty</span><br></pre></td></tr></table></figure></p><p>可以执行下面命令去掉<code>-dirty</code>,或者自己git add后commit也行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -ri &apos;s#KUBE_GIT_TREE_STATE=&quot;dirty&quot;#KUBE_GIT_TREE_STATE=&quot;clean&quot;#g&apos; hack/lib/version.sh</span><br></pre></td></tr></table></figure></p><p>另外如果有需求也编译docker镜像的话可以先提前准备本地镜像，修改<code>build/lib/release.sh</code>，命令<code>sed -ri &#39;s#(build)\s+--pull#\1#&#39; build/lib/release.sh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;$&#123;DOCKER[@]&#125;&quot; build --pull -q -t &quot;$&#123;docker_image_tag&#125;&quot; &quot;$&#123;docker_build_path&#125;&quot; &gt;/dev/null</span><br><span class="line">修改为下面</span><br><span class="line">&quot;$&#123;DOCKER[@]&#125;&quot; build -q -t &quot;$&#123;docker_image_tag&#125;&quot; &quot;$&#123;docker_build_path&#125;&quot; &gt;/dev/null</span><br></pre></td></tr></table></figure></p><p>因为我们使用docker镜像起容器编译，需要提前准备镜像，查看下版本，各个版本k8s的golang版本是不一样的，不要乱写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat kubernetes/build/build-image/cross/VERSION</span><br><span class="line">v1.12.10-1</span><br></pre></td></tr></table></figure></p><p>拉取该镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://zhangguanzhang.github.io/bash/pull.sh | bash -s k8s.gcr.io/kube-cross:v1.12.10-1</span><br></pre></td></tr></table></figure></p><h3 id="把merge打patch"><a href="#把merge打patch" class="headerlink" title="把merge打patch"></a>把merge打patch</h3><p>merge的url为 <a href="https://github.com/kubernetes/kubernetes/commit/f101466d2e4d96854c80f58203de2cc6b5aaeb6a#diff-60187c78fbca5a995fd7d2ac913eb6c8" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/commit/f101466d2e4d96854c80f58203de2cc6b5aaeb6a#diff-60187c78fbca5a995fd7d2ac913eb6c8</a><br>把url中<code>#</code>以及后面的改为<code>.patch</code>执行下面命令打patch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 kubernetes]# wget https://github.com/kubernetes/kubernetes/commit/f101466d2e4d96854c80f58203de2cc6b5aaeb6a.patch</span><br><span class="line">[root@k8s-m1 kubernetes]# patch -p1  &lt; f101466d2e4d96854c80f58203de2cc6b5aaeb6a.patch </span><br><span class="line">patching file pkg/util/workqueue/prometheus/prometheus.go</span><br><span class="line">patching file pkg/util/workqueue/prometheus/prometheus_test.go</span><br><span class="line">patching file pkg/util/workqueue/prometheus/BUILD</span><br><span class="line">patching file pkg/util/workqueue/prometheus/prometheus.go</span><br><span class="line">patching file pkg/util/workqueue/prometheus/prometheus_test.go</span><br><span class="line">patching file staging/src/k8s.io/client-go/util/workqueue/delaying_queue.go</span><br><span class="line">Hunk #1 succeeded at 44 (offset 1 line).</span><br><span class="line">Hunk #2 succeeded at 76 (offset 3 lines).</span><br><span class="line">Hunk #3 succeeded at 152 (offset 6 lines).</span><br><span class="line">patching file staging/src/k8s.io/client-go/util/workqueue/metrics.go</span><br><span class="line">patching file staging/src/k8s.io/client-go/util/workqueue/metrics_test.go</span><br><span class="line">patching file staging/src/k8s.io/client-go/util/workqueue/rate_limiting_queue_test.go</span><br></pre></td></tr></table></figure></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>为了和官方尽量保持一致，这里使用docker容器编译，先说下几个环境变量:<br><code>KUBE_BUILD_CONFORMANCE=n</code> 和 <code>KUBE_BUILD_HYPERKUBE=n</code> 参数决定是否构建 <code>hyperkube-amd64</code> 和 <code>conformance-amd64</code> 镜像，默认是 y 构建，这里设置为n表示不构建<br>配置尽量两个cpu以上而不是1个cpu多核心，不然编译很容易高负载被系统kill了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 kubernetes]# KUBE_BUILD_PLATFORMS=linux/amd64 KUBE_BUILD_CONFORMANCE=n KUBE_BUILD_HYPERKUBE=n make quick-release</span><br><span class="line">+++ [1021 21:30:50] Verifying Prerequisites....</span><br><span class="line">+++ [1021 21:30:51] Building Docker image kube-build:build-7db96ab759-5-v1.12.10-1</span><br><span class="line">+++ [1021 21:30:54] Syncing sources to container</span><br><span class="line">+++ [1021 21:30:58] Running build command...</span><br><span class="line">+++ [1021 21:31:43] Building go targets for linux/amd64:</span><br><span class="line">    cmd/kube-proxy</span><br><span class="line">    cmd/kube-apiserver</span><br><span class="line">    cmd/kube-controller-manager</span><br><span class="line">    cmd/cloud-controller-manager</span><br><span class="line">    cmd/kubelet</span><br><span class="line">    cmd/kubeadm</span><br><span class="line">    cmd/hyperkube</span><br><span class="line">    cmd/kube-scheduler</span><br><span class="line">    vendor/k8s.io/apiextensions-apiserver</span><br><span class="line">    cluster/gce/gci/mounter</span><br><span class="line">+++ [1021 21:34:05] Building go targets for linux/amd64:</span><br><span class="line">    cmd/kube-proxy</span><br><span class="line">    cmd/kubeadm</span><br><span class="line">    cmd/kubelet</span><br><span class="line">+++ [1021 21:34:49] Building go targets for linux/amd64:</span><br><span class="line">    cmd/kubectl</span><br><span class="line">+++ [1021 21:35:11] Building go targets for linux/amd64:</span><br><span class="line">    cmd/gendocs</span><br><span class="line">    cmd/genkubedocs</span><br><span class="line">    cmd/genman</span><br><span class="line">    cmd/genyaml</span><br><span class="line">    cmd/genswaggertypedocs</span><br><span class="line">    cmd/linkcheck</span><br><span class="line">    vendor/github.com/onsi/ginkgo/ginkgo</span><br><span class="line">    test/e2e/e2e.test</span><br><span class="line">+++ [1021 21:37:01] Building go targets for linux/amd64:</span><br><span class="line">    cmd/kubemark</span><br><span class="line">    vendor/github.com/onsi/ginkgo/ginkgo</span><br><span class="line">    test/e2e_node/e2e_node.test</span><br><span class="line">+++ [1021 21:38:03] Syncing out of container</span><br><span class="line">+++ [1021 21:38:33] Building tarball: manifests</span><br><span class="line">+++ [1021 21:38:33] Building tarball: src</span><br><span class="line">+++ [1021 21:38:33] Starting tarball: client linux-amd64</span><br><span class="line">+++ [1021 21:38:33] Waiting on tarballs</span><br><span class="line">+++ [1021 21:38:49] Building images: linux-amd64</span><br><span class="line">+++ [1021 21:38:49] Building tarball: node linux-amd64</span><br><span class="line">+++ [1021 21:38:49] Starting docker build for image: cloud-controller-manager-amd64</span><br><span class="line">+++ [1021 21:38:49] Starting docker build for image: kube-apiserver-amd64</span><br><span class="line">+++ [1021 21:38:49] Starting docker build for image: kube-controller-manager-amd64</span><br><span class="line">+++ [1021 21:38:49] Starting docker build for image: kube-scheduler-amd64</span><br><span class="line">+++ [1021 21:38:49] Starting docker build for image: kube-proxy-amd64</span><br><span class="line">+++ [1021 21:38:49] Building conformance image for arch: amd64</span><br><span class="line">+++ [1021 21:38:49] Building hyperkube image for arch: amd64</span><br><span class="line">Sending build context to Docker daemon  52.65MB</span><br><span class="line">Step 1/2 : FROM k8s.gcr.io/debian-base-amd64:v1.0.0</span><br><span class="line">Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">!!! [1021 21:39:07] Call tree:</span><br><span class="line">!!! [1021 21:39:07]  1: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:07]  2: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:07]  3: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:07]  4: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">Sending build context to Docker daemon  50.07MB</span><br><span class="line">Step 1/2 : FROM k8s.gcr.io/debian-iptables-amd64:v11.0.2</span><br><span class="line">Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">!!! [1021 21:39:08] Call tree:</span><br><span class="line">!!! [1021 21:39:08]  1: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:08]  2: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:08]  3: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:08]  4: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">Sending build context to Docker daemon    156MB</span><br><span class="line">Step 1/2 : FROM k8s.gcr.io/debian-base-amd64:v1.0.0</span><br><span class="line">Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">!!! [1021 21:39:12] Call tree:</span><br><span class="line">!!! [1021 21:39:12]  1: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:12]  2: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:12]  3: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:12]  4: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">Sending build context to Docker daemon  134.3MB</span><br><span class="line">Step 1/2 : FROM k8s.gcr.io/debian-base-amd64:v1.0.0</span><br><span class="line">Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">!!! [1021 21:39:13] Call tree:</span><br><span class="line">!!! [1021 21:39:13]  1: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:13]  2: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:13]  3: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:13]  4: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">Sending build context to Docker daemon  205.2MB</span><br><span class="line">Step 1/2 : FROM k8s.gcr.io/debian-base-amd64:v1.0.0</span><br><span class="line">Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">!!! [1021 21:39:13] Call tree:</span><br><span class="line">!!! [1021 21:39:13]  1: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:13]  2: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:13]  3: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:13]  4: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">make[1]: *** [build] Error 1</span><br><span class="line">!!! [1021 21:39:14] Call tree:</span><br><span class="line">!!! [1021 21:39:14]  1: /root/kubernetes/build/lib/release.sh:420 kube::release::build_hyperkube_image(...)</span><br><span class="line">!!! [1021 21:39:14]  2: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:14]  3: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:14]  4: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:14]  5: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">Get https://k8s.gcr.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br><span class="line">make[1]: *** [build] Error 1</span><br><span class="line">!!! [1021 21:39:14] Call tree:</span><br><span class="line">!!! [1021 21:39:14]  1: /root/kubernetes/build/lib/release.sh:424 kube::release::build_conformance_image(...)</span><br><span class="line">!!! [1021 21:39:14]  2: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:14]  3: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:14]  4: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:14]  5: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">!!! [1021 21:39:14] previous Docker build failed</span><br><span class="line">!!! [1021 21:39:14] Call tree:</span><br><span class="line">!!! [1021 21:39:14]  1: /root/kubernetes/build/lib/release.sh:231 kube::release::create_docker_images_for_server(...)</span><br><span class="line">!!! [1021 21:39:14]  2: /root/kubernetes/build/lib/release.sh:237 kube::release::build_server_images(...)</span><br><span class="line">!!! [1021 21:39:14]  3: /root/kubernetes/build/lib/release.sh:93 kube::release::package_server_tarballs(...)</span><br><span class="line">!!! [1021 21:39:14]  4: build/release.sh:45 kube::release::package_tarballs(...)</span><br><span class="line">!!! [1021 21:39:14] previous tarball phase failed</span><br><span class="line">make: *** [quick-release] Error 1</span><br></pre></td></tr></table></figure></p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p>构建出错，不用管，出错是要构建k8s的docker镜像，二进制已经被构建出来的，我们可以查看<code>_output/release-stage</code>目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 kubernetes]# ll _output/release-stage/server/linux-amd64/kubernetes/server/bin/</span><br><span class="line">total 828572</span><br><span class="line">-rwxr-xr-x 2 root root 134324933 Oct 21 21:38 cloud-controller-manager</span><br><span class="line">drwxr-xr-x 2 root root      4096 Oct 21 21:38 cloud-controller-manager.dockerbuild</span><br><span class="line">-rwxr-xr-x 1 root root 250209280 Oct 21 21:38 hyperkube</span><br><span class="line">-rwxr-xr-x 2 root root 205195189 Oct 21 21:38 kube-apiserver</span><br><span class="line">drwxr-xr-x 2 root root      4096 Oct 21 21:38 kube-apiserver.dockerbuild</span><br><span class="line">-rwxr-xr-x 2 root root 155984780 Oct 21 21:38 kube-controller-manager</span><br><span class="line">drwxr-xr-x 2 root root      4096 Oct 21 21:38 kube-controller-manager.dockerbuild</span><br><span class="line">-rwxr-xr-x 2 root root  50064955 Oct 21 21:38 kube-proxy</span><br><span class="line">drwxr-xr-x 2 root root      4096 Oct 21 21:38 kube-proxy.dockerbuild</span><br><span class="line">-rwxr-xr-x 2 root root  52643510 Oct 21 21:38 kube-scheduler</span><br><span class="line">drwxr-xr-x 2 root root      4096 Oct 21 21:38 kube-scheduler.dockerbuild</span><br></pre></td></tr></table></figure></p><h4 id="替换后查看输出信息"><a href="#替换后查看输出信息" class="headerlink" title="替换后查看输出信息"></a>替换后查看输出信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">cp _output/release-stage/server/linux-amd64/kubernetes/server/bin/kube-controller-manager /usr/local/bin/</span><br><span class="line">cp: overwrite ‘/usr/local/bin/kube-controller-manager’? y</span><br><span class="line">[root@k8s-m1 kubernetes]# systemctl status kube-controller-manager.service </span><br><span class="line">● kube-controller-manager.service - Kubernetes Controller Manager</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-controller-manager.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: inactive (dead) since Mon 2019-10-21 20:47:21 CST; 55min ago</span><br><span class="line">     Docs: https://github.com/kubernetes/kubernetes</span><br><span class="line">  Process: 114302 ExecStart=/usr/local/bin/kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.kubeconfig --authorization-kubeconfig=/etc/kubernetes/controller-manager.kubeconfig --bind-address=0.0.0.0 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig --leader-elect=true --cluster-cidr=10.244.0.0/16 --service-cluster-ip-range=10.96.0.0/12 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --root-ca-file=/etc/kubernetes/pki/ca.crt --use-service-account-credentials=true --controllers=*,bootstrapsigner,tokencleaner --experimental-cluster-signing-duration=86700h --feature-gates=RotateKubeletClientCertificate=true --node-monitor-period=5s --node-monitor-grace-period=2m --pod-eviction-timeout=1m --logtostderr=false --log-dir=/var/log/kubernetes/kube-controller-manager --v=2 (code=killed, signal=TERM)</span><br><span class="line"> Main PID: 114302 (code=killed, signal=TERM)</span><br><span class="line"></span><br><span class="line">Oct 21 20:45:10 k8s-m1 systemd[1]: Started Kubernetes Controller Manager.</span><br><span class="line">Oct 21 20:47:21 k8s-m1 systemd[1]: Stopping Kubernetes Controller Manager...</span><br><span class="line">Oct 21 20:47:21 k8s-m1 systemd[1]: Stopped Kubernetes Controller Manager.</span><br><span class="line">[root@k8s-m1 kubernetes]# systemctl start kube-controller-manager.service </span><br><span class="line">[root@k8s-m1 kubernetes]# systemctl status kube-controller-manager.service </span><br><span class="line">● kube-controller-manager.service - Kubernetes Controller Manager</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-controller-manager.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2019-10-21 21:43:25 CST; 1s ago</span><br><span class="line">     Docs: https://github.com/kubernetes/kubernetes</span><br><span class="line"> Main PID: 11996 (kube-controller)</span><br><span class="line">    Tasks: 8</span><br><span class="line">   Memory: 12.2M</span><br><span class="line">   CGroup: /system.slice/kube-controller-manager.service</span><br><span class="line">           └─11996 /usr/local/bin/kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.kubeconfig --authorization-kubeconfig=/etc/kubernetes/controller-manager.kubeconfig -...</span><br><span class="line"></span><br><span class="line">Oct 21 21:43:25 k8s-m1 systemd[1]: Started Kubernetes Controller Manager.</span><br></pre></td></tr></table></figure><p>已经没有相关错误了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.kubernetes.org.cn/5033.html" target="_blank" rel="noopener">https://www.kubernetes.org.cn/5033.html</a><br><a href="https://www.twblogs.net/a/5c76b632bd9eee33991811bf" target="_blank" rel="noopener">https://www.twblogs.net/a/5c76b632bd9eee33991811bf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;该issue见 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/issues/76956
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://zhangguanzhang.github.io/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://zhangguanzhang.github.io/tags/k8s/"/>
    
      <category term="golang" scheme="http://zhangguanzhang.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>/boot目录被清空下物理机无法开机的一次救援</title>
    <link href="http://zhangguanzhang.github.io/2019/10/12/boot-grub-rescue/"/>
    <id>http://zhangguanzhang.github.io/2019/10/12/boot-grub-rescue/</id>
    <published>2019-10-12T09:00:47.000Z</published>
    <updated>2019-12-03T06:12:58.109Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天下午到公司被通知苏州一个节点的客户的裸金属无法开机，14:00上去到16:50终于给整好了，这里记录下笔记分享下</p><h2 id="故障现象"><a href="#故障现象" class="headerlink" title="故障现象"></a>故障现象</h2><p>物理机裸金属，连上跳板机通过带外连上去(等同于现场接了一个显示屏+键盘一样)错误为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">errorL file `/grub2/i386-pc/normal.mod&apos; not found.</span><br><span class="line">Entering rescue mode...</span><br><span class="line">grub rescue&gt;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个物理机是grub2，这个错误和类似的<code>/grub/i386-pc/normal.mod</code>本质上都是文件丢失，但是也分情况，网上的一些恢复步骤都是在丢失部分文件的情况下恢复的<br>查看分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grub rescue&gt;ls</span><br><span class="line">(hd0) (hd0,msdos2) (hd0,msdos1)</span><br><span class="line">grub rescue&gt;ls (hd0,msdos1)/</span><br><span class="line">./ ../</span><br><span class="line">grub rescue&gt;ls (hd0,msdos2)/</span><br><span class="line">error: unknown filesystem</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里是等同于你实际的分区，我们这基本是一个/boot和一个根，看到<code>(hd0,msdos1)</code>是/boot分区，文件是完全丢失的，<code>(hd0,msdos2)/</code>报错未知文件系统是因为这个是lvm，正常乐观下来讲只是丢失部分文件的话，可以参考下面步骤去恢复</p><ul><li><a href="https://www.youtube.com/watch?v=RqRm1bEXO9M" target="_blank" rel="noopener">https://www.youtube.com/watch?v=RqRm1bEXO9M</a></li><li><a href="https://blog.csdn.net/qq_20545159/article/details/50810089" target="_blank" rel="noopener">https://blog.csdn.net/qq_20545159/article/details/50810089</a></li></ul><h2 id="救援"><a href="#救援" class="headerlink" title="救援"></a>救援</h2><h3 id="livecd进入rescue救援"><a href="#livecd进入rescue救援" class="headerlink" title="livecd进入rescue救援"></a>livecd进入rescue救援</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里我是完全丢失，我利用带外远程挂载了一个centos7.6的iso(最好和目标系统版本一样)，重启物理机进入cdrom，选择<code>Troubleshooting</code> –&gt; <code>Rescue a CentOS Linux system</code></p><p>下面我引用下别人的图，如果图被拦截了请看文字吧<br><img src="https://cdn.thegeekdiary.com/wp-content/uploads/2017/10/troubleshooting-option-boot-RHEL-CentOS-7-into-rescue-mode.png" alt="boot"><br><img src="https://cdn.thegeekdiary.com/wp-content/uploads/2017/10/rescue-CentOS-RHEL-7-system.png" alt="resuemenu"><br><img src="https://cdn.thegeekdiary.com/wp-content/uploads/2017/09/find-linux-installation-for-rescue-mode-RHEL-7-reinstall-GRUB2.png" alt="recueshell"><br>选择1后然后回车会得到一个交互式shell，查看下分区信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# lsblk</span><br><span class="line">NAME            MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    1   558G  0 disk </span><br><span class="line">├─sda1            8:1    1     1G  0 part /mnt/sysimage/boot</span><br><span class="line">└─sda2            8:2    1   557G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   550G  0 lvm  /mnt/sysimage</span><br><span class="line">  └─centos-swap 253:1    0     4G  0 lvm  [SWAP]</span><br><span class="line">sr0              11:0    1   4.3G  0 rom  /run/install/repo</span><br><span class="line">sr1              11:1    1 107.2M  0 rom </span><br><span class="line">loop0             7:1    0 432.4M  1 loop</span><br><span class="line">loop1             7:1    0     2G  1 loop</span><br><span class="line">├─live-rw       253:0    0     2G  0 dm    /</span><br><span class="line">└─live-base     253:1    0     2G  1 dm</span><br><span class="line">loop2             7:2    0   512M  1 loop</span><br><span class="line">└─live-rw       253:0    0     2G  0 dm    /</span><br></pre></td></tr></table></figure></p><p>根被挂载到<code>/mnt/sysimage</code>,boot被挂载到<code>/mnt/sysimage/boot</code>，iso被挂载到<code>/run/install/repo</code><br>最开始我是chroot /mnt/sysimage后grub2-install /dev/sda，然后重启后进入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    Minimal BASH_like line editing is supported. For the first word,</span><br><span class="line">...</span><br><span class="line">..</span><br><span class="line">grub&gt;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;出现这个一般是缺少<code>grub.cfg</code>，然后再进去光盘的rescue里去chroot进去<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>还是不行。因为实际上/boot都被清空了，grub2-install和mkconfig只是生成了<code>/boot/grub2</code>下面一些文件，因为开机需要的vmlinuz和kernel都没有.</p><h3 id="复制同样机器同样系统的-boot"><a href="#复制同样机器同样系统的-boot" class="headerlink" title="复制同样机器同样系统的/boot"></a>复制同样机器同样系统的/boot</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正确姿势来整的话，考虑到/boot下面的相关文件被清理了，叫同事找同样物理机和系统的裸金属上去看看<code>/boot/</code>目录，然后叫他把/boot打包成iso，我在带外挂载上去。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中间他直接复制到windows的，权限信息丢失了。我叫他直接Linux上tar打包了后再在win上打包iso。<br>可以先在rescue模式里看<code>/mnt/sysimage/etc/redhat-release</code>查看系统信息，然后正常物理机的同样系统上的/boot信息为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ll</span><br><span class="line">total 110920</span><br><span class="line">-rw-r--r--. 1 root root   151918 Nov  9  2018 config-3.10.0-957.el7.x86_64</span><br><span class="line">drwxr-xr-x. 3 root root       17 Feb 26  2019 efi</span><br><span class="line">drwxr-xr-x. 2 root root       27 Feb 26  2019 grub</span><br><span class="line">drwx------. 5 root root       97 Feb 26  2019 grub2</span><br><span class="line">-rw-------. 1 root root 59891363 Feb 26  2019 initramfs-0-rescue-cd270b115cc741328f7812c0be97041d.img</span><br><span class="line">-rw-------. 1 root root 22834950 Feb 26  2019 initramfs-3.10.0-957.el7.x86_64.img</span><br><span class="line">-rw-------. 1 root root 13548147 Oct 11 16:32 initramfs-3.10.0-957.el7.x86_64kdump.img</span><br><span class="line">-rw-r--r--. 1 root root   314036 Nov  9  2018 symvers-3.10.0-957.el7.x86_64.gz</span><br><span class="line">-rw-------. 1 root root  3543471 Nov  9  2018 System.map-3.10.0-957.el7.x86_64</span><br><span class="line">-rwxr-xr-x. 1 root root  6639904 Feb 26  2019 vmlinuz-0-rescue-cd270b115cc741328f7812c0be97041d</span><br><span class="line">-rwxr-xr-x. 1 root root  6639904 Nov  9  2018 vmlinuz-3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在步骤开始是实际有效的步骤，前提是挂载了centos的iso和boot文件的iso<br>下面我第一个光驱是iso，第二个是boot，所以是<code>/dev/sr1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# chroot /mnt/sysimage</span><br><span class="line">bash-4.2# alias ll=&apos;ls -l&apos;</span><br><span class="line">bash-4.2# mkdir -p /media/tmp</span><br><span class="line">bash-4.2# mount /dev/sr1 /media/tmp/  </span><br><span class="line">mount: /dev/sr1 is write-protected, mounting read-only</span><br><span class="line">bash-4.2# cd /media</span><br><span class="line">bash-4.2# tar zxf /media/tmp/boot.tar.gz</span><br><span class="line">bash-4.2# cp -a boot/* /boot/</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里有一个点不确定，但是为了保险起见我是操作了，有条件的人可以自己去测下看看下面步骤不执行有影响不,删除uuid文件(我对比了下实际上MD5是一样的，有条件可以测下下面这几个步骤不执行看看正常不)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2# cd /boot</span><br><span class="line">bash-4.2# ll /media/boot/*cd270b11* </span><br><span class="line">-rw-------. 1 root root 59891363 Feb 26  2019 /media/boot/initramfs-0-rescue-cd270b115cc741328f7812c0be97041d.img</span><br><span class="line">-rwxr-xr-x. 1 root root  6639904 Feb 26  2019 /media/boot/vmlinuz-0-rescue-cd270b115cc741328f7812c0be97041d</span><br><span class="line">bash-4.2# rm -f *cd270b11*</span><br><span class="line">bash-4.2# /etc/kernel/postinst.d/51-dracut-rescue-postinst.sh  $(uname -r) /boot/vmlinuz-$(uname -r)</span><br></pre></td></tr></table></figure></p><p>grub配置文件里有硬盘分区的uuid，这里需要重新生成<code>grub.cfg</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2# mv /boot/grub2/grub.cfg&#123;,.bak&#125;</span><br><span class="line">bash-4.2# grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure></p><p>如果报错<code>grub-probe: error: cannot find a device for / (is /dev mounted?)</code><br>则在chroot之前用bind mount相关目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mount -o bind /dev /mnt/sysimage/dev</span><br><span class="line">mount -o bind /proc /mnt/sysimage/proc</span><br><span class="line">mount -o bind /run /mnt/sysimage/run</span><br><span class="line">mount -o bind /sys /mnt/sysimage/sys</span><br></pre></td></tr></table></figure></p><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>重启测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2# exit</span><br><span class="line">sh-4.2# init 6</span><br></pre></td></tr></table></figure></p><p>结果是进入了<code>emergency mode</code><br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/emergencyMode.png" alt="emergencyMode"><br>这个模式进来了大多数原因是有个非系统的分区无法挂载，输入root密码进去后，先查看下<code>systemctl failed</code>发现<code>/home</code>无法被挂载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@cn19 ~]# systemctl --failed</span><br><span class="line">  UNIT            LOAD   ACTIVE SUB    DESCRIPTION</span><br><span class="line">● home.mount      loaded failed failed /home</span><br><span class="line">● auditd.service  loaded failed failed Security Auditing Service</span><br><span class="line"></span><br><span class="line">LOAD   = Reflects whether the unit definition was properly loaded.</span><br><span class="line">ACTIVE = The high-level unit activation state, i.e. generalization of SUB.</span><br><span class="line">SUB    = The low-level unit activation state, values depend on unit type.</span><br><span class="line"></span><br><span class="line">2 loaded units listed. Pass --all to see loaded but inactive units, too.</span><br><span class="line">To show all installed unit files use &apos;systemctl list-unit-files&apos;.</span><br><span class="line"></span><br><span class="line">[root@cn19 ~]# grep -Pv &apos;^#|^$&apos; /etc/fstab</span><br><span class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</span><br><span class="line">UUID=71b43bbc-819c-4420-9ba8-9c85110999dd /boot                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br><span class="line">[root@cn19 ~]# lvs</span><br><span class="line">  LV   VG     Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  home centos -wi-a-----   2.00g                                                    </span><br><span class="line">  root centos -wi-ao---- 550.00g                                                    </span><br><span class="line">  swap centos -wi-ao----   4.00g</span><br></pre></td></tr></table></figure></p><p>尝试修复无果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@cn19 ~]# xfs_repair /dev/mapper/centos-home </span><br><span class="line">Phase 1 - find and verify superblock...</span><br><span class="line">bad primary superblock - bad magic number !!!</span><br><span class="line"></span><br><span class="line">attempting to find secondary superblock...</span><br><span class="line">......................Sorry, could not find valid secondary superblock</span><br><span class="line">Exiting now.</span><br></pre></td></tr></table></figure></p><p>询问了用户<code>/home</code>目录不重要，直接取消fstab取消/home的挂载然后reboot恢复正常<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/right.png" alt="right"></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.tecmint.com/recover-or-rescue-corrupted-grub-boot-loader-in-centos-7/" target="_blank" rel="noopener">https://www.tecmint.com/recover-or-rescue-corrupted-grub-boot-loader-in-centos-7/</a><br>rescue mode安装kernel: <a href="https://www.thegeekdiary.com/centos-rhel-7-how-to-install-kernel-from-rescue-mode/" target="_blank" rel="noopener">https://www.thegeekdiary.com/centos-rhel-7-how-to-install-kernel-from-rescue-mode/</a><br>rescue mode 生成vmlinuz和initramfs: <a href="https://www.thegeekdiary.com/how-to-re-generate-initramfs-and-vmlinuz-for-rescue-kernel-with-current-kernel-in-centos-rhel-7/" target="_blank" rel="noopener">https://www.thegeekdiary.com/how-to-re-generate-initramfs-and-vmlinuz-for-rescue-kernel-with-current-kernel-in-centos-rhel-7/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天下午到公司被通知苏州一个节点的客户的裸金属无法开机，14:00上去到16:50终于给整好了，这里记录下笔记分享下&lt;/p&gt;
&lt;h2 id=&quot;故障现象&quot;&gt;&lt;a href=&quot;#故障
      
    
    </summary>
    
    
      <category term="boot" scheme="http://zhangguanzhang.github.io/categories/boot/"/>
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/categories/boot/grub/"/>
    
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/tags/grub/"/>
    
      <category term="boot" scheme="http://zhangguanzhang.github.io/tags/boot/"/>
    
  </entry>
  
  <entry>
    <title>ansible数量限制上的幂等性</title>
    <link href="http://zhangguanzhang.github.io/2019/10/11/ansible-count-Idempotency/"/>
    <id>http://zhangguanzhang.github.io/2019/10/11/ansible-count-Idempotency/</id>
    <published>2019-10-11T13:41:08.000Z</published>
    <updated>2019-10-15T12:15:56.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>准备写上一篇文章的consul成ansible，在证书方面，cli和ca需要执行一次生成，而server和agent证书需要多次执行产生。另外我们也要考虑，<code>dc1-server-consul-0*.pem</code>需要拷贝到机器1，1拷贝到机器2.<br>如何在生成证书的时候中断后再次运行也会达到目标的数量来实现幂等性，而不是证书生成多了<br>另外证书还得按照index去拷贝到指定机器，也就是类似下面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp 001.pem ip1:/etc/xxx</span><br><span class="line">scp 002.pem ip2:/etc/xxx</span><br><span class="line">scp 003.pem ip3:/etc/xxx</span><br></pre></td></tr></table></figure></p><h3 id="场景1-–-tls的幂等性"><a href="#场景1-–-tls的幂等性" class="headerlink" title="场景1 – tls的幂等性"></a>场景1 – tls的幂等性</h3><h4 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h4><p>这里我是三台server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@consul ansible]# cat inventory/hosts </span><br><span class="line">[server]</span><br><span class="line">172.19.0.3</span><br><span class="line">172.19.0.4</span><br><span class="line">172.19.0.5</span><br><span class="line">[client]</span><br><span class="line">172.19.0.8</span><br><span class="line">172.19.0.9</span><br></pre></td></tr></table></figure></p><p>剧本文件见 <a href="https://github.com/zhangguanzhang/consul-tls-ansible" target="_blank" rel="noopener">https://github.com/zhangguanzhang/consul-tls-ansible</a> 下面仅仅列出相关文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@consul ansible]# ll</span><br><span class="line">total 24</span><br><span class="line">-rw-r--r-- 1 root root   84 Oct 11 20:18 ansible.cfg</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 11 20:20 group_vars</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 inventory</span><br><span class="line">drwxr-xr-x 5 root root 4096 Oct 14 10:03 roles</span><br><span class="line">-rw-r--r-- 1 root root   61 Oct 14 10:40 03-server.yml</span><br><span class="line">-rw-r--r-- 1 root root   63 Oct 11 20:20 02-tls.yml</span><br></pre></td></tr></table></figure></p><p>对比下四个证书，我们步骤都是一样，需要的action和一些属性，假设dc名设置为dc1，我们抽象来定义成loop<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ca:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">ca</span> <span class="string">create</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">consul-agent-ca.pem</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">consul-agent-ca-key.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">cli:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">cert</span> <span class="string">create</span> <span class="bullet">-cli</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-cli-consul-0.pem</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-cli-consul-0-key.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">cert</span> <span class="string">create</span> <span class="bullet">-server</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-server-consul-*.pem</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-server-consul-*-key.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="string">&#123;&#123;</span> <span class="string">groups['server']</span> <span class="string">| length &#125;&#125;</span></span><br><span class="line"><span class="string"></span><span class="attr">client:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">cert</span> <span class="string">create</span> <span class="bullet">-client</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-client-consul-*.pem</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-client-consul-*-key.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="string">&#123;&#123;</span> <span class="string">groups['client']</span> <span class="string">| length &#125;&#125;</span></span><br></pre></td></tr></table></figure></p><p>每个证书的do步骤都可以为:</p><ol><li>检查文件的数量</li><li>文件数量是否达到了count，没达到就生成</li></ol><p>第一个步骤挺简单的，搜索了下使用find模块，返回值的matched是匹配的文件数量。因为consul每次生成一个都是cert+key，可以只看cert或者key。<br>server和client的证书是多个，而find模块的<code>use_regex</code>是支持正则的，我们给每个证书的loop属性加一个<code>use_regex</code>，最终的属性为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ca:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">ca</span> <span class="string">create</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  use_regex:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">consul-agent-ca.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">cli:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">cert</span> <span class="string">create</span> <span class="bullet">-cli</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  use_regex:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-cli-consul-0.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">cert</span> <span class="string">create</span> <span class="bullet">-server</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  use_regex:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-server-consul-*.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="string">&#123;&#123;</span> <span class="string">groups['server']</span> <span class="string">| length &#125;&#125;</span></span><br><span class="line"><span class="string"></span><span class="attr">client:</span></span><br><span class="line"><span class="attr">  command:</span> <span class="string">consul</span> <span class="string">tls</span> <span class="string">cert</span> <span class="string">create</span> <span class="bullet">-client</span> <span class="bullet">-days=&#123;&#123;</span> <span class="string">tls_days</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">  use_regex:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  file:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">dc1-client-consul-*.pem</span></span><br><span class="line"><span class="attr">  count:</span> <span class="string">&#123;&#123;</span> <span class="string">groups['client']</span> <span class="string">| length &#125;&#125;</span></span><br></pre></td></tr></table></figure></p><p>第一个步骤可以写成<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- name:</span> <span class="string">Check</span> <span class="string">if</span> <span class="string">the</span> <span class="string">file</span> <span class="string">already</span> <span class="string">exists</span></span><br><span class="line"><span class="attr">  find:</span> </span><br><span class="line"><span class="attr">    paths:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    file_type:</span> <span class="string">file</span></span><br><span class="line"><span class="attr">    use_regex:</span> <span class="string">"<span class="template-variable">&#123;&#123; out_var.use_regex &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">    patterns:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"<span class="template-variable">&#123;&#123; out_var.file_name_patterns &#125;&#125;</span>"</span></span><br><span class="line"><span class="attr">  register:</span> <span class="string">state</span></span><br></pre></td></tr></table></figure></p><p>第二个步骤可以写成,利用<code>with_sequence</code>来一个task执行多次，until控制非常麻烦，虽然能忽略错误，但是运行看着不友好<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: create tls file for &#123;&#123; out_var.type &#125;&#125;</span><br><span class="line">  command: &quot;&#123;&#123; out_var.command &#125;&#125;&quot;</span><br><span class="line">  with_sequence: start=0 end=&#123;&#123; out_var.count &#125;&#125;</span><br><span class="line">  when: state.matched &lt; out_var.count|int</span><br></pre></td></tr></table></figure></p><p>外层套一个loop_var<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- include_tasks: do.yml</span><br><span class="line">  loop_control:</span><br><span class="line">    loop_var: out_var</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123; type: &quot;ca&quot;, file_name_patterns: &apos;consul-agent-ca.pem&apos;, use_regex: &apos;no&apos;, command: &apos;consul tls ca create -days=&#123;&#123; tls_days &#125;&#125;&apos;, count: 1 &#125;</span><br><span class="line">    - &#123; type: &quot;cli&quot;, file_name_patterns: &apos;&#123;&#123; dc &#125;&#125;-cli-consul-0.pem&apos;, use_regex: &apos;no&apos;, command: &apos;consul tls cert create -cli -dc=&#123;&#123; dc &#125;&#125; -days=&#123;&#123; tls_days &#125;&#125;&apos;, count: 1 &#125;</span><br><span class="line">    - &#123; type: &quot;server&quot;, file_name_patterns: &apos;&#123;&#123; dc &#125;&#125;-server-consul-[0-9]+\.pem&apos;, use_regex: &apos;yes&apos;, command: &apos;consul tls cert create -server -dc=&#123;&#123; dc &#125;&#125; -days=&#123;&#123; tls_days &#125;&#125;&apos;, count: &quot;&#123;&#123; groups[&apos;server&apos;] | length &#125;&#125;&quot; &#125;</span><br><span class="line">    - &#123; type: &quot;client&quot;, file_name_patterns: &apos;&#123;&#123; dc &#125;&#125;-client-consul-[0-9]+\.pem&apos;, use_regex: &apos;yes&apos;, command: &apos;consul tls cert create -client -dc=&#123;&#123; dc &#125;&#125; -days=&#123;&#123; tls_days &#125;&#125;&apos;, count: &quot;&#123;&#123; groups[&apos;client&apos;] | length &#125;&#125;&quot; &#125;</span><br></pre></td></tr></table></figure></p><p>核心主要是第二个步骤实现幂等性，之前的好像是上面写的，当时的现象是多次运行后server和client的数量一直产生，并没有达到幂等性。因为每次<code>with_sequence</code>的次数都是期望数量的action次数。后面修改了下end减去匹配的文件数量，大致下面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: create tls file for &#123;&#123; out_var.type &#125;&#125;</span><br><span class="line">  command: &quot;&#123;&#123; out_var.command &#125;&#125;&quot;</span><br><span class="line">  with_sequence: start=0 end=&#123;&#123; out_var.count|int - state.matched &#125;&#125;</span><br><span class="line">  when: state.matched &lt; out_var.count|int</span><br></pre></td></tr></table></figure></p><p>但是这样第二次的时候end等于0，会报错<code>Ansible - condition on with_sequence loop with variable end that could be less than start</code></p><p>在 <a href="https://stackoverflow.com/questions/44724805/ansible-condition-on-with-sequence-loop-with-variable-end-that-could-be-less-t" target="_blank" rel="noopener">https://stackoverflow.com/questions/44724805/ansible-condition-on-with-sequence-loop-with-variable-end-that-could-be-less-t</a><br>搜索到了一个写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with_sequence: start=1 end=&#123;&#123;countvar.stdout|int if countvar.stdout|int &gt; 0 else 1&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>最终的步骤2为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- block:</span><br><span class="line">  - name: create tls file for &#123;&#123; out_var.type &#125;&#125;</span><br><span class="line">    command: &quot;&#123;&#123; out_var.command &#125;&#125;&quot;</span><br><span class="line">    with_sequence: start=1 end=&#123;&#123; out_var.count|int - state.matched if state.matched &lt; out_var.count|int else 1 &#125;&#125;</span><br><span class="line">  when: state.matched &lt; out_var.count|int</span><br></pre></td></tr></table></figure></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>现在来测试下，第一次执行生成证书<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@consul ansible]# ansible-playbook 02-tls.yml -k</span><br><span class="line">SSH password: </span><br><span class="line"></span><br><span class="line">PLAY [localhost] ***************************************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [tls : include_tasks] *****************************************************************************************************************************************************************************************************************</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">[root@consul ansible]# ll</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r-- 1 root root   84 Oct 11 20:18 ansible.cfg</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 consul-agent-ca-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1253 Oct 14 16:34 consul-agent-ca.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-cli-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1086 Oct 14 16:34 dc1-cli-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-client-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-client-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-client-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-client-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-2-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-2.pem</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 11 20:20 group_vars</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 inventory</span><br><span class="line">drwxr-xr-x 5 root root 4096 Oct 14 10:03 roles</span><br><span class="line">-rw-r--r-- 1 root root   61 Oct 14 10:40 03-server.yml</span><br><span class="line">-rw-r--r-- 1 root root   63 Oct 11 20:20 02-tls.yml</span><br></pre></td></tr></table></figure></p><p>证书已经生成完，执行第二次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@consul ansible]# ansible-playbook 02-tls.yml -k</span><br><span class="line">SSH password: </span><br><span class="line"></span><br><span class="line">PLAY [localhost] ***************************************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [tls : include_tasks] *****************************************************************************************************************************************************************************************************************</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">[root@consul ansible]# ll</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r-- 1 root root   84 Oct 11 20:18 ansible.cfg</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 consul-agent-ca-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1253 Oct 14 16:34 consul-agent-ca.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-cli-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1086 Oct 14 16:34 dc1-cli-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-client-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-client-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-client-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-client-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-2-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-2.pem</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 11 20:20 group_vars</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 inventory</span><br><span class="line">drwxr-xr-x 5 root root 4096 Oct 14 10:03 roles</span><br><span class="line">-rw-r--r-- 1 root root   61 Oct 14 10:40 03-server.yml</span><br><span class="line">-rw-r--r-- 1 root root   63 Oct 11 20:20 02-tls.yml</span><br></pre></td></tr></table></figure></p><p>可以看到证书并没有多生成，现在删除一个证书，再次执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@consul ansible]# rm -f dc1-server-consul-0*</span><br><span class="line">[root@consul ansible]# ansible-playbook test.yml -k</span><br><span class="line">SSH password: </span><br><span class="line"></span><br><span class="line">PLAY [localhost] ***************************************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [tls : include_tasks] *****************************************************************************************************************************************************************************************************************</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line">included: /root/ansible/roles/tls/tasks/do.yml for localhost</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">[root@consul ansible]# ll</span><br><span class="line">total 80</span><br><span class="line">-rw-r--r-- 1 root root   84 Oct 11 20:18 ansible.cfg</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 consul-agent-ca-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1253 Oct 14 16:34 consul-agent-ca.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-cli-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1086 Oct 14 16:34 dc1-cli-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-client-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-client-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-client-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-client-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:35 dc1-server-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1139 Oct 14 16:35 dc1-server-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root  227 Oct 14 16:34 dc1-server-consul-2-key.pem</span><br><span class="line">-rw-r--r-- 1 root root 1143 Oct 14 16:34 dc1-server-consul-2.pem</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 11 20:20 group_vars</span><br><span class="line">drwxr-xr-x 2 root root 4096 Oct 14 09:50 inventory</span><br><span class="line">drwxr-xr-x 5 root root 4096 Oct 14 10:03 roles</span><br><span class="line">-rw-r--r-- 1 root root   61 Oct 14 10:40 03-server.yml</span><br><span class="line">-rw-r--r-- 1 root root   63 Oct 11 20:20 02-tls.yml</span><br></pre></td></tr></table></figure><p>证书没有多生成，幂等性保证了</p><h3 id="场景2-–-index-to-index"><a href="#场景2-–-index-to-index" class="headerlink" title="场景2 – index to index"></a>场景2 – index to index</h3><p>这个场景主要是如何把index转成hostvars，这里实际上有个冷门的模板方法<br>利用<code>play_hosts.index(inventory_hostname)</code>配合set_fact实现，也就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: set_fact for filename</span><br><span class="line">  set_fact: </span><br><span class="line">    server_cert_index: &quot;&#123;&#123; &apos;&#123;0&#125;&apos;.format(play_hosts.index(inventory_hostname)) &#125;&#125;&quot;</span><br><span class="line">- name: copy cert</span><br><span class="line">  debug: msg=&#123;&#123; dc &#125;&#125;-&#123;&#123; role &#125;&#125;-consul-&#123;&#123; server_cert_index &#125;&#125;.pem</span><br></pre></td></tr></table></figure></p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@consul ansible]# ansible-playbook 03-server.yml -k</span><br><span class="line">SSH password: </span><br><span class="line"></span><br><span class="line">PLAY [server] ******************************************************************************************************************************************************************************************************************************</span><br><span class="line"></span><br><span class="line">TASK [server : create user for consul running] *********************************************************************************************************************************************************************************************</span><br><span class="line">ok: [172.19.0.3]</span><br><span class="line">ok: [172.19.0.4]</span><br><span class="line">ok: [172.19.0.5]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TASK [server : copy cert] ******************************************************************************************************************************************************************************************************************</span><br><span class="line">ok: [172.19.0.3] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;dc1-server-consul-0.pem&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [172.19.0.4] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;dc1-server-consul-1.pem&quot;</span><br><span class="line">&#125;</span><br><span class="line">ok: [172.19.0.5] =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;dc1-server-consul-2.pem&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PLAY RECAP *********************************************************************************************************************************************************************************************************************************</span><br><span class="line">172.19.0.3                 : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">172.19.0.4                 : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   </span><br><span class="line">172.19.0.5                 : ok=4    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://docs.ansible.com/ansible/latest/modules/find_module.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/modules/find_module.html</a></p><p><a href="https://docs.ansible.com/ansible/latest/plugins/lookup/sequence.html" target="_blank" rel="noopener">https://docs.ansible.com/ansible/latest/plugins/lookup/sequence.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;准备写上一篇文章的consul成ansible，在证书方面，cli和ca需要执行一次生成，而server和agent证书需要多次执行产生。另
      
    
    </summary>
    
    
      <category term="ansible" scheme="http://zhangguanzhang.github.io/categories/ansible/"/>
    
      <category term="心得" scheme="http://zhangguanzhang.github.io/categories/ansible/%E5%BF%83%E5%BE%97/"/>
    
    
      <category term="ansible" scheme="http://zhangguanzhang.github.io/tags/ansible/"/>
    
      <category term="consul" scheme="http://zhangguanzhang.github.io/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>高可用的SSL consul cluster实践</title>
    <link href="http://zhangguanzhang.github.io/2019/09/27/consul-tls/"/>
    <id>http://zhangguanzhang.github.io/2019/09/27/consul-tls/</id>
    <published>2019-09-27T11:36:53.000Z</published>
    <updated>2019-11-04T02:07:53.685Z</updated>
    
    <content type="html"><![CDATA[<p>同事dnsmasq + consul 整服务自动发现，但是不是tls且consul server是单点，而且进程启动用的nohub而不是systemd，这里查了下资料实践了下</p><p>部署过程已经写成了ansible，地址 <a href="https://github.com/zhangguanzhang/consul-tls-ansible" target="_blank" rel="noopener">https://github.com/zhangguanzhang/consul-tls-ansible</a></p><p>开了五台云主机，总体规划为下面，角色那有条件的可以分开，例如client单独一台。不分开的话得配置client的端口和server的分开，自己去探索</p><table><thead><tr><th style="text-align:left">IP</th><th style="text-align:center">Hostname</th><th style="text-align:center">CPU</th><th style="text-align:center">Memory</th><th style="text-align:center">role</th><th style="text-align:center">nodeName</th></tr></thead><tbody><tr><td style="text-align:left">172.19.0.3</td><td style="text-align:center">consul1</td><td style="text-align:center">4</td><td style="text-align:center">8G</td><td style="text-align:center">server</td><td style="text-align:center">172.19.0.3</td></tr><tr><td style="text-align:left">172.19.0.4</td><td style="text-align:center">consul2</td><td style="text-align:center">4</td><td style="text-align:center">8G</td><td style="text-align:center">server</td><td style="text-align:center">172.19.0.4</td></tr><tr><td style="text-align:left">172.19.0.5</td><td style="text-align:center">consul3</td><td style="text-align:center">4</td><td style="text-align:center">8G</td><td style="text-align:center">server</td><td style="text-align:center">172.19.0.5</td></tr><tr><td style="text-align:left">172.19.0.8</td><td style="text-align:center">consul4</td><td style="text-align:center">2</td><td style="text-align:center">4G</td><td style="text-align:center">client</td><td style="text-align:center">172.19.0.8</td></tr><tr><td style="text-align:left">172.19.0.9</td><td style="text-align:center">consul5</td><td style="text-align:center">2</td><td style="text-align:center">4G</td><td style="text-align:center">client</td><td style="text-align:center">172.19.0.9</td></tr></tbody></table><p>利用Consul提供的服务实现服务的注册与发现，需要建立Consul Cluster。在Consul方案中，每个提供服务的节点上都要部署和运行Consul的agent，所有运行Consul agent节点的集合构成Consul Cluster。Consul agent有两种运行模式：Server和Client。这里的Server和Client只是Consul集群层面的区分，与搭建在Cluster之上 的应用服务无关。以Server模式运行的Consul agent节点用于维护Consul集群的状态，官方建议每个Consul Cluster至少有3个或以上的运行在Server mode的Agent，Client节点不限。</p><p>相关端口<br>ports.<br>8300  – TCP agent server 使用的，用于处理其他agent发来的请求<br>8301  – TCP &amp; UDP agent使用此端口处理LAN中的gossip<br>8302  – TCP &amp; UDP agent server使用此端口处理WAN中的与其他server的gossip<br>8400  - 0.8后废弃，曾经是rpc客户端端口<br>8500  – TCP ui-port http API 因为https我们这里改为使用8501端口,也是cli使用的端口<br>8600  – TCP &amp; UDP dns解析</p><p>文章很多步骤基本上都是在<code>172.19.0.3</code>上执行的，文件到其他机器的copy和配置文件自行分发和目标主机上修改</p><h2 id="下载最新版本并解压"><a href="#下载最新版本并解压" class="headerlink" title="下载最新版本并解压"></a>下载最新版本并解压</h2><p>目前最新版是1.6.1，下载页面 <a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">https://www.consul.io/downloads.html</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip</span><br><span class="line">unzip -x consul_1.6.1_linux_amd64.zip</span><br><span class="line">mv consul /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">yum install -y epel-release </span><br><span class="line">yum install -y bash-completion</span><br></pre></td></tr></table></figure></p><h2 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h2><h3 id="step-1-创建ca"><a href="#step-1-创建ca" class="headerlink" title="step 1: 创建ca"></a>step 1: 创建ca</h3><p>为了简单起见，这里我使用Consul的内置TLS助手来创建基本的CA。您只需为数据中心创建一个CA。您应该在用于创建CA的同一服务器上生成所有证书。<br>ca默认五年，其他的证书默认1年，这里需要带参数<code>-days=</code>设置长点的日期<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consul tls ca create -days=36500</span><br><span class="line">==&gt; Saved consul-agent-ca.pem</span><br><span class="line">==&gt; Saved consul-agent-ca-key.pem</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>CA证书consul-agent-ca.pem包含验证Consul证书所需的公钥，因此必须分发给运行consul代理的每个节点。</li><li>CA密钥，consul-agent-ca-key.pem将用于为Consul节点签署证书，并且必须保持私有。拥有此密钥，任何人都可以将Consul作为受信任的服务器运行，并访问所有Consul数据，包括ACL令牌。</li></ul></blockquote><h3 id="step2-创建server角色的证书"><a href="#step2-创建server角色的证书" class="headerlink" title="step2: 创建server角色的证书"></a>step2: 创建server角色的证书</h3><p>这里数据中心默认名字为dc1，其他的自行选项赋值。在创建CA的同一台服务器上重复此过程，直到每台服务器都有一个单独的证书。该命令可以反复调用，它将自动增加证书和密钥号。您将需要将证书分发到服务器。<br>因为我有三个consul server，所以执行三次<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ consul tls cert create -server -dc=dc1 -days=36500</span><br><span class="line">==&gt; WARNING: Server Certificates grants authority to become a</span><br><span class="line">    server and access all state <span class="keyword">in</span> the cluster including root keys</span><br><span class="line">    and all ACL tokens. Do not distribute them to production hosts</span><br><span class="line">    that are not server nodes. Store them as securely as CA keys.</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-0.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-0-key.pem</span><br><span class="line">$ consul tls cert create -server -dc=dc1 -days=36500</span><br><span class="line">==&gt; WARNING: Server Certificates grants authority to become a</span><br><span class="line">    server and access all state <span class="keyword">in</span> the cluster including root keys</span><br><span class="line">    and all ACL tokens. Do not distribute them to production hosts</span><br><span class="line">    that are not server nodes. Store them as securely as CA keys.</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-1.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-1-key.pem</span><br><span class="line">$ consul tls cert create -server -dc=dc1 -days=36500</span><br><span class="line">==&gt; WARNING: Server Certificates grants authority to become a</span><br><span class="line">    server and access all state <span class="keyword">in</span> the cluster including root keys</span><br><span class="line">    and all ACL tokens. Do not distribute them to production hosts</span><br><span class="line">    that are not server nodes. Store them as securely as CA keys.</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-2.pem</span><br><span class="line">==&gt; Saved dc1-server-consul-2-key.pem</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>为了对Consul服务器进行身份验证，服务器会提供一种特殊的证书-包含server.dc1.consul在中<code>Subject Alternative Name</code>。如果启用<code>verify_server_hostname</code>，则仅允许提供此类证书的代理作为服务器引导。没有<code>verify_server_hostname = true</code>攻击者，可能会破坏Consul客户端代理，并以服务器身份重新启动该代理，以便访问您数据中心中的所有数据！这就是服务器证书很特殊的原因，只有服务器才应配置它们。</li></ul></blockquote><h3 id="step3-创建client角色的证书"><a href="#step3-创建client角色的证书" class="headerlink" title="step3: 创建client角色的证书"></a>step3: 创建client角色的证书</h3><p>在Consul 1.5.2中，您可以使用替代过程来自动将证书分发给客户端。要启用此新功能，请设置<code>auto_encrypt</code>。</p><p>您可以继续使用生成证书<code>consul tls cert create -client</code>并手动分发证书。对于需要高度保护的数据中心，仍然需要现有的工作流程。</p><p>如果您正在运行Consul 1.5.1或更早版本，则需要使用来为每个客户端创建单独的证书<code>consul tls cert create -client</code>。客户端证书也由您的CA签名，但是它们没有特殊性<code>Subject Alternative Name</code>，这意味着如果<code>verify_server_hostname</code>启用，则它们不能作为server角色启动。</p><p>这里我是高于1.5.2的，不需要为每个客户端创建证书，客户端只需要拥有<code>consul-agent-ca.pem</code>这个ca下，会自动从server获取证书存在内存中，并且不会持久保存。但是我测试了并没有成功，还是生成了证书<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ consul tls cert create -client -dc=dc1 -days=36500</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-0.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-0-key.pem</span><br><span class="line">$ consul tls cert create -client -dc=dc1 -days=36500</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-1.pem</span><br><span class="line">==&gt; Saved dc1-client-consul-1-key.pem</span><br></pre></td></tr></table></figure></p><h3 id="step4-创建cli的证书"><a href="#step4-创建cli的证书" class="headerlink" title="step4: 创建cli的证书"></a>step4: 创建cli的证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ consul tls cert create -cli -dc=dc1 -days=36500</span><br><span class="line">==&gt; Using consul-agent-ca.pem and consul-agent-ca-key.pem</span><br><span class="line">==&gt; Saved dc1-cli-consul-0.pem</span><br><span class="line">==&gt; Saved dc1-cli-consul-0-key.pem</span><br></pre></td></tr></table></figure><p>文件列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ll</span><br><span class="line">total 39088</span><br><span class="line">-rw-r--r-- 1 root root 39965581 Sep 13 04:30 consul_1.6.1_linux_amd64.zip</span><br><span class="line">-rw-r--r-- 1 root root      227 Oct 11 10:36 consul-agent-ca-key.pem</span><br><span class="line">-rw-r--r-- 1 root root     1249 Oct 11 10:36 consul-agent-ca.pem</span><br><span class="line">-rw-r--r-- 1 root root      227 Oct 11 11:47 dc1-cli-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root     1082 Oct 11 11:47 dc1-cli-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root      227 Oct 11 14:13 dc1-client-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root     1139 Oct 11 14:13 dc1-client-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root      227 Oct 11 17:35 dc1-client-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root     1143 Oct 11 17:35 dc1-client-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root      227 Oct 11 10:42 dc1-server-consul-0-key.pem</span><br><span class="line">-rw-r--r-- 1 root root     1139 Oct 11 10:42 dc1-server-consul-0.pem</span><br><span class="line">-rw-r--r-- 1 root root      227 Oct 11 10:43 dc1-server-consul-1-key.pem</span><br><span class="line">-rw-r--r-- 1 root root     1139 Oct 11 10:43 dc1-server-consul-1.pem</span><br><span class="line">-rw-r--r-- 1 root root      227 Oct 11 10:43 dc1-server-consul-2-key.pem</span><br><span class="line">-rw-r--r-- 1 root root     1139 Oct 11 10:43 dc1-server-consul-2.pem</span><br></pre></td></tr></table></figure></p><h2 id="server和client以及cli的配置"><a href="#server和client以及cli的配置" class="headerlink" title="server和client以及cli的配置"></a>server和client以及cli的配置</h2><p>配置优先级按以下顺序评估：</p><ul><li>命令行参数</li><li>环境变量</li><li>配置文件<br>加载配置时，Consul会以词法顺序从文件和目录中加载配置。例如，配置文件<code>basic_config.json</code>将在之前处理<code>extra_config.json</code>。配置可以采用HCL或JSON格式。HCL支持在Consul 1.0和更高版本中可用，现在需要在所有配置文件上使用.hcl或 .json扩展名以指定其格式。<br>consul默认从路径<code>/consul/config</code>读取配置信息，为了规范，配置文件我路径定义为<code>/etc/consul.d/</code>，数据目录定义为<code>/var/lib/consul/</code><br>所有flag的解释可以参考 <a href="https://www.cnblogs.com/sunsky303/p/9209024.html" target="_blank" rel="noopener">https://www.cnblogs.com/sunsky303/p/9209024.html</a><br>consul的参数可以命令行指定，也可以写json文件里，为了规范，命令行参数尽量少写，大体的配置信息都写json文件里。总体目录结构为下面，这里<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ tree /etc/consul.d/</span><br><span class="line">/etc/consul.d/</span><br><span class="line">├── cli</span><br><span class="line">│   ├── path.sh //cli需要的环境变量</span><br><span class="line">│   └── ssl</span><br><span class="line">│       ├── dc1-cli-consul-0-key.pem</span><br><span class="line">│       └── dc1-cli-consul-0.pem</span><br><span class="line">├── consul-agent-ca.pem</span><br><span class="line">└── server</span><br><span class="line">    ├── conf.json</span><br><span class="line">    └── ssl</span><br><span class="line">        ├── dc1-server-consul-0-key.pem //第一台server对应0的证书,第二个就是1</span><br><span class="line">        └── dc1-server-consul-0.pem     //同上，下面的配置文件里指定的文件名也要一致</span><br></pre></td></tr></table></figure></li></ul><p>server和client我们不用nohub，使用systemd跑，所以需要创建一个不能登陆的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd --system --home /etc/consul.d --shell /bin/false consul</span><br><span class="line">mkdir -p /var/lib/consul</span><br><span class="line">chown -R consul:consul /var/lib/consul</span><br></pre></td></tr></table></figure></p><p>consul命令的子命令和参数能够自动补全。启用自动补全功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">consul -autocomplete-install</span><br><span class="line">complete -C /usr/local/bin/consul consul</span><br></pre></td></tr></table></figure></p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>node_name注意按照文章最开始的标题写，每个不一样</p><p><code>/etc/consul.d/server/conf.json</code>配置内容为，缺省client_addr为127.0.0.1，如果是专门的机器跑consul这里需要修改为bind住<code>0.0.0.0</code>或者多网卡下专门指定的ip<br>关于bootstrap的解释见文档 <a href="https://www.consul.io/docs/install/bootstrapping.html" target="_blank" rel="noopener">https://www.consul.io/docs/install/bootstrapping.html</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data_dir"</span>: <span class="string">"/var/lib/server"</span>,</span><br><span class="line">    <span class="attr">"node_name"</span>: <span class="string">"172.19.0.3"</span>,</span><br><span class="line">    "bootstrap_expect": 3, //数量等同于期望组件集群的最小数量</span><br><span class="line">    "bind_addr": "172.19.0.3",</span><br><span class="line">    "client_addr": "0.0.0.0",</span><br><span class="line">    "datacenter": "dc1",</span><br><span class="line">    "domain": "consul",</span><br><span class="line">    "leave_on_terminate": true,</span><br><span class="line">    "log_level": "INFO",</span><br><span class="line">    "start_join": [</span><br><span class="line">        "172.19.0.3",</span><br><span class="line">        "172.19.0.4",</span><br><span class="line">        <span class="string">"172.19.0.5"</span></span><br><span class="line">    ],</span><br><span class="line">    "retry_interval": "2s",</span><br><span class="line">    "verify_incoming": true,</span><br><span class="line">    "verify_outgoing": true,</span><br><span class="line">    "verify_server_hostname": true,</span><br><span class="line">    "ca_file": "/etc/consul.d/consul-agent-ca.pem",</span><br><span class="line">    "cert_file": "/etc/consul.d/server/ssl/dc1-server-consul-0.pem",</span><br><span class="line">    "key_file": "/etc/consul.d/server/ssl/dc1-server-consul-0-key.pem",</span><br><span class="line">    "ports": &#123;</span><br><span class="line">      "http": -1,</span><br><span class="line">      "dns": 8600,</span><br><span class="line">      "https": 8501</span><br><span class="line">    &#125;,</span><br><span class="line">    "server": true,</span><br><span class="line">    "ui": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p>node_name注意按照文章最开始的标题写，每个不一样</p><p>client的配置<code>/etc/consul.d/client/conf.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"data_dir"</span>: <span class="string">"/var/lib/consul/client"</span>,</span><br><span class="line"> <span class="attr">"node_name"</span>: <span class="string">"172.19.0.8"</span>,</span><br><span class="line"> <span class="attr">"datacenter"</span>: <span class="string">"dc1"</span>,</span><br><span class="line"> <span class="attr">"bind_addr"</span>: <span class="string">"172.19.0.8"</span>,</span><br><span class="line"> <span class="attr">"client_addr"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line"> <span class="attr">"retry_join"</span>: [</span><br><span class="line">        <span class="string">"172.19.0.3"</span>,</span><br><span class="line">        <span class="string">"172.19.0.4"</span>,</span><br><span class="line">        <span class="string">"172.19.0.5"</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">"retry_interval"</span>: <span class="string">"3s"</span>,</span><br><span class="line"> <span class="attr">"rejoin_after_leave"</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="attr">"enable_script_checks"</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="attr">"verify_incoming"</span>: <span class="literal">true</span>,</span><br><span class="line"> <span class="attr">"ca_file"</span>: <span class="string">"/etc/consul.d/consul-agent-ca.pem"</span>,</span><br><span class="line"> <span class="attr">"cert_file"</span>: <span class="string">"/etc/consul.d/client/ssl/dc1-client-consul-0.pem"</span>,</span><br><span class="line"> <span class="attr">"key_file"</span>: <span class="string">"/etc/consul.d/client/ssl/dc1-client-consul-0-key.pem"</span>,</span><br><span class="line"> <span class="attr">"auto_encrypt"</span>: &#123;</span><br><span class="line">    <span class="attr">"tls"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ports"</span>: &#123;</span><br><span class="line">    <span class="attr">"http"</span>: <span class="number">-1</span>,</span><br><span class="line">    <span class="attr">"dns"</span>: <span class="number">8600</span>,</span><br><span class="line">    <span class="attr">"https"</span>: <span class="number">8501</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="cli"><a href="#cli" class="headerlink" title="cli"></a>cli</h3><p>consul当作cli使用的时候也得走tls,不然会下面报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ consul members</span><br><span class="line">Error retrieving members: Get http://127.0.0.1:8500/v1/agent/members?segment=_all: dial tcp 127.0.0.1:8500: connect: connection refused</span><br></pre></td></tr></table></figure></p><p>路径根据实际来，证书最好是绝对路径，cli默认操作localhost上运行的consul，例如能够使用<code>consul leave</code>会让当前的consul退出集群，环境变量我们写子配置文件<code>/etc/profile.d/consul-cli.sh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export CONSUL_HTTP_ADDR=https://localhost:8501</span><br><span class="line">export CONSUL_CACERT=/etc/consul.d/consul-agent-ca.pem</span><br><span class="line">export CONSUL_CLIENT_CERT=/etc/consul.d/cli/ssl/dc1-cli-consul-0.pem</span><br><span class="line">export CONSUL_CLIENT_KEY=/etc/consul.d/cli/ssl/dc1-cli-consul-0-key.pem</span><br></pre></td></tr></table></figure></p><ul><li><code>CONSUL_HTTP_ADDR</code>是Consul代理的URL，并设置的默认值 -http-addr。</li><li><code>CONSUL_CACERT</code>是CA证书的位置，并将设置为默认值-ca-file。</li><li><code>CONSUL_CLIENT_CERT</code>是CLI证书的位置，并将设置为默认值-client-cert。</li><li><code>CONSUL_CLIENT_KEY</code>是CLI键的位置，并将设置为默认值 -client-key。</li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>这里使用systemd而不是使用lowb的nohub啥的</p><p>server的systemd <code>/usr/lib/systemd/system/consul.service</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=&quot;Consul Startup process for server&quot;</span><br><span class="line">Documentation=https://www.consul.io/</span><br><span class="line">Requires=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">ConditionDirectoryNotEmpty=/etc/consul.d/server</span><br><span class="line">ConditionDirectoryNotEmpty=/etc/consul.d/server/ssl</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=consul</span><br><span class="line">Group=consul</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/consul</span><br><span class="line">PIDFile=/var/run/consul/consul.pid</span><br><span class="line">PermissionsStartOnly=true</span><br><span class="line">ExecStartPre=/usr/local/bin/consul validate /etc/consul.d/server</span><br><span class="line">ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/server</span><br><span class="line">ExecReload=/usr/local/bin/consul reload</span><br><span class="line">KillMode=process</span><br><span class="line">KillSignal=SIGTERM</span><br><span class="line">RestartSec=15s</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p><code>RestartSec</code>一定要配置，不然会报错<code>start request repeated too quickly for consul.service</code></p><p>设置的<code>bootstrap_expect</code>为3，所以server达到了3以上的时候才会选举</p><p>client启动参数为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=&quot;Consul Startup process for client&quot;</span><br><span class="line">Documentation=https://www.consul.io/</span><br><span class="line">Requires=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line">ConditionDirectoryNotEmpty=/etc/consul.d/server</span><br><span class="line">ConditionDirectoryNotEmpty=/etc/consul.d/server/ssl</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=consul</span><br><span class="line">Group=consul</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/consul</span><br><span class="line">PIDFile=/var/run/consul/consul.pid</span><br><span class="line">PermissionsStartOnly=true</span><br><span class="line">ExecStartPre=/usr/local/bin/consul validate /etc/consul.d/client</span><br><span class="line">ExecStart=/usr/local/bin/consul agent -config-dir=/etc/consul.d/client</span><br><span class="line">ExecReload=/usr/local/bin/consul reload</span><br><span class="line">KillMode=process</span><br><span class="line">KillSignal=SIGTERM</span><br><span class="line">RestartSec=15s</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ consul members</span><br><span class="line">Node         Address           Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">172.19.0.3   172.19.0.3:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.4   172.19.0.4:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.5   172.19.0.5:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.9   172.19.0.9:8301   alive   client  1.6.1  2         dc1  &lt;default&gt;</span><br><span class="line">172.19.0.8   172.19.0.8:8301   alive   client  1.6.1  2         dc1  &lt;default&gt;</span><br><span class="line">$ consul operator raft list-peers</span><br><span class="line">Node        ID                                    Address          State     Voter  RaftProtocol</span><br><span class="line">172.19.0.5  47f0ed67-7e66-6bd1-bbf3-4e9abeb09dc0  172.19.0.5:8300  leader    true   3</span><br><span class="line">172.19.0.3  664e8ada-f69b-2681-8b1c-d9fbf3d1ccb1  172.19.0.3:8300  follower  true   3</span><br><span class="line">172.19.0.4  d8ee2b50-9350-14e7-da5f-0b200acf80d0  172.19.0.4:8300  follower  true   3</span><br></pre></td></tr></table></figure><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><h3 id="集群外"><a href="#集群外" class="headerlink" title="集群外"></a>集群外</h3><p>client+服务发现的配置可以直接写<code>/etc/consul.d/client</code>下面json文件，例如mysql.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"services"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"r-3306-mysql"</span>,</span><br><span class="line">      <span class="attr">"tags"</span>: [</span><br><span class="line">        <span class="string">"slave-3306"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"172.16.0.2"</span>,</span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">3306</span>,</span><br><span class="line">      <span class="attr">"checks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          "args": ["echo"], //实际应该写健康检查脚本</span><br><span class="line">          "interval": "10s"</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>consul client相关日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019/10/11 16:28:20 [INFO] agent: Synced service &quot;r-3306-mysql&quot;</span><br><span class="line">2019/10/11 16:28:21 [INFO] agent: Synced node info</span><br><span class="line">2019/10/11 16:28:25 [INFO] agent: Synced check &quot;service:r-3306-mysql&quot;</span><br></pre></td></tr></table></figure><p>测试域名解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dig @172.19.0.3 -p 8600 r-3306-mysql.service.consul +short</span><br><span class="line">172.16.0.2</span><br></pre></td></tr></table></figure></p><p>可配置其他的dns server转发到consul上，参考文档 <a href="https://learn.hashicorp.com/consul/security-networking/forwarding" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/security-networking/forwarding</a></p><h3 id="k8s内部coredns转发到consul上"><a href="#k8s内部coredns转发到consul上" class="headerlink" title="k8s内部coredns转发到consul上"></a>k8s内部coredns转发到consul上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ consul members</span><br><span class="line">Node         Address           Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">172.19.0.3   172.19.0.3:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.4   172.19.0.4:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.5   172.19.0.5:8301   alive   server  1.6.1  2         dc1  &lt;all&gt;</span><br><span class="line">172.19.0.9   172.19.0.9:8301   alive   client  1.6.1  2         dc1  &lt;default&gt;</span><br><span class="line">172.19.0.8   172.19.0.8:8301   alive   client  1.6.1  2         dc1  &lt;default&gt;</span><br></pre></td></tr></table></figure><p>每个member都能解析域名，coredns的配置段为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 CoreAddons]# kubectl -n kube-system get cm coredns -o yaml --export</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        ready</span><br><span class="line">        health</span><br><span class="line">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="line">            pods insecure</span><br><span class="line">            fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153</span><br><span class="line">        forward . /etc/resolv.conf</span><br><span class="line">        cache 30</span><br><span class="line">        reload</span><br><span class="line">        loadbalance</span><br><span class="line">    &#125;</span><br><span class="line">    service.consul:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        cache 30</span><br><span class="line">        forward . 172.19.0.3:8600 172.19.0.4:8600 172.19.0.5:8600 172.19.0.8:8600 172.19.0.9:8600</span><br><span class="line">    &#125;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    ...</span><br><span class="line">  labels:</span><br><span class="line">    addonmanager.kubernetes.io/mode: EnsureExists</span><br><span class="line">  name: coredns</span><br><span class="line">  selfLink: /api/v1/namespaces/kube-system/configmaps/coredns</span><br></pre></td></tr></table></figure></p><p>跑一个指定版本带解析的工具pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat&lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox:1.28</span><br><span class="line">    command:</span><br><span class="line">      - sleep</span><br><span class="line">      - &quot;3600&quot;</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>测试解析，不影响集群的内部解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl exec -ti busybox -- nslookup r-3306-mysql.service.consul</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      r-3306-mysql.service.consul</span><br><span class="line">Address 1: 172.16.0.2</span><br><span class="line">$ kubectl exec -ti busybox -- nslookup kubernetes</span><br><span class="line">Server:    10.96.0.10</span><br><span class="line">Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes</span><br><span class="line">Address 1: 10.96.0.1 kubernetes.default.svc.cluster.local</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>tls步骤参考 <a href="https://learn.hashicorp.com/consul/security-networking/certificates" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/security-networking/certificates</a><br>官方部署指导: <a href="https://learn.hashicorp.com/consul/datacenter-deploy/deployment-guide" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/datacenter-deploy/deployment-guide</a><br>tls官方的文档(太过简陋可以不看) <a href="https://www.consul.io/docs/commands/tls/cert.html" target="_blank" rel="noopener">https://www.consul.io/docs/commands/tls/cert.html</a><br>集群搭建&amp;简单功能测试&amp;故障恢复: <a href="https://blog.csdn.net/chenchong08/article/details/77885989" target="_blank" rel="noopener">https://blog.csdn.net/chenchong08/article/details/77885989</a><br>token+openssl的tls: <a href="https://www.digitalocean.com/community/tutorials/how-to-secure-consul-with-tls-encryption-on-ubuntu-14-04" target="_blank" rel="noopener">https://www.digitalocean.com/community/tutorials/how-to-secure-consul-with-tls-encryption-on-ubuntu-14-04</a><br>ha consul(推荐阅读): <a href="https://learn.hashicorp.com/vault/operations/ops-vault-ha-consul" target="_blank" rel="noopener">https://learn.hashicorp.com/vault/operations/ops-vault-ha-consul</a><br>systemd字段: <a href="https://blog.csdn.net/biyubang6725/article/details/100961677" target="_blank" rel="noopener">https://blog.csdn.net/biyubang6725/article/details/100961677</a><br>consul k8s dns: <a href="https://www.consul.io/docs/platform/k8s/dns.html" target="_blank" rel="noopener">https://www.consul.io/docs/platform/k8s/dns.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;同事dnsmasq + consul 整服务自动发现，但是不是tls且consul server是单点，而且进程启动用的nohub而不是systemd，这里查了下资料实践了下&lt;/p&gt;
&lt;p&gt;部署过程已经写成了ansible，地址 &lt;a href=&quot;https://githu
      
    
    </summary>
    
    
      <category term="consul" scheme="http://zhangguanzhang.github.io/categories/consul/"/>
    
    
      <category term="consul" scheme="http://zhangguanzhang.github.io/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>修改源码更改prometheus的时区问题</title>
    <link href="http://zhangguanzhang.github.io/2019/09/05/prometheus-change-timezone/"/>
    <id>http://zhangguanzhang.github.io/2019/09/05/prometheus-change-timezone/</id>
    <published>2019-09-05T14:11:01.000Z</published>
    <updated>2019-12-06T02:53:59.729Z</updated>
    
    <content type="html"><![CDATA[<p>先说明一点，时区UTC不影响prometheus和grafana，这篇文章只是提供一个修改的思路和步骤</p><h2 id="日志时区修改"><a href="#日志时区修改" class="headerlink" title="日志时区修改"></a>日志时区修改</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>先起最新的prometheus挂载时区文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --net host -v /etc/localtime:/etc/localtime prom/prometheus</span><br><span class="line">level=info ts=2019-09-05T09:44:40.409Z caller=main.go:293 msg=&quot;no time or size retention was set so using the default time retention&quot; duration=15d</span><br><span class="line">level=info ts=2019-09-05T09:44:40.409Z caller=main.go:329 msg=&quot;Starting Prometheus&quot; version=&quot;(version=2.12.0, branch=HEAD, revision=43acd0e2e93f9f70c49b2267efa0124f1e759e86)&quot;</span><br><span class="line">level=info ts=2019-09-05T09:44:40.409Z caller=main.go:330 build_context=&quot;(go=go1.12.8, user=root@7a9dbdbe0cc7, date=20190818-13:53:16)&quot;</span><br><span class="line">level=info ts=2019-09-05T09:44:40.409Z caller=main.go:331 host_details=&quot;(Linux 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 centos7 (none))&quot;</span><br><span class="line">level=info ts=2019-09-05T09:44:40.409Z caller=main.go:332 fd_limits=&quot;(soft=1048576, hard=1048576)&quot;</span><br><span class="line">level=info ts=2019-09-05T09:44:40.409Z caller=main.go:333 vm_limits=&quot;(soft=unlimited, hard=unlimited)&quot;</span><br></pre></td></tr></table></figure></p><p>发现logFormat还是UTC时区，去官方github上<code>https://github.com/prometheus/prometheus/blob/master/cmd/prometheus/main.go</code>查找，按照关键字<code>Starting Prometheus</code>找到下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">level.Info(logger).Log(&quot;msg&quot;, &quot;Starting Prometheus&quot;, &quot;version&quot;, version.Info())</span><br></pre></td></tr></table></figure></p><p>然后查找logger</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger := promlog.New(&amp;cfg.promlogConfig)</span><br></pre></td></tr></table></figure><p>promlog是官方另一个仓库下的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;github.com/prometheus/common/promlog&quot;</span><br></pre></td></tr></table></figure></p><p>包里我们可以看到默认使用utc时区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var (</span><br><span class="line">// This timestamp format differs from RFC3339Nano by using .000 instead</span><br><span class="line">// of .999999999 which changes the timestamp from 9 variable to 3 fixed</span><br><span class="line">// decimals (.130 instead of .130987456).</span><br><span class="line">timestampFormat = log.TimestampFormat(</span><br><span class="line">func() time.Time &#123; return time.Now().UTC() &#125;,</span><br><span class="line">&quot;2006-01-02T15:04:05.000Z07:00&quot;,</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">...</span><br><span class="line">func New(config *Config) log.Logger &#123;</span><br><span class="line">var l log.Logger</span><br><span class="line">...</span><br><span class="line">l = log.With(l, &quot;ts&quot;, timestampFormat, &quot;caller&quot;, log.DefaultCaller)</span><br><span class="line">return l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>默认使用timestampFormat，log.With方法可以外部使用,但是分析里面逻辑是append<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type context struct &#123;</span><br><span class="line">logger    Logger</span><br><span class="line">keyvals   []interface&#123;&#125;</span><br><span class="line">hasValuer bool</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们无法通过下面类似的再赋值的方法设置logger<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">timestampFormat = log.TimestampFormat(</span><br><span class="line">        func() time.Time &#123; return time.Now().Local() &#125;,</span><br><span class="line">        &quot;2006-01-02T15:04:05.000Z07:00&quot;,</span><br><span class="line">    )</span><br><span class="line">...</span><br><span class="line">logger = log.With(logger, &quot;ts&quot;, timestampFormat, &quot;caller&quot;, log.DefaultCaller)</span><br></pre></td></tr></table></figure></p><p>可以跳转到包函数里看到log.With的深层调用类似于<code>context.WithValue</code>一样，并且没有delete方法，修改官方的包也不现实。为此只能在New的时候设置好，先看<code>promlog.New</code>方法，在文件<code>github.com/prometheus/common/promlog/log.go</code>里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func New(config *Config) log.Logger &#123;</span><br><span class="line">var l log.Logger</span><br><span class="line">if config.Format.s == &quot;logfmt&quot; &#123;</span><br><span class="line">l = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))</span><br><span class="line">&#125; else &#123;</span><br><span class="line">l = log.NewJSONLogger(log.NewSyncWriter(os.Stderr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l = level.NewFilter(l, config.Level.o)</span><br><span class="line">l = log.With(l, &quot;ts&quot;, log.DefaultTimestampUTC, &quot;caller&quot;, log.DefaultCaller)</span><br><span class="line">return l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>里面的<code>config.Format.s</code>的s字段无法外部引用，同理<code>config.Level.o</code>，因为我们是取值做比较，config.Format实现有一个获取s的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func (f *AllowedFormat) String() string &#123;</span><br><span class="line">return f.s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以<code>if config.Format.s == &quot;logfmt&quot;</code>可以写成下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if config.Format.String() == &quot;logfmt&quot; &#123;</span><br></pre></td></tr></table></figure></p><p>同理<code>config.Level.o</code>借助<code>config.Level.String()</code>获取<code>config.Level.s</code>，然后方法config.Level.Set()里的逻辑去case s间接获取<code>config.Level.o</code></p><p>下面是最终的代码，替换掉<code>logger := promlog.New(&amp;cfg.promlogConfig)</code>。官方说UTC防止夏令时误差，另外也怕乱写flag干扰了官方自己的flag解析逻辑，这里用环境变量来当作开关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@centos7 prometheus]# cp cmd/prometheus/main.go&#123;,.bak&#125;</span><br><span class="line">[root@centos7 prometheus]# diff cmd/prometheus/main.go*</span><br><span class="line">261,293c261</span><br><span class="line">&lt;         var logger log.Logger</span><br><span class="line">&lt;         if os.Getenv(&quot;LocalTZ&quot;) != &quot;&quot; &#123;</span><br><span class="line">&lt;             logger = func(config *promlog.Config) log.Logger &#123;</span><br><span class="line">&lt;                 var (</span><br><span class="line">&lt;                     l log.Logger</span><br><span class="line">&lt;                     le level.Option</span><br><span class="line">&lt;                 )</span><br><span class="line">&lt;                 if config.Format.String() == &quot;logfmt&quot; &#123;</span><br><span class="line">&lt;                     l = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))</span><br><span class="line">&lt;                 &#125; else &#123;</span><br><span class="line">&lt;                     l = log.NewJSONLogger(log.NewSyncWriter(os.Stderr))</span><br><span class="line">&lt;                 &#125;</span><br><span class="line">&lt; </span><br><span class="line">&lt;                 switch config.Level.String() &#123;</span><br><span class="line">&lt;                 case &quot;debug&quot;:</span><br><span class="line">&lt;                     le = level.AllowDebug()</span><br><span class="line">&lt;                 case &quot;info&quot;:</span><br><span class="line">&lt;                     le = level.AllowInfo()</span><br><span class="line">&lt;                 case &quot;warn&quot;:</span><br><span class="line">&lt;                     le = level.AllowWarn()</span><br><span class="line">&lt;                 case &quot;error&quot;:</span><br><span class="line">&lt;                     le = level.AllowError()</span><br><span class="line">&lt;                 &#125;</span><br><span class="line">&lt;                 l = level.NewFilter(l, le)</span><br><span class="line">&lt;                 l = log.With(l, &quot;ts&quot;, log.TimestampFormat(</span><br><span class="line">&lt;                     func() time.Time &#123; return time.Now().Local() &#125;,</span><br><span class="line">&lt;                     &quot;2006-01-02T15:04:05.000Z07:00&quot;,</span><br><span class="line">&lt;                 ), &quot;caller&quot;, log.DefaultCaller)</span><br><span class="line">&lt;                 return l</span><br><span class="line">&lt;             &#125;(&amp;cfg.promlogConfig)</span><br><span class="line">&lt;         &#125; else &#123;</span><br><span class="line">&lt;             logger = promlog.New(&amp;cfg.promlogConfig)</span><br><span class="line">&lt;         &#125;</span><br><span class="line">---</span><br><span class="line">&gt; logger := promlog.New(&amp;cfg.promlogConfig)</span><br></pre></td></tr></table></figure></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>这里我是在centos7上编译的，makefile有点复杂看不明白，这里仅仅提供一个思路<br>自行安装golang，我用的是golang1.13，自行设置GOPATH和GOPROXY，golang的版本最好先去看看官方tag版本里makefile或者changelog里该release版本使用的golang版本，不一致可能运行时出错了也不好反馈issue。<br>golang1.13以下只能配置一个GOPROXY，后面编译如果超时的话替换下下面可用的proxy，例如阿里的在我们这就无法使用，而cn则云上偶尔抽风<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GO111MODULE=on</span><br><span class="line">GOPROXY=https://goproxy.cn,https://mirrors.aliyun.com/goproxy/,https://goproxy.io,https://athens.azurefd.net,direct</span><br><span class="line">GOPATH=/root/go/</span><br></pre></td></tr></table></figure></p><p>下载代码，根据开发规范，master代码包含最新提交的代码，我们得修改release的，所以得去tag看下版本，当前是<code>v2.14.0</code>版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/prometheus/prometheus.git -b v2.14.0 $GOPATH/src/prometheus</span><br></pre></td></tr></table></figure></p><p>修改后加入变量和设置logger的部分后编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/prometheus</span><br><span class="line"><span class="comment">#编译得到 prometheus</span></span><br><span class="line">CGO_ENABLED=0 go build ./cmd/prometheus</span><br><span class="line"><span class="comment">#编译得到 promtool</span></span><br><span class="line">CGO_ENABLED=0 go build ./cmd/promtool</span><br></pre></td></tr></table></figure><p>喜欢二进制的朋友后面这步的docker可以不用看了</p><h3 id="构建docker镜像"><a href="#构建docker镜像" class="headerlink" title="构建docker镜像"></a>构建docker镜像</h3><p>修改Dockerfile，dockerfile前两行架构根据自己编译环境修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARG ARCH=&quot;amd64&quot;</span><br><span class="line">ARG OS=&quot;linux&quot;</span><br></pre></td></tr></table></figure></p><p>最终修改的地方为下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 prometheus]# cp Dockerfile&#123;,.bak&#125;</span><br><span class="line">[root@centos7 prometheus]# vi Dockerfile</span><br><span class="line">[root@centos7 prometheus]# diff Dockerfil*</span><br><span class="line">3,4c3,4</span><br><span class="line">&lt; FROM quay.azk8s.cn/prometheus/busybox-$&#123;OS&#125;-$&#123;ARCH&#125;:latest</span><br><span class="line">&lt; LABEL maintainer=&quot;zhangguanzhang@qq.com&quot;</span><br><span class="line">---</span><br><span class="line">&gt; FROM quay.io/prometheus/busybox-$&#123;OS&#125;-$&#123;ARCH&#125;:latest</span><br><span class="line">&gt; LABEL maintainer=&quot;The Prometheus Authors &lt;prometheus-developers@googlegroups.com&gt;&quot;</span><br><span class="line">8,9c8,9</span><br><span class="line">&lt; COPY prometheus        /bin/prometheus</span><br><span class="line">&lt; COPY promtool          /bin/promtool</span><br><span class="line">---</span><br><span class="line">&gt; COPY .build/$&#123;OS&#125;-$&#123;ARCH&#125;/prometheus        /bin/prometheus</span><br><span class="line">&gt; COPY .build/$&#123;OS&#125;-$&#123;ARCH&#125;/promtool          /bin/promtool</span><br></pre></td></tr></table></figure></p><p>构建docker镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 prometheus]# docker build -t zhangguanzhang/prometheus-local-tz .</span><br><span class="line">Sending build context to Docker daemon  293.7MB</span><br><span class="line">Step 1/19 : ARG ARCH=&quot;amd64&quot;</span><br><span class="line">Step 2/19 : ARG OS=&quot;linux&quot;</span><br><span class="line">Step 3/19 : FROM quay.azk8s.cn/prometheus/busybox-$&#123;OS&#125;-$&#123;ARCH&#125;:latest</span><br><span class="line"> ---&gt; a130381627cc</span><br><span class="line">Step 4/19 : LABEL maintainer=&quot;zhangguanzhang@qq.com&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; a068e6a45287</span><br><span class="line">Step 5/19 : ARG ARCH=&quot;amd64&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 6505ef521adc</span><br><span class="line">Step 6/19 : ARG OS=&quot;linux&quot;</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 095340c78781</span><br><span class="line">Step 7/19 : COPY prometheus        /bin/prometheus</span><br><span class="line"> ---&gt; 79b168131d07</span><br><span class="line">Step 8/19 : COPY promtool          /bin/promtool</span><br><span class="line"> ---&gt; 3e33c1426f1a</span><br><span class="line">Step 9/19 : COPY documentation/examples/prometheus.yml  /etc/prometheus/prometheus.yml</span><br><span class="line"> ---&gt; 3c52a921a987</span><br><span class="line">Step 10/19 : COPY console_libraries/                     /usr/share/prometheus/console_libraries/</span><br><span class="line"> ---&gt; 2a45779cac8c</span><br><span class="line">Step 11/19 : COPY consoles/                              /usr/share/prometheus/consoles/</span><br><span class="line"> ---&gt; 61bcb1331d2d</span><br><span class="line">Step 12/19 : RUN ln -s /usr/share/prometheus/console_libraries /usr/share/prometheus/consoles/ /etc/prometheus/</span><br><span class="line"> ---&gt; Running in 903bd335e5ce</span><br><span class="line">Removing intermediate container 903bd335e5ce</span><br><span class="line"> ---&gt; 9271991e65b8</span><br><span class="line">Step 13/19 : RUN mkdir -p /prometheus &amp;&amp;     chown -R nobody:nogroup etc/prometheus /prometheus</span><br><span class="line"> ---&gt; Running in 198813fcbeda</span><br><span class="line">Removing intermediate container 198813fcbeda</span><br><span class="line"> ---&gt; eab302d879ec</span><br><span class="line">Step 14/19 : USER       nobody</span><br><span class="line"> ---&gt; Running in 7ab7eb05eafa</span><br><span class="line">Removing intermediate container 7ab7eb05eafa</span><br><span class="line"> ---&gt; addfdf87059b</span><br><span class="line">Step 15/19 : EXPOSE     9090</span><br><span class="line"> ---&gt; Running in 5878d52b1b35</span><br><span class="line">Removing intermediate container 5878d52b1b35</span><br><span class="line"> ---&gt; 55b458345a79</span><br><span class="line">Step 16/19 : VOLUME     [ &quot;/prometheus&quot; ]</span><br><span class="line"> ---&gt; Running in cc052e89a0fd</span><br><span class="line">Removing intermediate container cc052e89a0fd</span><br><span class="line"> ---&gt; bc33a7a6a10d</span><br><span class="line">Step 17/19 : WORKDIR    /prometheus</span><br><span class="line"> ---&gt; Running in 6ed7db542fae</span><br><span class="line">Removing intermediate container 6ed7db542fae</span><br><span class="line"> ---&gt; 362ed0911712</span><br><span class="line">Step 18/19 : ENTRYPOINT [ &quot;/bin/prometheus&quot; ]</span><br><span class="line"> ---&gt; Running in 76c4815fac4b</span><br><span class="line">Removing intermediate container 76c4815fac4b</span><br><span class="line"> ---&gt; 56546f3b3e5c</span><br><span class="line">Step 19/19 : CMD        [ &quot;--config.file=/etc/prometheus/prometheus.yml&quot;,              &quot;--storage.tsdb.path=/prometheus&quot;,              &quot;--web.console.libraries=/usr/share/prometheus/console_libraries&quot;,              &quot;--web.console.templates=/usr/share/prometheus/consoles&quot; ]</span><br><span class="line"> ---&gt; Running in ebbdbce5813c</span><br><span class="line">Removing intermediate container ebbdbce5813c</span><br><span class="line"> ---&gt; a601e70e97b7</span><br><span class="line">Successfully built a601e70e97b7</span><br><span class="line">Successfully tagged zhangguanzhang/prometheus-local-tz:latest</span><br></pre></td></tr></table></figure></p><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 prometheus]# docker run --rm --net host  -v /etc/localtime:/etc/localtime  zhangguanzhang/prometheus-local-tz</span><br><span class="line">level=info ts=2019-09-05T14:07:58.359Z caller=main.go:328 msg=&quot;no time or size retention was set so using the default time retention&quot; duration=15d</span><br><span class="line">level=info ts=2019-09-05T14:07:58.359Z caller=main.go:364 msg=&quot;Starting Prometheus&quot; version=&quot;(version=, branch=, revision=)&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.359Z caller=main.go:365 build_context=&quot;(go=go1.13, user=, date=)&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.359Z caller=main.go:366 host_details=&quot;(Linux 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 centos7 (none))&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.359Z caller=main.go:367 fd_limits=&quot;(soft=1048576, hard=1048576)&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.359Z caller=main.go:368 vm_limits=&quot;(soft=unlimited, hard=unlimited)&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.361Z caller=main.go:689 msg=&quot;Starting TSDB ...&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.361Z caller=web.go:450 component=web msg=&quot;Start listening for connections&quot; address=0.0.0.0:9090</span><br><span class="line">level=info ts=2019-09-05T14:07:58.390Z caller=head.go:509 component=tsdb msg=&quot;replaying WAL, this may take awhile&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.391Z caller=head.go:557 component=tsdb msg=&quot;WAL segment loaded&quot; segment=0 maxSegment=0</span><br><span class="line">level=info ts=2019-09-05T14:07:58.394Z caller=main.go:704 fs_type=XFS_SUPER_MAGIC</span><br><span class="line">level=info ts=2019-09-05T14:07:58.394Z caller=main.go:705 msg=&quot;TSDB started&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:58.394Z caller=main.go:775 msg=&quot;Loading configuration file&quot; filename=/etc/prometheus/prometheus.yml</span><br><span class="line">level=info ts=2019-09-05T14:07:58.904Z caller=main.go:803 msg=&quot;Completed loading of configuration file&quot; filename=/etc/prometheus/prometheus.yml</span><br><span class="line">level=info ts=2019-09-05T14:07:58.904Z caller=main.go:658 msg=&quot;Server is ready to receive web requests.&quot;</span><br><span class="line">^Clevel=warn ts=2019-09-05T14:07:59.097Z caller=main.go:533 msg=&quot;Received SIGTERM, exiting gracefully...&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=main.go:558 msg=&quot;Stopping scrape discovery manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=main.go:572 msg=&quot;Stopping notify discovery manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=main.go:594 msg=&quot;Stopping scrape manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=manager.go:814 component=&quot;rule manager&quot; msg=&quot;Stopping rule manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=manager.go:820 component=&quot;rule manager&quot; msg=&quot;Rule manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=main.go:554 msg=&quot;Scrape discovery manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=main.go:568 msg=&quot;Notify discovery manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=main.go:588 msg=&quot;Scrape manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=notifier.go:602 component=notifier msg=&quot;Stopping notification manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.098Z caller=main.go:759 msg=&quot;Notifier manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T14:07:59.100Z caller=main.go:771 msg=&quot;See you next time!&quot;</span><br><span class="line">[root@centos7 prometheus]# docker run --rm --net host -e LocalTZ=true  -v /etc/localtime:/etc/localtime  zhangguanzhang/prometheus-local-tz</span><br><span class="line">level=info ts=2019-09-05T22:08:03.597+08:00 caller=main.go:328 msg=&quot;no time or size retention was set so using the default time retention&quot; duration=15d</span><br><span class="line">level=info ts=2019-09-05T22:08:03.598+08:00 caller=main.go:364 msg=&quot;Starting Prometheus&quot; version=&quot;(version=, branch=, revision=)&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.598+08:00 caller=main.go:365 build_context=&quot;(go=go1.13, user=, date=)&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.598+08:00 caller=main.go:366 host_details=&quot;(Linux 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 centos7 (none))&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.598+08:00 caller=main.go:367 fd_limits=&quot;(soft=1048576, hard=1048576)&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.598+08:00 caller=main.go:368 vm_limits=&quot;(soft=unlimited, hard=unlimited)&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.602+08:00 caller=main.go:689 msg=&quot;Starting TSDB ...&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.604+08:00 caller=web.go:450 component=web msg=&quot;Start listening for connections&quot; address=0.0.0.0:9090</span><br><span class="line">level=info ts=2019-09-05T22:08:03.614+08:00 caller=head.go:509 component=tsdb msg=&quot;replaying WAL, this may take awhile&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.616+08:00 caller=head.go:557 component=tsdb msg=&quot;WAL segment loaded&quot; segment=0 maxSegment=0</span><br><span class="line">level=info ts=2019-09-05T22:08:03.618+08:00 caller=main.go:704 fs_type=XFS_SUPER_MAGIC</span><br><span class="line">level=info ts=2019-09-05T22:08:03.618+08:00 caller=main.go:705 msg=&quot;TSDB started&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:03.618+08:00 caller=main.go:775 msg=&quot;Loading configuration file&quot; filename=/etc/prometheus/prometheus.yml</span><br><span class="line">level=info ts=2019-09-05T22:08:04.125+08:00 caller=main.go:803 msg=&quot;Completed loading of configuration file&quot; filename=/etc/prometheus/prometheus.yml</span><br><span class="line">level=info ts=2019-09-05T22:08:04.126+08:00 caller=main.go:658 msg=&quot;Server is ready to receive web requests.&quot;</span><br><span class="line">^Clevel=warn ts=2019-09-05T22:08:04.269+08:00 caller=main.go:533 msg=&quot;Received SIGTERM, exiting gracefully...&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:558 msg=&quot;Stopping scrape discovery manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:572 msg=&quot;Stopping notify discovery manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:594 msg=&quot;Stopping scrape manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=manager.go:814 component=&quot;rule manager&quot; msg=&quot;Stopping rule manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=manager.go:820 component=&quot;rule manager&quot; msg=&quot;Rule manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=notifier.go:602 component=notifier msg=&quot;Stopping notification manager...&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:759 msg=&quot;Notifier manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:554 msg=&quot;Scrape discovery manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:568 msg=&quot;Notify discovery manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:588 msg=&quot;Scrape manager stopped&quot;</span><br><span class="line">level=info ts=2019-09-05T22:08:04.269+08:00 caller=main.go:771 msg=&quot;See you next time!&quot;</span><br><span class="line">[root@centos7 prometheus]# date</span><br><span class="line">Thu Sep  5 22:08:11 CST 2019</span><br></pre></td></tr></table></figure><p>测试成功，哪位看懂了官方的makefile逻辑可以告诉下我，我修改下构建过程</p><h2 id="web-ui"><a href="#web-ui" class="headerlink" title="web ui"></a>web ui</h2><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>主要文件为<code>web/ui/static/js/graph/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var date = &apos;&lt;span class=&quot;date&quot;&gt;&apos; + new Date(x * 1000).toUTCString() + &apos;&lt;/span&gt;&apos;;</span><br></pre></td></tr></table></figure><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var date = &apos;&lt;span class=&quot;date&quot;&gt;&apos; + new Date(x * 1000).toString() + &apos;&lt;/span&gt;&apos;;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return self.endDate.data(&apos;DateTimePicker&apos;).date();</span><br></pre></td></tr></table></figure><p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return self.endDate.data(&apos;DateTimePicker&apos;).getLocalDate().getTime();</span><br></pre></td></tr></table></figure></p><p>最终差异为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 prometheus]# vi web/ui/static/js/graph/index.js </span><br><span class="line">[root@centos7 prometheus]# diff web/ui/static/js/graph/index.js &lt;(curl -s https://raw.githubusercontent.com/prometheus/prometheus/master/web/ui/static/js/graph/index.js)</span><br><span class="line">400c400</span><br><span class="line">&lt;   return self.endDate.data(&apos;DateTimePicker&apos;).getLocalDate().getTime();</span><br><span class="line">---</span><br><span class="line">&gt;   return self.endDate.data(&apos;DateTimePicker&apos;).date();</span><br><span class="line">765d764</span><br><span class="line">&lt;       var date = &apos;&lt;span class=&quot;date&quot;&gt;&apos; + new Date(x * 1000).toString() + &apos;&lt;/span&gt;&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="编译-1"><a href="#编译-1" class="headerlink" title="编译"></a>编译</h3><p>进入到项目目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 prometheus]# make assets</span><br><span class="line">&gt;&gt; writing assets</span><br><span class="line">cd /root/go/src/prometheus/web/ui &amp;&amp; GO111MODULE=on go generate -x -v  -mod=vendor</span><br><span class="line">assets_vfsdata.go</span><br><span class="line">doc.go</span><br><span class="line">go run -mod=vendor -tags=dev assets_generate.go</span><br><span class="line">writing assets_vfsdata.go</span><br><span class="line">[root@centos7 prometheus]# CGO_ENABLED=0 go build ./cmd/prometheus</span><br></pre></td></tr></table></figure></p><p>打包后运行查看<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/k8s/prometheus-change-js-timezone.png" alt="web-js-time"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先说明一点，时区UTC不影响prometheus和grafana，这篇文章只是提供一个修改的思路和步骤&lt;/p&gt;
&lt;h2 id=&quot;日志时区修改&quot;&gt;&lt;a href=&quot;#日志时区修改&quot; class=&quot;headerlink&quot; title=&quot;日志时区修改&quot;&gt;&lt;/a&gt;日志时区修改&lt;/h
      
    
    </summary>
    
    
      <category term="prometheus" scheme="http://zhangguanzhang.github.io/categories/prometheus/"/>
    
      <category term="golang" scheme="http://zhangguanzhang.github.io/categories/prometheus/golang/"/>
    
    
      <category term="prometheus" scheme="http://zhangguanzhang.github.io/tags/prometheus/"/>
    
      <category term="timezone" scheme="http://zhangguanzhang.github.io/tags/timezone/"/>
    
  </entry>
  
  <entry>
    <title>gobot控制esp8266</title>
    <link href="http://zhangguanzhang.github.io/2019/08/24/gobot-build/"/>
    <id>http://zhangguanzhang.github.io/2019/08/24/gobot-build/</id>
    <published>2019-08-24T10:12:36.000Z</published>
    <updated>2019-08-31T15:49:50.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p>gobot官网是Arduino的demo，官网上看了下支持esp8266，整好之前整wifi攻击器的时候有就玩了下。我是在windows编译的，没有8266的话自己去淘宝上一块儿node-mcu+数据线(本质上就是个带串口和排针的esp8266-12，买驱动是CH340G的，就是usb口旁边有个长条形ic，方的是cp2102不稳定会导致windows蓝屏)</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>用goland写代码，不推荐vscode写golang，自行安装golang(记得设置好环境变量)和goland，现在golang最新版本是12.9<br>整个demo分为两部分，客户端gobot去设置和控制esp8266，8266是烧录好firmata的固件。firmata有写好的支持的硬件开发板的各种协议驱动:i2c,蓝牙，tcp，串口。gobot通过参数向硬件端发送行为和获取数据，硬件端来初始化gpio去驱动硬件模块儿</p><h3 id="8266固件"><a href="#8266固件" class="headerlink" title="8266固件"></a>8266固件</h3><p>需要Arduino IDE来编辑和编译以及下载</p><h4 id="Arduino-IDE准备"><a href="#Arduino-IDE准备" class="headerlink" title="Arduino IDE准备"></a>Arduino IDE准备</h4><p>官网下载，目前最新的是1.8.9，我下载的是免安装的，打开后</p><ul><li><code>文件</code>–<code>首选项</code>–<code>附加开发板管理器网址</code>–粘贴<code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code>,</li><li><code>工具</code>–<code>开发板</code>–<code>开发板管理器</code>–此时会下载上面的json(需要梯子)，在搜索框里输入esp8266安装<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/gobot/esp8266/001.png" alt="board-esp8266.jpg"></li><li><code>工具</code>–<code>管理库</code>–<code>开发板管理器</code>–在搜索框里输入<code>firmata</code>安装<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/gobot/esp8266/002.png" alt="board-firmata.jpg"></li><li>打开网页 <a href="http://firmatabuilder.com/" target="_blank" rel="noopener">http://firmatabuilder.com/</a> ，因为8266是个wifi模块儿，这里链接类型和使能的驱动为下图这些，如果想把ip固定住在局域网内使用可以写上ip<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/gobot/esp8266/003.png" alt="web-firmata.jpg"></li><li>网页上移动到最下面输入文件名点击下载，解压后得到一个<code>ino</code>的Arduino IDE项目文件，用Arduino IDE打开它，然后在<code>工具</code>–<code>开发板</code>里选择<code>Node MCU 1.0</code></li><li>安装<code>CH340</code>驱动，<a href="https://sparks.gogo.co.nz/ch340.html" target="_blank" rel="noopener">https://sparks.gogo.co.nz/ch340.html</a> 点击<code>Download the Windows CH340 Driver</code>下载解压了以管理员身份运行，记得关闭windows的自带的那个def啥安全再安装</li><li>硬件插上usb口后等待windows弹出的驱动文件正在安装完成消失后，在ide里<code>工具</code>–<code>端口</code>里选择正确的COM口</li><li><p>代码修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define SERIAL_DEBUG  //取消注释</span><br><span class="line">char wpa_passphrase[] = &quot;xxxxx&quot;; 自己附近的wifi密码和ssid名字</span><br><span class="line">// 下面两行加在`void printWiFiStatus()`函数的` DEBUG_PRINTLN(ip);`下面</span><br><span class="line">  DEBUG_PRINT(&quot;Local Port: &quot;);</span><br><span class="line">  DEBUG_PRINTLN(NETWORK_PORT);</span><br></pre></td></tr></table></figure></li><li><p>点击<code>项目</code>–<code>上传</code>,下面出现<code>Hard press RST</code>啥的就可以打开串口下载软件然后按下8266板子上的rst重启，在串口软件里就可以看到输出信息了<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/gobot/esp8266/004.png" alt="board-uart.jpg"></p></li></ul><h4 id="golang代码"><a href="#golang代码" class="headerlink" title="golang代码"></a>golang代码</h4><p>goland新加项目选中go module，proxy写个代理地址，例如: <a href="https://mirrors.aliyun.com/goproxy/、https://goproxy.io、" target="_blank" rel="noopener">https://mirrors.aliyun.com/goproxy/、https://goproxy.io、</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;os&quot;</span><br><span class="line">    &quot;time&quot;</span><br><span class="line"></span><br><span class="line">    &quot;gobot.io/x/gobot&quot;</span><br><span class="line">    &quot;gobot.io/x/gobot/drivers/gpio&quot;</span><br><span class="line">    &quot;gobot.io/x/gobot/platforms/firmata&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    firmataAdaptor := firmata.NewTCPAdaptor(os.Args[1])</span><br><span class="line">    led := gpio.NewLedDriver(firmataAdaptor, &quot;2&quot;)</span><br><span class="line"></span><br><span class="line">    work := func() &#123;</span><br><span class="line">        gobot.Every(1*time.Second, func() &#123;</span><br><span class="line">            led.Toggle()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    robot := gobot.NewRobot(&quot;bot&quot;,</span><br><span class="line">        []gobot.Connection&#123;firmataAdaptor&#125;,</span><br><span class="line">        []gobot.Device&#123;led&#125;,</span><br><span class="line">        work,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    robot.Start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自行编译，arg1为板子的ip:port<br>运行的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\guanzhang\go\src\test&gt;test.exe 192.168.123.74:3030</span><br><span class="line">2019/08/24 18:00:07 Initializing connections...</span><br><span class="line">2019/08/24 18:00:07 Initializing connection TCPFirmata-F4AF098BF1E8FBB ...</span><br><span class="line">2019/08/24 18:00:07 Initializing devices...</span><br><span class="line">2019/08/24 18:00:07 Initializing device LED-347A1A3D3308A707 ...</span><br><span class="line">2019/08/24 18:00:07 Robot bot initialized.</span><br><span class="line">2019/08/24 18:00:07 Starting Robot bot ...</span><br><span class="line">2019/08/24 18:00:07 Starting connections...</span><br><span class="line">2019/08/24 18:00:07 Starting connection TCPFirmata-F4AF098BF1E8FBB on port 192.168.123.74:3030...</span><br><span class="line">2019/08/24 18:00:07 Starting devices...</span><br><span class="line">2019/08/24 18:00:07 Starting device LED-347A1A3D3308A707 on pin 2...</span><br><span class="line">2019/08/24 18:00:07 Starting work...</span><br></pre></td></tr></table></figure></p><p>我们可以看到灯在一秒一闪</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gobot.io/documentation/platforms/esp8266/" target="_blank" rel="noopener">https://gobot.io/documentation/platforms/esp8266/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;材料&quot;&gt;&lt;a href=&quot;#材料&quot; class=&quot;headerlink&quot; title=&quot;材料&quot;&gt;&lt;/a&gt;材料&lt;/h2&gt;&lt;p&gt;gobot官网是Arduino的demo，官网上看了下支持esp8266，整好之前整wifi攻击器的时候有就玩了下。我是在windows编译
      
    
    </summary>
    
    
      <category term="gobot" scheme="http://zhangguanzhang.github.io/categories/gobot/"/>
    
    
      <category term="gobot" scheme="http://zhangguanzhang.github.io/tags/gobot/"/>
    
      <category term="esp8266" scheme="http://zhangguanzhang.github.io/tags/esp8266/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu preseed无人应答安装</title>
    <link href="http://zhangguanzhang.github.io/2019/08/06/preseed/"/>
    <id>http://zhangguanzhang.github.io/2019/08/06/preseed/</id>
    <published>2019-08-06T14:19:53.000Z</published>
    <updated>2019-08-11T13:14:20.018Z</updated>
    
    <content type="html"><![CDATA[<p>之前的centos自动安装整得差不多了，今天有空研究下ubuntu的自动应答安装，过程是按照我遇到的问题的时间线的角度来描述，并不是总结后正确的开始姿势。<br>kickstart是red hat开发的。ubuntu的安装界面是一个debian-installer的二进制文件进程运行tty1提供的选择交互安装界面:<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/020.png" alt="menu.jpg"></p><p>ubuntu自带的应答是preseed，相关文档页面是 <a href="https://help.ubuntu.com/lts/installation-guide/amd64/apb.html" target="_blank" rel="noopener">https://help.ubuntu.com/lts/installation-guide/amd64/apb.html</a><br>实际上安装完成后我们可以安装debconf-utils后使用debconf-get-selections –installer导出preseed信息，但是这个信息比较乱，一般都是仅供参考</p><p>要想自动应答的话，我们可以从模板文件找起，实际上菜单的交互都是存在模板里，ubuntu的各个系统下路径名会不一样，但是都会在/var/log/目录里的，我们可以先安装一台，然后进去系统后使用下面命令查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find /var  -not \( -path /proc -prune \) -not \(  -path /var/lib/docker -prune \)  -type f -name &apos;*.dat&apos;</span><br><span class="line">/var/log/installer/cdebconf/templates.dat</span><br><span class="line">/var/log/installer/cdebconf/questions.dat</span><br><span class="line">/var/cache/debconf/config.dat</span><br><span class="line">/var/cache/debconf/templates.dat</span><br><span class="line">/var/cache/debconf/passwords.dat</span><br></pre></td></tr></table></figure></p><p>templates.dat是模板，而questions里有很多字段和变量都是填充到模板显示出来到界面的,例如下面是选择安装菜单后的第一个选项<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/021.png" alt="first.jpg"></p><p>我们可以去查找关键字，当然不能去按照<code>English</code>查找，毕竟这个单词出现频率太高了，我们用上面的<code>No localization</code>，实际上我们在templates里找不到，所以我们在question里找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/var/log/installer/cdebconf#  grep -B8 -w &apos;No localization&apos; questions.dat </span><br><span class="line"></span><br><span class="line">Name: localechooser/languagelist</span><br><span class="line">Template: localechooser/languagelist</span><br><span class="line">Value: en</span><br><span class="line">Owners: d-i</span><br><span class="line">Variables:</span><br><span class="line"> CODES = C, C.UTF-8, ca, zh_CN, zh_TW, hr, cs, sq, ar, ast, eu, be, bs, bg, da, nl, en, eo, et, fi, fr, gl, de, el, he, hu, is, id, ga, it, ja, kk, ko, ku, lv, lt, mk, se_NO, nb_NO, nn_NO, fa, pl, pt, pt_BR, ro, ru, sr, sk, sl, es, sv, tl, tg, th, tr, uk, ug, vi, cy</span><br><span class="line"> NAMES_EN = C, C.UTF-8, Catalan, Chinese (Simplified), Chinese (Traditional), Croatian, Czech, Albanian, Arabic, Asturian, Basque, Belarusian, Bosnian, Bulgarian, Danish, Dutch, English, Esperanto, Estonian, Finnish, French, Galician, German, Greek, Hebrew, Hungarian, Icelandic, Indonesian, Irish, Italian, Japanese, Kazakh, Korean, Kurdish, Latvian, Lithuanian, Macedonian, Northern Sami, Norwegian Bokmaal, Norwegian Nynorsk, Persian, Polish, Portuguese, Portuguese (Brazil), Romanian, Russian, Serbian (Cyrillic), Slovak, Slovenian, Spanish, Swedish, Tagalog, Tajik, Thai, Turkish, Ukrainian, Uyghur, Vietnamese, Welsh</span><br><span class="line"> NAMES_BOTH = C$&#123;!TAB&#125;-$&#123;!TAB&#125;No localization (ASCII), C.UTF-8$&#123;!TAB&#125;-$&#123;!TAB&#125;No localization .....</span><br></pre></td></tr></table></figure></p><p>我们按照name <code>localechooser/languagelist</code>在template查找，可以发现变量都是存question里的，<code>${NAMES_EN}</code>和<code>${CODES}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/var/log/installer/cdebconf#  grep -A8 -P localechooser/languagelist templates.dat</span><br><span class="line">Name: localechooser/languagelist</span><br><span class="line">Type: select</span><br><span class="line">Default: en</span><br><span class="line">Choices: $&#123;NAMES_EN&#125;</span><br><span class="line">Description: Language:</span><br><span class="line">Extended_description: Choose the language to be used for the installation process. The selected language will also be the default language for the installed system.</span><br><span class="line">Choices-C: $&#123;CODES&#125;</span><br><span class="line">Choices-en.UTF-8: $&#123;NAMES_BOTH&#125;</span><br></pre></td></tr></table></figure><p>Choices-C对应的值是缩写，不一定得使用Choices的值，所以我们选择英文可以写下面的语法来自动应答<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d-i localechooser/languagelist  select en</span><br></pre></td></tr></table></figure></p><p>这个是apt系列系统的preseed写法，写法规则如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;owner&gt; &lt;question name&gt; &lt;question type&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></p><p>每个字段之间只能一个空格或者制表符，多余的会被解释为该值，通过反斜杠可以作为行继续符号，有的value不止一个单词，有很多单词组成。另外owner大多数都是debian-installer，直接写d-i即可，而为<code>&lt;question type&gt;</code>下面这些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/var/log/installer/cdebconf#  grep -P &apos;^Type&apos; templates.dat | sort -ru</span><br><span class="line">Type: title</span><br><span class="line">Type: text</span><br><span class="line">Type: terminal</span><br><span class="line">Type: string</span><br><span class="line">Type: select</span><br><span class="line">Type: password</span><br><span class="line">Type: note</span><br><span class="line">Type: multiselect</span><br><span class="line">Type: error</span><br><span class="line">Type: entropy</span><br><span class="line">Type: detect-keyboard</span><br><span class="line">Type: boolean</span><br></pre></td></tr></table></figure></p><p>更多讲解见官方文档<br><a href="https://help.ubuntu.com/lts/installation-guide/amd64/apbs04.html" target="_blank" rel="noopener">https://help.ubuntu.com/lts/installation-guide/amd64/apbs04.html</a><br>这里我主要介绍几个坑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append  file=/cdrom/preseed/ubuntu-server.seed vga=788 initrd=/install/initrd.gz quiet ---</span><br></pre></td></tr></table></figure></p><p>上面是官方<code>isolinux/txt.cfg</code>里默认的启动参数，默认使用了自带的preseed文件，可以自己修改弄进去替换啥的。我考虑到后续放web上，直接web下载，所以我自己起了个nginx放nginx上，还可以预防每次改了preseed还得打包镜像。<br>搜索了相关资料可以缩写</p><table><thead><tr><th style="text-align:left">alias</th><th>full name</th></tr></thead><tbody><tr><td style="text-align:left">priority</td><td>debconf/priority</td></tr><tr><td style="text-align:left">fb</td><td>debian-installer/framebuffer</td></tr><tr><td style="text-align:left">language</td><td>debian-installer/language</td></tr><tr><td style="text-align:left">country</td><td>debian-installer/country</td></tr><tr><td style="text-align:left">locale</td><td>debian-installer/locale</td></tr><tr><td style="text-align:left">theme</td><td>debian-installer/theme</td></tr><tr><td style="text-align:left">auto</td><td>auto-install/enable</td></tr><tr><td style="text-align:left">classes</td><td>auto-install/classes</td></tr><tr><td style="text-align:left">file</td><td>preseed/file</td></tr><tr><td style="text-align:left">url</td><td>preseed/url</td></tr><tr><td style="text-align:left">domain</td><td>netcfg/get_domain</td></tr><tr><td style="text-align:left">hostname</td><td>netcfg/get_hostname</td></tr><tr><td style="text-align:left">interface</td><td>netcfg/choose_interface</td></tr><tr><td style="text-align:left">protocol</td><td>mirror/protocol</td></tr><tr><td style="text-align:left">suite</td><td>mirror/suite</td></tr><tr><td style="text-align:left">modules</td><td>anna/choose_modules</td></tr><tr><td style="text-align:left">recommends</td><td>base-installer/install-recommends</td></tr><tr><td style="text-align:left">tasks</td><td>tasksel:tasksel/first</td></tr><tr><td style="text-align:left">desktop</td><td>tasksel:tasksel/desktop</td></tr><tr><td style="text-align:left">dmraid</td><td>disk-detect/dmraid/enable</td></tr><tr><td style="text-align:left">keymap</td><td>keyboard-configuration/xkb-keymap</td></tr><tr><td style="text-align:left">preseed-md5</td><td>preseed/file/checksum</td></tr></tbody></table><p>所以我改成了这样，preseed还支持放tftp和ftp上，例如<code>preseed/url=tftp://host/path/to/preseed.cfg</code>和<code>preseed/url=ftp://host/path/to/preseed.cfg</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append  url=http://xxxxx/test.seed vga=788 initrd=/install/initrd.gz quiet ---</span><br></pre></td></tr></table></figure></p><p>结果测试了下压根没跳过，查看nginx的日志页压根没有人请求test.seed文件，后来查阅资料才发现是少了几个选项，必须加上了才行，最终的参数为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append  auto=true priority=critical url=http://xxxxx/test.seed vga=788 initrd=/install/initrd.gz quiet ---</span><br></pre></td></tr></table></figure></p><p>上面列出的表格里也能在append后面写了，这样不用全部写在preseed里了。然后后面写到了时区那，测试了却没有自动应答<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d-i localechooser/continentlist select Asia</span><br><span class="line">d-i localechooser/countrylist/Asia select China</span><br></pre></td></tr></table></figure></p><p>然后搜索资料在 <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=503189" target="_blank" rel="noopener">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=503189</a> 找到解决方法,在append后或者最开始加下面的设置成en_US才行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d-i debian-installer/locale string en_US.UTF-8</span><br></pre></td></tr></table></figure></p><p>最后简单介绍下一些技巧<br>安装之前执行的一些命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d-i partman/early_command string xxx</span><br></pre></td></tr></table></figure></p><p>例如我们可以指定安装的硬盘盒boot安装的硬盘排除usb，其中的<code>list-devices disk</code>可以列出硬盘设备<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d-i partman/early_command string \</span><br><span class="line">  USBDEV_LIST=&quot;$(mktemp)&quot;; \</span><br><span class="line">  list-devices usb-partition | sed &quot;s/\(.*\)./\1/&quot; &gt; &quot;$USBDEV_LIST&quot;; \</span><br><span class="line">  BOOTDEV=&quot;$(list-devices disk | grep -vf &quot;$USBDEV_LIST&quot; | head -n 1)&quot;; \</span><br><span class="line">  debconf-set partman-auto/disk &quot;$BOOTDEV&quot;; \</span><br><span class="line">  debconf-set grub-installer/bootdev &quot;$BOOTDEV&quot;;</span><br></pre></td></tr></table></figure></p><p>不创建用户，并且允许root用户tty登陆，允许弱密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d-i passwd/make-user boolean false</span><br><span class="line">d-i passwd/root-login boolean true</span><br><span class="line">d-i user-setup/allow-password-weak boolean true</span><br></pre></td></tr></table></figure></p><p>分区的话网上的博客说得非常少，这里不说lvm和raid，只说正常的分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d-i partman-auto/method string regular  # 值为 regular lvm crypto(带lvm的加密),这里我用常规</span><br><span class="line">d-i partman-auto/disk string /dev/sda # 可以上面的early_command也可以这里指定默认安装的硬盘</span><br><span class="line">d-i partman/confirm_nooverwrite boolean true # 不强制清理已有分区</span><br><span class="line">d-i partman/default_filesystem string ext4 # 设置默认文件系统</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">d-i partman-auto/choose_recipe select boot-root # 选择名为boot-root的方案</span><br><span class="line">d-i partman-auto/expert_recipe string                         \</span><br><span class="line">      boot-root ::                                            \</span><br><span class="line">              40 50 100 ext3                                  \</span><br><span class="line">                      $primary&#123; &#125; $bootable&#123; &#125;                \</span><br><span class="line">                      method&#123; format &#125; format&#123; &#125;              \</span><br><span class="line">                      use_filesystem&#123; &#125; filesystem&#123; ext3 &#125;    \</span><br><span class="line">                      mountpoint&#123; /boot &#125;                     \</span><br><span class="line">              .                                               \</span><br><span class="line">              500 10000 1000000000 ext3                       \</span><br><span class="line">                      method&#123; format &#125; format&#123; &#125;              \</span><br><span class="line">                      use_filesystem&#123; &#125; filesystem&#123; ext3 &#125;    \</span><br><span class="line">                      mountpoint&#123; / &#125;                         \</span><br><span class="line">              .                                               \</span><br><span class="line">              64 512 300% linux-swap                          \</span><br><span class="line">                      method&#123; swap &#125; format&#123; &#125;                \</span><br><span class="line">              .</span><br></pre></td></tr></table></figure><p>上面第二行是声明一个名为boot-root的方案，对应上面的选择，其中<code>.</code>隔开每个分区，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3000 5000 8000 ext3 $primary&#123; &#125; $bootable&#123; &#125; method&#123; format &#125; format&#123; &#125; use_filesystem&#123; &#125; filesystem&#123; ext3 &#125; mountpoint&#123; / &#125;</span><br></pre></td></tr></table></figure></p><ul><li>3000：分区的最小尺寸</li><li>5000：优先级，越小优先级越高，如果它和其他列出的分区争夺磁盘空间（这与其他分区的优先级进行比较）</li><li>8000：mb的最大分区大小（80GB;这是80GB磁盘。）, -1使用剩下容量</li><li>ext3：文件系统类型,其他的有btrfs,efi,ext2,ext3,ext4,jfs,linux-swap,fat32,free,,nfts,xfs</li><li>$primary{ }: 主分区</li><li>$bootable{ }： 这是一个可启动的分区</li><li>method {format}：设置为format则会格式化分区，值为keep的话不格式化，swap则是swap分区</li><li>format{ }: 没有详细的说明，通常看到都是为空</li><li>use_filesystem{ }: 使用文件系统</li><li>filesystem{ ext3 }: 文件系统类型，如果是swap则不需要这整个字段，另外这里吐槽下ubuntu，数字那行就写了文件系统，这里还多此一举</li><li>mountpoint{ / }: 挂载点</li><li>device{ /dev/sda }: 假设另一块儿盘当作数据目录可以用这个标签</li></ul><p>写得少的话我在虚机里测试可以,注意别写错容量，否则默认会只生成一个根分区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d-i partman-auto/disk string /dev/sda</span><br><span class="line">d-i partman-auto/choose_recipe select boot-root</span><br><span class="line">d-i partman-auto/method string regular</span><br><span class="line">d-i partman-lvm/device_remove_lvm boolean true</span><br><span class="line">d-i partman-md/device_remove_md boolean true</span><br><span class="line">d-i partman-auto/expert_recipe string                         \</span><br><span class="line">      boot-root ::                                            \</span><br><span class="line">              100 50 200 ext3                                  \</span><br><span class="line">                      $primary&#123; &#125; $bootable&#123; &#125;                \</span><br><span class="line">                      method&#123; format &#125; format&#123; &#125;              \</span><br><span class="line">                      use_filesystem&#123; &#125; filesystem&#123; ext3 &#125;    \</span><br><span class="line">                      mountpoint&#123; /boot &#125;                     \</span><br><span class="line">              .                                               \</span><br><span class="line">              180000 10000 -1 ext4                       \</span><br><span class="line">                      method&#123; format &#125; format&#123; &#125;              \</span><br><span class="line">                      use_filesystem&#123; &#125; filesystem&#123; ext4 &#125;    \</span><br><span class="line">                      mountpoint&#123; / &#125;                         \</span><br><span class="line">              .</span><br><span class="line">d-i partman-partitioning/confirm_write_new_label boolean true</span><br><span class="line">d-i partman/choose_partition select finish</span><br><span class="line">d-i partman/confirm boolean true</span><br><span class="line">d-i partman/confirm_nooverwrite boolean true</span><br><span class="line">d-i partman/default_filesystem string ext4</span><br><span class="line">d-i partman/mount_style select uuid</span><br></pre></td></tr></table></figure></p><p>最后放下我vmware里ubuntu用的完整preseed</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">d-i auto-install/enable boolean true</span><br><span class="line">d-i debconf/priority select critical</span><br><span class="line"></span><br><span class="line">d-i debian-installer/locale string en_US.UTF-8</span><br><span class="line"></span><br><span class="line">d-i localechooser/languagelist  select en</span><br><span class="line">d-i localechooser/shortlist/en select US</span><br><span class="line">d-i localechooser/continentlist select Asia</span><br><span class="line">d-i localechooser/countrylist/Asia select China</span><br><span class="line"></span><br><span class="line">d-i time/zone select Asia/Shanghai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d-i netcfg/hostname string zhangguanzhang</span><br><span class="line"></span><br><span class="line">d-i passwd/root-login boolean true</span><br><span class="line">d-i passwd/make-user boolean false</span><br><span class="line">d-i passwd/root-password password r00tme</span><br><span class="line">d-i passwd/root-password-again password r00tme</span><br><span class="line"></span><br><span class="line">d-i user-setup/allow-password-weak boolean true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#d-i netcfg/get_ipaddress string 192.168.1.42</span><br><span class="line">#d-i netcfg/get_netmask string 255.255.255.0</span><br><span class="line">#d-i netcfg/get_gateway string 192.168.1.1</span><br><span class="line">#d-i netcfg/get_nameservers string 192.168.1.1</span><br><span class="line">#d-i netcfg/confirm_static boolean true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d-i partman-auto/disk string /dev/sda</span><br><span class="line">d-i partman-auto/method string regular</span><br><span class="line">d-i partman-basicfilesystems/no_swap boolean false</span><br><span class="line">d-i partman-auto/expert_recipe string         \</span><br><span class="line">   boot-root ::                               \</span><br><span class="line">      150 1 200 ext4                          \</span><br><span class="line">         $primary&#123; &#125; $bootable&#123; &#125;             \</span><br><span class="line">         method&#123; format &#125; format&#123; &#125;           \</span><br><span class="line">         use_filesystem&#123; &#125; filesystem&#123; ext4 &#125; \</span><br><span class="line">         mountpoint&#123; /boot &#125; .                \</span><br><span class="line">      15000 2 -1 ext4                         \</span><br><span class="line">         $primary&#123; &#125;                          \</span><br><span class="line">         method&#123; format &#125; format&#123; &#125;           \</span><br><span class="line">         use_filesystem&#123; &#125; filesystem&#123; ext4 &#125; \</span><br><span class="line">         mountpoint&#123; / &#125; .</span><br><span class="line">d-i partman-partitioning/confirm_write_new_label boolean true</span><br><span class="line">d-i partman-auto/choose_recipe select boot-root</span><br><span class="line">d-i partman/choose_partition select finish</span><br><span class="line">d-i partman/confirm boolean true</span><br><span class="line">d-i partman/confirm_nooverwrite boolean true</span><br><span class="line">d-i partman/default_filesystem string ext4</span><br><span class="line">d-i partman/mount_style select uuid</span><br><span class="line"></span><br><span class="line">#d-i partman-md/device_remove_md boolean true</span><br><span class="line">#d-i partman-md/confirm boolean true</span><br><span class="line">#d-i partman-md/confirm_nooverwrite boolean true</span><br><span class="line">#</span><br><span class="line">#d-i partman-lvm/device_remove_lvm boolean true</span><br><span class="line">#d-i partman-lvm/confirm boolean true</span><br><span class="line">#d-i partman-lvm/confirm_nooverwrite boolean true</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d-i pkgsel/include string openssh-server openssh-client</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#d-i preseed/early_command string </span><br><span class="line"></span><br><span class="line">d-i preseed/late_command string \</span><br><span class="line"> in-target sh -c &apos;sed -i &quot;/#PermitRootLogin/a PermitRootLogin yes&quot; /etc/ssh/sshd_config&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">finish-installfinish-install/keep-consolesbooleanfalse</span><br><span class="line">d-i finish-install/reboot_in_progress note</span><br></pre></td></tr></table></figure><p>也可以去参考下下面的</p><p><a href="https://github.com/core-process/linux-unattended-installation/blob/master/ubuntu/18.04/custom/preseed.cfg" target="_blank" rel="noopener">https://github.com/core-process/linux-unattended-installation/blob/master/ubuntu/18.04/custom/preseed.cfg</a><br><a href="https://phabricator.wikimedia.org/P7955" target="_blank" rel="noopener">https://phabricator.wikimedia.org/P7955</a><br><a href="https://wikitech.wikimedia.org/wiki/PartMan" target="_blank" rel="noopener">https://wikitech.wikimedia.org/wiki/PartMan</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前的centos自动安装整得差不多了，今天有空研究下ubuntu的自动应答安装，过程是按照我遇到的问题的时间线的角度来描述，并不是总结后正确的开始姿势。&lt;br&gt;kickstart是red hat开发的。ubuntu的安装界面是一个debian-installer的二进制文
      
    
    </summary>
    
    
      <category term="preseed" scheme="http://zhangguanzhang.github.io/categories/preseed/"/>
    
    
      <category term="preseed" scheme="http://zhangguanzhang.github.io/tags/preseed/"/>
    
  </entry>
  
  <entry>
    <title>golang headless browser包chromedp初探</title>
    <link href="http://zhangguanzhang.github.io/2019/07/14/chromedp/"/>
    <id>http://zhangguanzhang.github.io/2019/07/14/chromedp/</id>
    <published>2019-07-14T07:29:05.000Z</published>
    <updated>2019-07-22T01:17:25.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是cdp"><a href="#什么是cdp" class="headerlink" title="什么是cdp"></a>什么是cdp</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前天晚上想写个网站自动投稿，但是chrome F12抓的包里请求的几个参数里的值不知道js咋生成的，看不懂js。询问了下网友，网友看我截图请求蛮多的，说有空帮我看看。并且他说到了模拟过程虽然能成功但是可能反爬措施强会导致封号，建议我用无头浏览器整。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;搜了下相关概念，无头浏览器的话python里就是<code>selenium</code>驱动的，广泛使用的headless browser解决方案PhantomJS已经宣布不再继续维护，转而推荐使用headless chrome。Headless Chrome 是 Chrome 浏览器的无界面形态，可以在不打开浏览器的gui前提下，使用所有 Chrome 支持的特性运行你的程序。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反爬措施的目的就是保证正常用户的访问，拒绝爬虫的访问。这个时候，我们就在思索一件事，不管他步骤怎样复杂化，他还是要对正常的浏览器提供业务支持，换而言之，他再复杂的请求步骤也会被浏览器完美执行。使用浏览器自己当爬虫，加大了资源消耗，爬取速度明显变慢，但是简化了开发步骤，缩短了开发周期，在某些情况下，这个技术还是非常有利可图的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;golang里驱动<code>headless chrome</code>有着开源库<code>chromedp</code>(在2017年的gopher大会上有展示过)，它是使用<code>Chrome Debugging Protocol</code>(简称cdp) 并且没有外部依赖 (如Selenium, PhantomJS等)。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;浏览器本身其实还充当着一个服务端的角色，大家应该都用过chrome浏览器的F12，也就是devtools，其实这是一个web应用，当你使用devtools的时候，而你看到的浏览器调试工具界面，其实只是一个前端应用，在这中间通信的，就是cdp，他是基于websocket的，一个让devtools和浏览器内核交换数据的通道。cdp的官方文档地址 <a href="https://chromedevtools.github.io/devtools-protocol/" target="_blank" rel="noopener">https://chromedevtools.github.io/devtools-protocol/</a> 可以点击查阅。</p><h2 id="chromedp能做什么"><a href="#chromedp能做什么" class="headerlink" title="chromedp能做什么"></a>chromedp能做什么</h2><ul><li>反爬虫js，例如有的网页后台js自动发送心跳包，浏览器里会自动运行，不需要我们自动处理</li><li>针对于前端页面的自动化测试</li><li>解决类似VueJS和SPA之类的渲染</li><li>解决网页的懒加载</li><li>网页截图和pdf导出，而不需要额外的去学习其他的库实现</li><li>seo训练和刷点击量</li><li>执行javascript 代码</li><li>设置dom的标签属性</li></ul><h3 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h3><p>懂一点html和css以及js，因为操作html的dom元素需要用到xpath和css选择器之类的，如果F12的element里会右击复制selector也行，但是复杂的选择器还得需要xpath或者css选择器。不会使用的话简单教下：<br>chrome打开网页F12后下面的调试工具出来后点击<code>Elements</code>,然后点击elements右边的那个框框里的鼠标箭头，点击后变蓝色，然后放到网页上选中区域点击一下，下面的内容就跳到对应地方，然后下面右击html的标签-&gt;<code>Copy</code>-&gt;<code>COpy selector</code>或者xpath，就能复制选择器了。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>拉不下来的自行开GO111MODULE并且设置goproxy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/chromedp/chromedp@master</span><br></pre></td></tr></table></figure></p><h3 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h3><ul><li>打开必应页面<code>https://cn.bing.com/?mkt=zh-CN</code></li><li>输入<code>zhangguanzhang</code></li><li>点击搜索</li><li>打印第一个搜索结构的超链接地址</li><li>截图浏览器看到的界面</li></ul><p>代码<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/chromedp/chromedp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buf []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create chrome instance</span></span><br><span class="line">ctx, cancel := chromedp.NewContext(</span><br><span class="line">context.Background(),</span><br><span class="line">chromedp.WithLogf(log.Printf),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a timeout</span></span><br><span class="line">ctx, cancel = context.WithTimeout(ctx, <span class="number">15</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// navigate to a page, wait for an element, click</span></span><br><span class="line"><span class="keyword">var</span> example <span class="keyword">string</span></span><br><span class="line">err := chromedp.Run(ctx,</span><br><span class="line"><span class="comment">//访问打开必应页面</span></span><br><span class="line">chromedp.Navigate(<span class="string">`https://cn.bing.com/?mkt=zh-CN`</span>),</span><br><span class="line"><span class="comment">// 等待右下角图标加载完成</span></span><br><span class="line">chromedp.WaitVisible(<span class="string">`#sh_cp_in`</span>),</span><br><span class="line"><span class="comment">//搜索框内输入zhangguanzhang</span></span><br><span class="line">chromedp.SendKeys(<span class="string">`#sb_form_q`</span>, <span class="string">`zhangguanzhang`</span>, chromedp.ByID),</span><br><span class="line"><span class="comment">// 点击搜索图标</span></span><br><span class="line">chromedp.Click(<span class="string">`#sb_form_go`</span>, chromedp.NodeVisible),</span><br><span class="line"><span class="comment">// 获取第一个搜索结构的超链接</span></span><br><span class="line">chromedp.Text(<span class="string">`#b_results &gt; li:nth-child(2) &gt; div &gt; div &gt; cite`</span>, &amp;example),</span><br><span class="line">chromedp.CaptureScreenshot(&amp;buf),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := ioutil.WriteFile(<span class="string">"fullScreenshot.png"</span>, buf, <span class="number">0644</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"example: %s"</span>, example)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019/07/14 16:20:25 example: https://zhangguanzhang.github.io</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>截图图片为:</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/http/cdp-screenshot-001.png" alt="s1"></p><p>Run函数接收一个context和Action接口的切片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Run(ctx context.Context, actions ...Action) error &#123;</span><br></pre></td></tr></table></figure></p><p>godoc页面为 <a href="https://godoc.org/github.com/chromedp/chromedp" target="_blank" rel="noopener">https://godoc.org/github.com/chromedp/chromedp</a></p><p>action不止<code>Action</code>，还有<code>QueryAction</code>,<code>NavigateAction</code>,<code>MouseAction</code>,<code>KeyAction</code>…，自行查看godoc。其中的<code>QueryAction</code>是依赖于元素定位去操作的，例如点击和文本框的输入，你得指定第一个参数传入xpath或者selector来筛选操作的标签去执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func XXXX(sel interface&#123;&#125;, opts ...QueryOption) QueryAction</span><br></pre></td></tr></table></figure></p><p>第二个参数是QueryOption，缺省是<code>chromedp.BySearch</code>，允许使用CSS或XPath选择器查询元素，包装DOM.performSearch</p><h4 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chromedp.BySearch // 如果不写，默认会使用这个选择器，类似devtools ctrl+f 搜索</span><br><span class="line">chromedp.ByID // 只id来选择元素</span><br><span class="line">chromedp.ByQuery // 根据document.querySelector的规则选择元素，返回单个节点</span><br><span class="line">chromedp.ByQueryAll // 根据document.querySelectorAll返回所有匹配的节点</span><br><span class="line">chromedp.ByNodeIP // 检索特定节点(必须先有分配的节点IP)，这个暂时没用过也没看到过例子，如果有例子可以发给我看下</span><br></pre></td></tr></table></figure><p>其他的自行去看go doc里讲解吧。下面说些其他的</p><h2 id="调试和其他"><a href="#调试和其他" class="headerlink" title="调试和其他"></a>调试和其他</h2><p>讲解简单调和一些场景</p><h3 id="UA"><a href="#UA" class="headerlink" title="UA"></a>UA</h3><p>实际动手的时候发现一直hang住一样，才醒悟到网站应该检测了user agent了，下面代码借助网站返回ua<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/chromedp/chromedp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua <span class="keyword">string</span></span><br><span class="line"><span class="comment">// create chrome instance</span></span><br><span class="line">ctx, cancel := chromedp.NewContext(</span><br><span class="line">context.Background(),</span><br><span class="line">chromedp.WithLogf(log.Printf),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a timeout</span></span><br><span class="line">ctx, cancel = context.WithTimeout(ctx, <span class="number">15</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">err := chromedp.Run(ctx,</span><br><span class="line">chromedp.Navigate(<span class="string">`https://www.whatsmyua.info/?a`</span>),</span><br><span class="line">chromedp.WaitVisible(<span class="string">`#custom-ua-string`</span>),</span><br><span class="line">chromedp.Text(<span class="string">`#custom-ua-string`</span>, &amp;ua),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"user agent: %s"</span>, ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019/07/14 17:21:09 user agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/75.0.3770.100 Safari/537.36</span><br></pre></td></tr></table></figure></p><p>网站应该拦截了<code>HeadlessChrome</code>，所以需要自行设置ua<br>这是包里默认的flag数组，记住是数组<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DefaultExecAllocatorOptions = [...]ExecAllocatorOption&#123;</span><br><span class="line">NoFirstRun,</span><br><span class="line">NoDefaultBrowserCheck,</span><br><span class="line">Headless,</span><br><span class="line"></span><br><span class="line"><span class="comment">// After Puppeteer's default behavior.</span></span><br><span class="line">Flag(<span class="string">"disable-background-networking"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"enable-features"</span>, <span class="string">"NetworkService,NetworkServiceInProcess"</span>),</span><br><span class="line">Flag(<span class="string">"disable-background-timer-throttling"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-backgrounding-occluded-windows"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-breakpad"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-client-side-phishing-detection"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-default-apps"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-dev-shm-usage"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-extensions"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-features"</span>, <span class="string">"site-per-process,TranslateUI,BlinkGenPropertyTrees"</span>),</span><br><span class="line">Flag(<span class="string">"disable-hang-monitor"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-ipc-flooding-protection"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-popup-blocking"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-prompt-on-repost"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-renderer-backgrounding"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"disable-sync"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"force-color-profile"</span>, <span class="string">"srgb"</span>),</span><br><span class="line">Flag(<span class="string">"metrics-recording-only"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"safebrowsing-disable-auto-update"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"enable-automation"</span>, <span class="literal">true</span>),</span><br><span class="line">Flag(<span class="string">"password-store"</span>, <span class="string">"basic"</span>),</span><br><span class="line">Flag(<span class="string">"use-mock-keychain"</span>, <span class="literal">true</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一些可能需要用到的</p><ul><li>–no-first-run 第一次不运行</li><li>–default-browser-check 不检查默认浏览器</li><li>–headless 不开启图像界面</li><li>–disable-gpu 关闭gpu,服务器一般没有显卡</li><li>–remote-debugging-port chrome-debug工具的端口(golang chromepd 默认端口是9222,建议不要修改)</li><li>–no-sandbox 不开启沙盒模式可以减少对服务器的资源消耗,但是服务器安全性降低,配和参数 - –remote-debugging-address=127.0.0.1 一起使用</li><li>–disable-plugins 关闭chrome插件</li><li>–remote-debugging-address 远程调试地址 0.0.0.0 可以外网调用但是安全性低,建议使用默认值 127.0.0.1</li><li>–window-size 窗口尺寸<br>更多参数说明详解headless-chrome官方文档 <a href="https://developers.google.com/web/updates/2017/04/headless-chrome" target="_blank" rel="noopener">https://developers.google.com/web/updates/2017/04/headless-chrome</a> </li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"github.com/chromedp/chromedp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line">options := []chromedp.ExecAllocatorOption&#123;</span><br><span class="line">chromedp.UserAgent(<span class="string">`Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36`</span>),</span><br><span class="line">&#125;</span><br><span class="line">options = <span class="built_in">append</span>(options, chromedp.DefaultExecAllocatorOptions[:]...)</span><br><span class="line"></span><br><span class="line">c, cc := chromedp.NewExecAllocator(ctx, options...)</span><br><span class="line"><span class="keyword">defer</span> cc()</span><br><span class="line"><span class="comment">// create context</span></span><br><span class="line">ctx, cancel := chromedp.NewContext(c)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">err := chromedp.Run(ctx,</span><br><span class="line">chromedp.Navigate(<span class="string">`https://www.whatsmyua.info/?a`</span>),</span><br><span class="line">chromedp.WaitVisible(<span class="string">`#custom-ua-string`</span>),</span><br><span class="line">chromedp.Text(<span class="string">`#custom-ua-string`</span>, &amp;ua),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"user agent: %s"</span>, ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019/07/14 17:24:49 user agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36</span><br></pre></td></tr></table></figure></p><h3 id="开启GUI来debug"><a href="#开启GUI来debug" class="headerlink" title="开启GUI来debug"></a>开启GUI来debug</h3><p>然后还是遇到了hang住，不知道为啥，询问了别人说可以关闭headless来开启gui，这样可以看到chrome具体在干啥了</p><p>虽然默认选项里是开启了headless，但是我们可以利用切片在尾部追加，来覆盖掉前面的选项，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ seq 5 | head -n 1</span><br><span class="line">1</span><br><span class="line">$ seq 5 | head -n 1 -n 2</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>而headless的函数内容为<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Headless</span><span class="params">(a *ExecAllocator)</span></span> &#123;</span><br><span class="line">Flag(<span class="string">"headless"</span>, <span class="literal">true</span>)(a)</span><br><span class="line"><span class="comment">// Like in Puppeteer.</span></span><br><span class="line">Flag(<span class="string">"hide-scrollbars"</span>, <span class="literal">true</span>)(a)</span><br><span class="line">Flag(<span class="string">"mute-audio"</span>, <span class="literal">true</span>)(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以开启gui这样写<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"github.com/chromedp/chromedp"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ua <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">ctx := context.Background()</span><br><span class="line">options := []chromedp.ExecAllocatorOption&#123;</span><br><span class="line">chromedp.Flag(<span class="string">"headless"</span>, <span class="literal">false</span>),</span><br><span class="line">chromedp.Flag(<span class="string">"hide-scrollbars"</span>, <span class="literal">false</span>),</span><br><span class="line">chromedp.Flag(<span class="string">"mute-audio"</span>, <span class="literal">false</span>),</span><br><span class="line">chromedp.UserAgent(<span class="string">`Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36`</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">options = <span class="built_in">append</span>(chromedp.DefaultExecAllocatorOptions[:], options...)</span><br><span class="line"></span><br><span class="line">c, cc := chromedp.NewExecAllocator(ctx, options...)</span><br><span class="line"><span class="keyword">defer</span> cc()</span><br><span class="line"><span class="comment">// create context</span></span><br><span class="line">ctx, cancel := chromedp.NewContext(c)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">err := chromedp.Run(ctx,</span><br><span class="line">chromedp.Navigate(<span class="string">`https://www.whatsmyua.info/?a`</span>),</span><br><span class="line">chromedp.WaitVisible(<span class="string">`#custom-ua-string`</span>),</span><br><span class="line">chromedp.Text(<span class="string">`#custom-ua-string`</span>, &amp;ua),</span><br><span class="line">chromedp.Sleep(<span class="number">10</span>* time.Second),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"user agent: %s"</span>, ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行会看到chrome被打开一个新窗口，写着被自动控制着，如果遇到问题我们可以实时的观察</p><h3 id="设置chrome的execPath"><a href="#设置chrome的execPath" class="headerlink" title="设置chrome的execPath"></a>设置chrome的execPath</h3><p>实际上运行都是依赖于机器上有chrome浏览器，这是包里的代码<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExecPath</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="title">ExecAllocatorOption</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a *ExecAllocator)</span></span> &#123;</span><br><span class="line"><span class="comment">// Convert to an absolute path if possible, to avoid</span></span><br><span class="line"><span class="comment">// repeated LookPath calls in each Allocate.</span></span><br><span class="line"><span class="keyword">if</span> fullPath, _ := exec.LookPath(path); fullPath != <span class="string">""</span> &#123;</span><br><span class="line">a.execPath = fullPath</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a.execPath = path</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// findExecPath tries to find the Chrome browser somewhere in the current</span></span><br><span class="line"><span class="comment">// system. It performs a rather agressive search, which is the same in all</span></span><br><span class="line"><span class="comment">// systems. That may make it a bit slow, but it will only be run when creating a</span></span><br><span class="line"><span class="comment">// new ExecAllocator.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findExecPath</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, path := <span class="keyword">range</span> [...]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="comment">// Unix-like</span></span><br><span class="line"><span class="string">"headless_shell"</span>,</span><br><span class="line"><span class="string">"headless-shell"</span>,</span><br><span class="line"><span class="string">"chromium"</span>,</span><br><span class="line"><span class="string">"chromium-browser"</span>,</span><br><span class="line"><span class="string">"google-chrome"</span>,</span><br><span class="line"><span class="string">"google-chrome-stable"</span>,</span><br><span class="line"><span class="string">"google-chrome-beta"</span>,</span><br><span class="line"><span class="string">"google-chrome-unstable"</span>,</span><br><span class="line"><span class="string">"/usr/bin/google-chrome"</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="string">"chrome"</span>,</span><br><span class="line"><span class="string">"chrome.exe"</span>, <span class="comment">// in case PATHEXT is misconfigured</span></span><br><span class="line"><span class="string">`C:\Program Files (x86)\Google\Chrome\Application\chrome.exe`</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mac</span></span><br><span class="line"><span class="string">`/Applications/Google Chrome.app/Contents/MacOS/Google Chrome`</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">found, err := exec.LookPath(path)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> found</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Fall back to something simple and sensible, to give a useful error</span></span><br><span class="line"><span class="comment">// message.</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"google-chrome"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们的安装路径变了可以用ExecPath设置下</p><h2 id="官方的demo"><a href="#官方的demo" class="headerlink" title="官方的demo"></a>官方的demo</h2><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/http/cdp-example.jpg" alt="s2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是cdp&quot;&gt;&lt;a href=&quot;#什么是cdp&quot; class=&quot;headerlink&quot; title=&quot;什么是cdp&quot;&gt;&lt;/a&gt;什么是cdp&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前天晚上想写
      
    
    </summary>
    
    
      <category term="golang" scheme="http://zhangguanzhang.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://zhangguanzhang.github.io/tags/golang/"/>
    
      <category term="chromedp" scheme="http://zhangguanzhang.github.io/tags/chromedp/"/>
    
  </entry>
  
  <entry>
    <title>为什么我不用nodePort之偶然中奖几率</title>
    <link href="http://zhangguanzhang.github.io/2019/07/08/nodeport-err/"/>
    <id>http://zhangguanzhang.github.io/2019/07/08/nodeport-err/</id>
    <published>2019-07-08T12:24:09.000Z</published>
    <updated>2019-08-24T06:04:58.658Z</updated>
    
    <content type="html"><![CDATA[<p>嗯，1.6.7的老集群。早上反应数据库实例创建不出来。发现接口port的tcp不可达，查看kube-proxy的日志如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@HB1-xxxxx-S03 kubernetes]# tailf  kube-proxy.INFO </span><br><span class="line">E0708 09:44:03.437284  394350 proxier.go:1062] can&apos;t open &quot;nodePort for cloudify/cloudae-cfy-nginx:port1&quot; (:16081/tcp), skipping this nodePort: listen tcp :16081: bind: address already in use</span><br><span class="line">E0708 09:44:03.439285  394350 proxier.go:1062] can&apos;t open &quot;nodePort for default/cloudae-app-grafana-svc:cloudae-app-grafana-svc&quot; (:16101/tcp), skipping this nodePort: listen tcp :16101: bind: address already in use</span><br><span class="line">E0708 09:44:04.485556  394350 proxier.go:1062] can&apos;t open &quot;nodePort for cloudify/cloudae-cfy-nginx:port2&quot; (:16123/tcp), skipping this nodePort: listen tcp :16123: bind: address already in use</span><br><span class="line">E0708 09:44:04.487749  394350 proxier.go:1062] can&apos;t open &quot;nodePort for cloudify/cloudae-cfy-influxdb:web&quot; (:16083/tcp), skipping this nodePort: listen tcp :16083: bind: address already in use</span><br><span class="line">E0708 09:44:04.493137  394350 proxier.go:1062] can&apos;t open &quot;nodePort for cloudify/cloudae-cfy-nginx:port1&quot; (:16081/tcp), skipping this nodePort: listen tcp :16081: bind: address already in use</span><br></pre></td></tr></table></figure></p><p>netstat查看端口压根没有进程bind这俩端口，然后用lsof发现了是c端使用的端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@HB1-xxxxx-S03 kubernetes]# lsof -i :16081</span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">etcd3     1871 root   42u  IPv6  38338      0t0  TCP HB1-TJ1-Cloudos-S03:2379-&gt;HB1-TJ1-Cloudos-S03:16081 (ESTABLISHED)</span><br><span class="line">kube-apis 1945 root   26u  IPv4  21932      0t0  TCP HB1-TJ1-Cloudos-S03:16081-&gt;HB1-TJ1-Cloudos-S03:2379 (ESTABLISHED)</span><br><span class="line">[root@HB1-xxxxx-S03 kubernetes]# lsof -i :16123</span><br><span class="line">COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">etcd3     1871 root   62u  IPv6  42179      0t0  TCP HB1-TJ1-Cloudos-S03:2379-&gt;HB1-TJ1-Cloudos-S03:16123 (ESTABLISHED)</span><br><span class="line">kube-apis 1945 root   46u  IPv4  49719      0t0  TCP HB1-TJ1-Cloudos-S03:16123-&gt;HB1-TJ1-Cloudos-S03:2379 (ESTABLISHED)</span><br></pre></td></tr></table></figure></p><p>居然是apiserver作为client端去访问etcd占据了端口，这几个几率感觉可以去买彩票了。。。，数据库那边研发说要解决这个事情，改端口的range，我看下这套老集群的nodeport范围<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@HB1-xxxxx-S03 kubernetes]# netstat -nlpt  | grep -Po &apos;:::\K\d+(?=.+kube-proxy)&apos; | sort -rn | xargs -n6</span><br><span class="line">63200 53333 53229 48606 35357 33330</span><br><span class="line">30834 30418 30408 30186 30166 30158</span><br><span class="line">30157 30156 30155 30154 30152 30151</span><br><span class="line">30150 30140 30120 29754 28000 27017</span><br><span class="line">25906 21182 21181 21180 21160 21141</span><br><span class="line">21140 21120 21102 21101 21100 21080</span><br><span class="line">21060 21040 21020 21000 19002 18088</span><br><span class="line">16400 16310 16300 16210 16200 16123</span><br><span class="line">16101 16100 16086 16083 16081 16021</span><br><span class="line">16000 15672 15320 15300 15102 15101</span><br><span class="line">15100 15002 15000 12700 12345 12200</span><br><span class="line">12000 11900 11820 11700 11680 11660</span><br><span class="line">11620 11600 11520 11500 11460 11440</span><br><span class="line">11420 11400 11360 11320 11300 11200</span><br><span class="line">11100 10001 9779 9696 9443 9311</span><br><span class="line">9292 9191 9030 9029 9028 9027</span><br><span class="line">9026 9025 9024 9023 9022 9021</span><br><span class="line">9020 9019 9018 9017 9016 9015</span><br><span class="line">9014 9013 9012 9011 9000 8786</span><br><span class="line">8779 8778 8776 8775 8774 8386</span><br><span class="line">8082 8042 8041 8004 8001 7099</span><br><span class="line">6385 6083 6080 5672 5432 5000</span><br><span class="line">3306 3000 2359 21 20</span><br></pre></td></tr></table></figure></p><p>产品部门太多，基本上都是web七层应用，但是向外暴露都选择nodeport，没有统一导致nodeport range分散开，头痛</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;嗯，1.6.7的老集群。早上反应数据库实例创建不出来。发现接口port的tcp不可达，查看kube-proxy的日志如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://zhangguanzhang.github.io/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://zhangguanzhang.github.io/tags/k8s/"/>
    
      <category term="nodeport" scheme="http://zhangguanzhang.github.io/tags/nodeport/"/>
    
  </entry>
  
  <entry>
    <title>golang的net/http包的客户端简单科普</title>
    <link href="http://zhangguanzhang.github.io/2019/07/07/golang-http/"/>
    <id>http://zhangguanzhang.github.io/2019/07/07/golang-http/</id>
    <published>2019-07-07T07:53:47.000Z</published>
    <updated>2019-10-27T10:13:46.393Z</updated>
    
    <content type="html"><![CDATA[<p>之前准备写个简单的api的调用，百度和问了很多人后发现基本对于http的客户端熟悉的人非常少。或者对包的不了解自己造了效率很低的轮子，而且官方一些包里有坑，被坑过，这里简单科普下</p><h2 id="简单的get和post"><a href="#简单的get和post" class="headerlink" title="简单的get和post"></a>简单的get和post</h2><p>http包里下列可以直接使用的请求方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Head</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Get</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Post</span><span class="params">(url <span class="keyword">string</span>, bodyType <span class="keyword">string</span>, body io.Reader)</span> <span class="params">(resp *Response, err error)</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">PostForm</span><span class="params">(url <span class="keyword">string</span>, data url.Values)</span> <span class="params">(resp *Response, err error)</span></span></span><br></pre></td></tr></table></figure></p><p>变量<code>DefaultClient</code>是用于包函数Get、Head和Post的默认Client。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> DefaultClient = &amp;Client&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>例如简单的直接调用<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">"http://example.com/"</span>)</span><br><span class="line">    ...</span><br><span class="line">    resp, err := http.Post(<span class="string">"http://example.com/upload"</span>, <span class="string">"image/jpeg"</span>, &amp;buf)</span><br><span class="line">    ...</span><br><span class="line">    resp, err := http.PostForm(<span class="string">"http://example.com/form"</span>,</span><br><span class="line">        url.Values&#123;<span class="string">"key"</span>: &#123;<span class="string">"Value"</span>&#125;, <span class="string">"id"</span>: &#123;<span class="string">"123"</span>&#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="设置header"><a href="#设置header" class="headerlink" title="设置header"></a>设置header</h2><p>看源码，发现默认的http.Get是调用默认客户端的Get方法<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> DefaultClient.Get(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而Client的Get方法里是先new了一个request对象后调用<code>Client.Do</code>方法来发请求<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Get</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span> &#123;</span><br><span class="line">req, err := NewRequest(<span class="string">"GET"</span>, url, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c.Do(req)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Do</span><span class="params">(req *Request)</span> <span class="params">(*Response, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.do(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>http.NewRequest返回一个<code>*Request</code>，<code>Request</code>结构体里有header成员<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    Header Header</span><br></pre></td></tr></table></figure></p><p>而<code>Header</code>类型实现了以下方法来设置和获取发请求时候的请求头<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Header <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Header)</span> <span class="title">Add</span><span class="params">(key, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">textproto.MIMEHeader(h).Add(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Header)</span> <span class="title">Set</span><span class="params">(key, value <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">textproto.MIMEHeader(h).Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Header)</span> <span class="title">Get</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> textproto.MIMEHeader(h).Get(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以自定制header可以这样写，用<code>http.NewRequest</code>来new一个请求，然后用请求的<code>Header.Set</code>去设置header，然后最后去调用客户端的<code>Do(req)</code>发起请求<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    req, err := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://example.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line">    req.Header.Set(<span class="string">"Origin"</span>, <span class="string">"xxxxxx"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip, deflate, br"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Accept-Language"</span>, <span class="string">"zh-CN,zh;q=0.9"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Accept"</span>, <span class="string">"application/json, text/javascript, */*; q=0.01"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Referer"</span>, <span class="string">"xxxxxx"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"X-Requested-With"</span>, <span class="string">"XMLHttpRequest"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</span><br><span class="line">    req.Header.Set(<span class="string">"X-Csrftoken"</span>, <span class="string">"xxxxxx"</span>)</span><br><span class="line"></span><br><span class="line">    resp, err := http.DefaultClient.Do(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例如发起一个post请求<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">jar, _ := cookiejar.New(<span class="literal">nil</span>)</span><br><span class="line">http = &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line">body := strings.NewReader(<span class="string">`username=admin&amp;password=Password%40_`</span>)</span><br><span class="line">req, err := http.NewRequest(<span class="string">"POST"</span>, sessionUrl, body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h, err</span><br><span class="line"></span><br><span class="line">req.Header.Set(<span class="string">"Accept-Encoding"</span>, <span class="string">"gzip, deflate, br"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Accept-Language"</span>, <span class="string">"zh-CN,zh;q=0.9"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Accept"</span>, <span class="string">"application/json, text/javascript, */*; q=0.01"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Referer"</span>, baseUrl)</span><br><span class="line">req.Header.Set(<span class="string">"X-Requested-With"</span>, <span class="string">"XMLHttpRequest"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</span><br><span class="line"></span><br><span class="line">resp, err := http.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err <span class="comment">//errors.New("Login Timeout")</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">respBody, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = &amp;CSR&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(respBody, data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fmt.Println(string(respBody))</span></span><br><span class="line"><span class="keyword">if</span> data.PasswordModify != <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"Password Wrong"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br></pre></td></tr></table></figure></p><h2 id="自定义客户端"><a href="#自定义客户端" class="headerlink" title="自定义客户端"></a>自定义客户端</h2><p>上面都是使用的包里定义的默认客户端，例如有些网站的证书不是权威证书，我们得关闭客户端的权威证书检查，类似于<code>curl -k</code>那样。或者设置客户端超时时间<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">client = &amp;http.Client&#123;</span><br><span class="line">        Timeout: time.Second * <span class="number">3</span>, </span><br><span class="line">        Transport: &amp;http.Transport&#123;</span><br><span class="line">            TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="literal">true</span>&#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">req, err := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"http://example.com/"</span>, <span class="literal">nil</span>)</span><br><span class="line">resp, err := client.Do(req)</span><br></pre></td></tr></table></figure></p><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面都是些不需要登陆的，或者说不是那种接口式的网站，接口的网站一般是先basicAuth或者oAuth2啥的请求了获取了一个token，后续调接口带上token请求就行了，不需要设置header啥的。但是也有网站不提供接口的，所以一般需要http客户端的记录session模拟人为登陆。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;而session就是体现在http的header的<code>cookie: xxx=yyy; aaa=bbb; session_id=93728560xxxx; .....</code>里(http的header的key不区分大小写)，客户端请求后，服务器端回应的时候会带上<code>Set-cookie</code>然后客户端会自行去把键值对写到cookie里。有的网站把token放在cookies里作为认证的身份，例如以前的百度贴吧的自动签到和pandownload的登陆下载都是叫用户自己找cookie里的那几个字段的值写进去，程序会带着它去请求。cookie里的很多字段看各个web server的控制了，这里不细致讨论。<br>我们使用浏览器会自动的去<code>Set-cookie</code>，那么源码里肯定也有对应的代码段,Do方法最后调用的send方法发送请求<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">send</span><span class="params">(req *Request, deadline time.Time)</span> <span class="params">(resp *Response, didTimeout <span class="keyword">func</span>()</span> <span class="title">bool</span>, <span class="title">err</span> <span class="title">error</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.Jar != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, cookie := <span class="keyword">range</span> c.Jar.Cookies(req.URL) &#123;</span><br><span class="line">req.AddCookie(cookie)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, didTimeout, err = send(req, c.transport(), deadline)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, didTimeout, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> c.Jar != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> rc := resp.Cookies(); <span class="built_in">len</span>(rc) &gt; <span class="number">0</span> &#123;</span><br><span class="line">c.Jar.SetCookies(req.URL, rc)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果客户端的<code>.Jar</code>不为空就会去<code>SetCookies</code>，所以我们使用cookies也可以自行在header里自动去写，这样做法是浏览器登录后F12打开network抓包，点击到请求里找<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/http/001.png" alt="http"><br>找到后自行<code>req.Header.Set(&quot;Cookie&quot;, &quot;xxxxxx&quot;)</code>或者<code>req.AddCookie(xxx)</code>，这样非常繁琐，所以一般我们是新建一个客户端把客户端的Jar不设置为空就行了<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jar, _ := cookiejar.New(<span class="literal">nil</span>)</span><br><span class="line">h.http = &amp;http.Client&#123;</span><br><span class="line">...</span><br><span class="line">       Jar: jar,</span><br><span class="line">       ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样后续使用这个客户端的时候就和我们使用浏览器一样会自动处理服务端发的cookie操作了，会保持住session</p><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>http上传文件的时候是把文件分段上传的，会生成一个随机字符(boundary)来分割每段<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/http/002.png" alt="http"><br>boundary是各自的http客户端生成的，chrome好像和其他的不一样，总之上传文件的type为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=分割文件时候的随机字符</span><br></pre></td></tr></table></figure></p><p>type里的boundary是随机的，所以我们得用包<code>&quot;mime/multipart&quot;</code>处理<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"mime/multipart"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postFile</span><span class="params">(filename <span class="keyword">string</span>, targetUrl <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    bodyBuf := &amp;bytes.Buffer&#123;&#125;  <span class="comment">//创建缓存</span></span><br><span class="line">    bodyWriter := multipart.NewWriter(bodyBuf) <span class="comment">// 创建part的writer</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键的一步操作，fwimage自行看上图抓包里的，而且这里最好用filepath.Base取文件名不要带路径</span></span><br><span class="line">    fileWriter, err := bodyWriter.CreateFormFile(<span class="string">"file"</span>, filepath.Base(filename))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"error writing to buffer"</span>)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fh, err := os.Open(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"error opening file"</span>)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> fh.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//iocopy</span></span><br><span class="line">    _, err = io.Copy(fileWriter, fh)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">_ = bodyWriter.WriteField(<span class="string">"id"</span>, <span class="string">"WU_FILE_0"</span>)</span><br><span class="line"></span><br><span class="line">    bodyWriter.Close()   <span class="comment">// 必须在发请求之前关闭，不然不会读到EOF</span></span><br><span class="line"></span><br><span class="line">    req, err := http.NewRequest(<span class="string">"POST"</span>, Url, bodyBuf)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, bodyWriter.FormDataContentType()) <span class="comment">//获取Content-Type的值</span></span><br><span class="line"></span><br><span class="line">    resp, err := http.Do(req)  <span class="comment">//自己的客户端去do，不要照抄</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">    resp_body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(resp.Status)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(resp_body))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="digest-auth"><a href="#digest-auth" class="headerlink" title="digest auth"></a>digest auth</h2><p>先看一段curl的digest auth的过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">curl -svX GET --digest -u admin:&apos;xxxxxxx&apos; http://100.64.16.10:8080/cas/casrs/operator/getAuthUrl -H &apos;Accept: application/json&apos;</span><br><span class="line">* About to connect() to 100.64.16.10 port 8080 (#0)</span><br><span class="line">*   Trying 100.64.16.10...</span><br><span class="line">* Connected to 100.64.16.10 (100.64.16.10) port 8080 (#0)</span><br><span class="line">* Server auth using Digest with user &apos;admin&apos;</span><br><span class="line">&gt; GET /cas/casrs/operator/getAuthUrl HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.29.0</span><br><span class="line">&gt; Host: 100.64.16.10:8080</span><br><span class="line">&gt; Accept: application/json</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 401 Unauthorized</span><br><span class="line">&lt; Cache-Control: no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line">&lt; Pragma: no-cache</span><br><span class="line">&lt; Expires: 0</span><br><span class="line">&lt; X-XSS-Protection: 1; mode=block</span><br><span class="line">&lt; X-Frame-Options: DENY</span><br><span class="line">&lt; X-Content-Type-Options: nosniff</span><br><span class="line">&lt; Set-Cookie: JSESSIONID=F65AC0489A30F3A69175FD59B10F9CC5; Path=/cas/; HttpOnly</span><br><span class="line">&lt; WWW-Authenticate: Digest realm=&quot;VMC RESTful Web Services&quot;, qop=&quot;auth&quot;, nonce=&quot;MTU2NDUzNjE3MTUwMzo0MTJjOGM3MGU1MDlmZDhiMDlhM2YzNTBhYjExOGRhMg==&quot;</span><br><span class="line">&lt; Content-Type: text/html;charset=ISO-8859-1</span><br><span class="line">&lt; Content-Length: 686</span><br><span class="line">&lt; Date: Wed, 31 Jul 2019 01:17:51 GMT</span><br><span class="line">&lt; Server: CVM</span><br><span class="line">&lt; </span><br><span class="line">* Ignoring the response-body</span><br><span class="line">* Connection #0 to host 100.64.16.10 left intact</span><br><span class="line">* Issue another request to this URL: &apos;http://100.64.16.10:8080/cas/casrs/operator/getAuthUrl&apos;</span><br><span class="line">* Found bundle for host 100.64.16.10: 0xb50040</span><br><span class="line">* Re-using existing connection! (#0) with host 100.64.16.10</span><br><span class="line">* Connected to 100.64.16.10 (100.64.16.10) port 8080 (#0)</span><br><span class="line">* Server auth using Digest with user &apos;admin&apos;</span><br><span class="line">&gt; GET /cas/casrs/operator/getAuthUrl HTTP/1.1</span><br><span class="line">&gt; Authorization: Digest username=&quot;admin&quot;, realm=&quot;VMC RESTful Web Services&quot;, nonce=&quot;MTU2NDUzNjE3MTUwMzo0MTJjOGM3MGU1MDlmZDhiMDlhM2YzNTBhYjExOGRhMg==&quot;, uri=&quot;/cas/casrs/operator/getAuthUrl&quot;, cnonce=&quot;ICAgICAgICAgICAgICAgICAgICAgICAgIDIxMTgzODA=&quot;, nc=00000001, qop=auth, response=&quot;bc0c68695d1d51daa364d7a4976566b7&quot;</span><br><span class="line">&gt; User-Agent: curl/7.29.0</span><br><span class="line">&gt; Host: 100.64.16.10:8080</span><br><span class="line">&gt; Accept: application/json</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Cache-Control: no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line">&lt; Pragma: no-cache</span><br><span class="line">&lt; Expires: 0</span><br><span class="line">&lt; X-XSS-Protection: 1; mode=block</span><br><span class="line">&lt; X-Frame-Options: DENY</span><br><span class="line">&lt; X-Content-Type-Options: nosniff</span><br><span class="line">&lt; Set-Cookie: JSESSIONID=F06F0016DB0589032994C4D2C296B604; Path=/cas/; HttpOnly</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Date: Wed, 31 Jul 2019 01:17:51 GMT</span><br><span class="line">&lt; Server: CVM</span><br><span class="line">&lt; </span><br><span class="line">* Connection #0 to host 100.64.16.10 left intact</span><br></pre></td></tr></table></figure></p><p>http digest auth过程是:</p><ul><li>初次请求后server端返回401请求，并发送curl一个里header为<code>WWW-Authenticate</code>的请求，里面拥有三个字段<code>Digest realm</code>、<code>qop</code>、<code>nonce</code></li><li><p>curl回复请求，header为<code>Authorization</code>，内容为:</p><ul><li><code>Digest username</code>为用户名</li><li><code>realm</code>为<code>Digest realm</code>的值，<code>nonce</code>、<code>qop</code>为server端返回</li><li><code>uri</code>为去掉host字段的url部分</li><li><code>nc</code>就是<code>nonceCount</code>，用于标记，计数，防止重放攻击，所以这次为1</li><li><code>cnonce</code>客户端发给服务器的随机字符串</li><li><p><code>response</code>的值是由俩个hash加密的，加密的表达式决于<code>qop</code>字段，这里直接写伪代码吧</p><ul><li><p>如果<code>algorithm</code>未定义或者值为<code>MD5</code>:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HA1 = MD5(fmt.Sprintf(<span class="string">"%s:%s:%s"</span>, username, realm, password))</span><br></pre></td></tr></table></figure></li><li><p>如果<code>algorithm</code>值为<code>MD5-sess</code>(和上面差不多，只不过多了<code>:nonce:cnonce</code>):</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HA1 = MD5(fmt.Sprintf(<span class="string">"%s:%s:%s"</span>, MD5(fmt.Sprintf(<span class="string">"%s:%s:%s"</span>, username, realm, password)), nonce, cnonce)</span><br></pre></td></tr></table></figure></li><li><p>如果<code>qop</code>未定义或者值为<code>auth</code>:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HA2 = MD5(fmt.Sprintf(<span class="string">"%s:%s"</span>, method, digestURI))</span><br></pre></td></tr></table></figure></li><li><p>如果<code>qop</code>值为<code>auth-int</code>:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HA2 = MD5(fmt.Sprintf(<span class="string">"%s:%s:%s"</span>, method, digestURI, MD5(entityBody)))</span><br></pre></td></tr></table></figure></li><li><p>如果<code>qop</code>值为<code>auth-int</code>，response为:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = MD5(fmt.Sprintf(<span class="string">"%s:%s:%s:%s:%s:%s"</span>, HA1, nonce, nonceCount, cnonce, qop, HA2))</span><br></pre></td></tr></table></figure></li><li><p>如果<code>qop</code>未定义</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = MD5(fmt.Sprintf(<span class="string">"%s:%s:%s"</span>, HA1, nonce, HA2))</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>所以可以写代码<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cas</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/md5"</span></span><br><span class="line"><span class="string">"crypto/rand"</span></span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/cookiejar"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CAS <span class="keyword">struct</span> &#123;</span><br><span class="line">client  *http.Client</span><br><span class="line">baseUrl <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCAS</span><span class="params">(url, user, pass <span class="keyword">string</span>)</span> <span class="params">(*CAS, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">c := &amp;CAS&#123;</span><br><span class="line">baseUrl: url,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tr := &amp;http.Transport&#123;</span></span><br><span class="line"><span class="comment">//TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">jar, _ := cookiejar.New(<span class="literal">nil</span>)</span><br><span class="line">c.client = &amp;http.Client&#123;</span><br><span class="line">Jar: jar,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, err := c.NewRequest(<span class="string">"GET"</span>, <span class="string">"/cas/casrs/operator/getAuthUrl"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := c.client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode == http.StatusUnauthorized &#123;</span><br><span class="line">digestParts := getDigestParts(resp)</span><br><span class="line">digestParts[<span class="string">"uri"</span>] = url</span><br><span class="line">digestParts[<span class="string">"method"</span>] = req.Method</span><br><span class="line">digestParts[<span class="string">"username"</span>] = user</span><br><span class="line">digestParts[<span class="string">"password"</span>] = pass</span><br><span class="line">req, err = c.NewRequest(<span class="string">"GET"</span>, <span class="string">"/cas/casrs/operator/getAuthUrl"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">"Authorization"</span>, getDigestAuthrization(digestParts))</span><br><span class="line">req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">resp, err = c.client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">struct</span> &#123;</span><br><span class="line">URI <span class="keyword">string</span> <span class="string">`json:"uri"`</span></span><br><span class="line">&#125;&#123;&#125;</span><br><span class="line">err = json.Unmarshal(body, &amp;data)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"NewCAS:json.Unmarshal failed|%s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> data.URI == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"maybe username or password error!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CAS)</span> <span class="title">NewRequest</span><span class="params">(method, url <span class="keyword">string</span>, body io.Reader)</span> <span class="params">(*http.Request, error)</span></span> &#123;</span><br><span class="line">req, err := http.NewRequest(method, fmt.Sprintf(<span class="string">"%s%s"</span>, c.baseUrl, url), body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req.Header.Set(<span class="string">"Accept"</span>, <span class="string">"application/json, text/plain, */*"</span>)</span><br><span class="line">req.Header.Set(<span class="string">"Connection"</span>, <span class="string">"keep-alive"</span>)</span><br><span class="line"><span class="keyword">if</span> body != <span class="literal">nil</span> &#123;</span><br><span class="line">req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> req, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDigestParts</span><span class="params">(resp *http.Response)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">string</span></span> &#123;</span><br><span class="line">result := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(resp.Header[<span class="string">"WWW-Authenticate"</span>]) &gt; <span class="number">0</span> &#123;</span><br><span class="line">wantedHeaders := []<span class="keyword">string</span>&#123;<span class="string">"nonce"</span>, <span class="string">"realm"</span>, <span class="string">"qop"</span>, <span class="string">"algorithm"</span>&#125;</span><br><span class="line">responseHeaders := strings.Split(resp.Header[<span class="string">"WWW-Authenticate"</span>][<span class="number">0</span>], <span class="string">","</span>)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> responseHeaders &#123;</span><br><span class="line"><span class="keyword">for</span> _, w := <span class="keyword">range</span> wantedHeaders &#123;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(r, w) &#123;</span><br><span class="line">result[w] = strings.Split(r, <span class="string">`"`</span>)[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDigestAuthrization</span><span class="params">(digestParts <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ha1, ha2, response <span class="keyword">string</span></span><br><span class="line">d := digestParts</span><br><span class="line"></span><br><span class="line">getMD5 := <span class="function"><span class="keyword">func</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">hasher := md5.New()</span><br><span class="line">hasher.Write([]<span class="keyword">byte</span>(text))</span><br><span class="line"><span class="keyword">return</span> hex.EncodeToString(hasher.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getCnonce := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">8</span>)</span><br><span class="line">_, _ = io.ReadFull(rand.Reader, b)</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%x"</span>, b)[:<span class="number">16</span>]</span><br><span class="line">&#125;</span><br><span class="line">cnonce := getCnonce()</span><br><span class="line">ha1 = getMD5(d[<span class="string">"username"</span>] + <span class="string">":"</span> + d[<span class="string">"realm"</span>] + <span class="string">":"</span> + d[<span class="string">"password"</span>])</span><br><span class="line"><span class="keyword">if</span> strings.Compare(d[<span class="string">"algorithm"</span>], <span class="string">"MD5-sess"</span>) == <span class="number">0</span> &#123;</span><br><span class="line">ha1 = getMD5(ha1 + <span class="string">":"</span> + d[<span class="string">"nonce"</span>] + <span class="string">":"</span> + cnonce)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strings.Compare(d[<span class="string">"qop"</span>], <span class="string">"auth-int"</span>) != <span class="number">0</span> &#123;</span><br><span class="line">ha2 = getMD5(d[<span class="string">"method"</span>] + <span class="string">":"</span> + d[<span class="string">"uri"</span>])</span><br><span class="line">&#125;</span><br><span class="line">nonceCount := <span class="number">00000001</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(d[<span class="string">"qop"</span>]) == <span class="number">0</span> &#123;</span><br><span class="line">response = getMD5(fmt.Sprintf(<span class="string">"%s:%v:%s"</span>, ha1, nonceCount, ha2))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response = getMD5(fmt.Sprintf(<span class="string">"%s:%s:%v:%s:%s:%s"</span>, ha1, d[<span class="string">"nonce"</span>], nonceCount, cnonce, d[<span class="string">"qop"</span>], ha2))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">authorization := fmt.Sprintf(<span class="string">`Digest username="%s", realm="%s", nonce="%s", uri="%s", cnonce="%s", nc="%v", qop="%s", response="%s"`</span>,</span><br><span class="line">d[<span class="string">"username"</span>], d[<span class="string">"realm"</span>], d[<span class="string">"nonce"</span>], d[<span class="string">"uri"</span>], cnonce, nonceCount, d[<span class="string">"qop"</span>], response)</span><br><span class="line"><span class="keyword">return</span> authorization</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>entityBody还没搞清楚是啥，所在qop是<code>auth-int</code>的没写</p><h2 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h2><h3 id="header的host字段"><a href="#header的host字段" class="headerlink" title="header的host字段"></a>header的host字段</h3><p>之前把curl写的一套逻辑尝试写到go里，发现一直不对，最后发现了host字段的锅。抓包的接口host字段和请求的url不一样(这种情况虽然不是很热门，但是是存在的，例如我们命令行访问ip，设置header模拟访问域名)，后面没办法去掉host的header设定就可以了<br>具体移步 <a href="https://github.com/golang/go/issues/7682" target="_blank" rel="noopener">https://github.com/golang/go/issues/7682</a></p><h3 id="上传文件的type"><a href="#上传文件的type" class="headerlink" title="上传文件的type"></a>上传文件的type</h3><p>官方函数CreateFormFile限制了Content-Type为<code>application/octet-stream</code>而且并不打算改，很多时候后端的时候会重视这个type。可以看到之前我的浏览器抓包的type是<code>application/octet-binary</code>所以我们可以写个下面的函数处理<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createAudioFormFile</span><span class="params">(w *multipart.Writer, fieldname, filename <span class="keyword">string</span>)</span> <span class="params">(io.Writer, error)</span></span> &#123;</span><br><span class="line">h := <span class="built_in">make</span>(textproto.MIMEHeader)</span><br><span class="line">h.Set(<span class="string">"Content-Disposition"</span>, fmt.Sprintf(<span class="string">`form-data; name="%s"; filename="%s"`</span>, fieldname, filename))</span><br><span class="line">h.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-binary"</span>)</span><br><span class="line"><span class="keyword">return</span> w.CreatePart(h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以这样用<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fileWriter, err := bodyWriter.CreateFormFile(<span class="string">"fwimage"</span>, filepath.Base(filename))</span><br><span class="line">改为</span><br><span class="line">fileWriter, _ := createAudioFormFile(bodyWriter,<span class="string">"fwimage"</span>, filepath.Base(filename))</span><br></pre></td></tr></table></figure></p><h3 id="json的坑"><a href="#json的坑" class="headerlink" title="json的坑"></a>json的坑</h3><p>下面这张图可能看不出啥问题，但是是问题的一部分，调用的接口的数据经过了cdn，int类型经常出现<code>.0</code>的数字导致我写错类型json.Unmarshal报错，jq也会把.0的去掉取整<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/golang/http/003.jpg" alt="http3"></p><p>参考：</p><ul><li><a href="https://en.wikipedia.org/wiki/Digest_access_authentication" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Digest_access_authentication</a></li><li><a href="https://stackoverflow.com/questions/39474284/how-do-you-do-a-http-post-with-digest-authentication-in-golang" target="_blank" rel="noopener">https://stackoverflow.com/questions/39474284/how-do-you-do-a-http-post-with-digest-authentication-in-golang</a></li><li><a href="https://matt.aimonetti.net/posts/2013-07-golang-multipart-file-upload-example/" target="_blank" rel="noopener">https://matt.aimonetti.net/posts/2013-07-golang-multipart-file-upload-example/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前准备写个简单的api的调用，百度和问了很多人后发现基本对于http的客户端熟悉的人非常少。或者对包的不了解自己造了效率很低的轮子，而且官方一些包里有坑，被坑过，这里简单科普下&lt;/p&gt;
&lt;h2 id=&quot;简单的get和post&quot;&gt;&lt;a href=&quot;#简单的get和post&quot;
      
    
    </summary>
    
    
      <category term="golang" scheme="http://zhangguanzhang.github.io/categories/golang/"/>
    
      <category term="http" scheme="http://zhangguanzhang.github.io/categories/golang/http/"/>
    
    
      <category term="http" scheme="http://zhangguanzhang.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>uefi模式下docker+交换机部署pxe批量安装</title>
    <link href="http://zhangguanzhang.github.io/2019/06/26/uefi-pxe/"/>
    <id>http://zhangguanzhang.github.io/2019/06/26/uefi-pxe/</id>
    <published>2019-06-26T09:10:26.000Z</published>
    <updated>2019-08-13T07:09:54.665Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;华三服务器的ipmi的web提供了nfs挂载iso去安装，也是我之前使用的，发现研发给的镜像在4g以上(镜像基于centos7.3改的，我之前测试都是用的minimal镜像890M左右)。安装的时候报错，然后当面测试得出结论nfs的网速原因，其次也是我们这边办公网是百兆。。。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;办公网被it接管了，交换机密码不给，自己找了台5130交换机，下面接服务器和我自己电脑搭建测了下定制iso的pxe流程</p><p>这是组网情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">             10.96.4.1/24</span><br><span class="line">          +------------+</span><br><span class="line">          |   switch   |</span><br><span class="line">          |            |</span><br><span class="line">          +-+--------+-+</span><br><span class="line">            |        |</span><br><span class="line">            |        |</span><br><span class="line">     +------+        +--------+</span><br><span class="line">     |                        |</span><br><span class="line">     |                        |</span><br><span class="line">     v                        v</span><br><span class="line">+----+------+             +------+------+</span><br><span class="line">| h3c server|             |   my pc     |</span><br><span class="line">+-----------+             +-------------+</span><br><span class="line">                              10.96.4.2</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;叫同事帮忙配置下交换机的dhcp，我虚机桥接的，虚机ip配置为4.2。起初<code>?</code>看到有<code>nextserver</code>还有个<code>tftp-server</code>两命令，以为<code>nextserver</code>是dhcp中继的命令，而<code>tftp-server</code>是指定pxe下载<code>pxelinux.0</code>的tftp ip，也就是一开始下面的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[H3C-S5130-dhcp-pool-1] bootfile-name pxelinux.0</span><br><span class="line">[H3C-S5130-dhcp-pool-1] next-server 10.96.4.2</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pxe的dhcp直接用交换机的，tftp和web我用docker起的，网上的做法基本都不能识别进到菜单界面，最后在 <a href="http://blog.chinaunix.net/uid-22621471-id-4980582.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-22621471-id-4980582.html</a> 找到启发，复制EFI/BOOT下文件到tftp的根目录，并且bootfile-name设置为<code>BOOTX64.EFI</code>。<code>http/cvk</code>下是iso解压的，vmlinuz和initrd是镜像<code>/EFI/BOOT/</code>里复制到tftp根目录的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── http</span><br><span class="line">│   └── cvk</span><br><span class="line">|        .....</span><br><span class="line">├── nginx-conf.d</span><br><span class="line">│   └── default.conf</span><br><span class="line">└── tftp</span><br><span class="line">    ├── BOOTX64.EFI</span><br><span class="line">    ├── fonts</span><br><span class="line">    │   ├── TRANS.TBL</span><br><span class="line">    │   └── unicode.pf2</span><br><span class="line">    ├── grub.cfg</span><br><span class="line">    ├── grubx64.efi</span><br><span class="line">    ├── HDM-1.11.29_signed.bin //华三的HDM固件,忽略</span><br><span class="line">    ├── initrd.img</span><br><span class="line">    ├── MokManager.efi</span><br><span class="line">    ├── TRANS.TBL</span><br><span class="line">    └── vmlinuz</span><br></pre></td></tr></table></figure></p><p>docker-compose.yml<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.4'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  nginx:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">nginx:alpine</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./http:/usr/share/nginx/html</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./nginx-conf.d/:/etc/nginx/conf.d/</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">    logging:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">json-file</span></span><br><span class="line"><span class="attr">      options:</span></span><br><span class="line"><span class="attr">        max-file:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">        max-size:</span> <span class="number">100</span><span class="string">m</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  tftp:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">zhangguanzhang/tftp</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">tftp</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./tftp:/var/tftpboot</span></span><br><span class="line"><span class="attr">    command:</span></span><br><span class="line">      <span class="string">["--verbose",</span> <span class="string">"--foreground"</span><span class="string">,</span> <span class="string">"--secure"</span><span class="string">,</span> <span class="string">"/var/tftpboot"</span><span class="string">]</span></span><br><span class="line"><span class="attr">    network_mode:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">    logging:</span></span><br><span class="line"><span class="attr">      driver:</span> <span class="string">json-file</span></span><br><span class="line"><span class="attr">      options:</span></span><br><span class="line"><span class="attr">        max-file:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">        max-size:</span> <span class="number">100</span><span class="string">m</span></span><br></pre></td></tr></table></figure></p><p>default.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        autoindex    on;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在交换机的dhcp里设置<code>bootfile-name BOOTX64.EFI</code>后pxe进入的菜单是<code>grub.cfg</code>的内容,而一般的官方的启动选项为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linuxefi /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 quiet</span><br><span class="line">initrdefi /images/pxeboot/initrd.img</span><br></pre></td></tr></table></figure></p><p>里面的<code>inst.stage2=hd:LABEL=CentOS\x207\x20x86_64</code>是指向带label的hard disk，这里需要修改为url，并且里面的vmlinuz和initrd要修改为根，需要把这俩文件从镜像文件拷贝到tftp的根目录里，这里我改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linuxefi vmlinuz inst.repo=http://10.96.4.2/cvk ks=http://10.96.4.2:81/ks.cfg inst.ks.sendmac  inst.ks.sendsn quiet</span><br><span class="line">initrdefi initrd.img</span><br></pre></td></tr></table></figure></p><p>url是从我自己go写的一个web占用的81端口，ks会在访问web渲染后返回获取的，详情上一篇,ks文件里得加一行指定安装源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url --url=&quot;http://10.96.4.2/cvk&quot;</span><br></pre></td></tr></table></figure></p><p>一般网上的老资料都说在append后加启动选项<code>ksdevice=eth0</code>的指定获取ks的默认网卡，现在的centos里的anaconda已经改了逻辑会从每张网卡去retry获取，根本不需要指定，指定也可以，但是不是说不指定下会弹出选择需要人为去选择网卡</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/007.png" alt="initrd-init"></p><p>最后给个日志给懂的人<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">tftp daemon.notice in.tftpd[66]: RRQ from 10.0.23.31 filename /grub.cfg-01-9c-e8-95-d8-3c-cd</span><br><span class="line">tftp daemon.notice in.tftpd[67]: RRQ from 10.0.23.31 filename /grub.cfg-01-9c-e8-95-d8-3c-cd</span><br><span class="line">tftp daemon.notice in.tftpd[68]: RRQ from 10.0.23.31 filename /grub.cfg-0A00171F</span><br><span class="line">tftp daemon.notice in.tftpd[69]: RRQ from 10.0.23.31 filename /grub.cfg-0A00171F</span><br><span class="line">tftp daemon.notice in.tftpd[70]: RRQ from 10.0.23.31 filename /grub.cfg-0A00171</span><br><span class="line">tftp daemon.notice in.tftpd[71]: RRQ from 10.0.23.31 filename /grub.cfg-0A00171</span><br><span class="line">tftp daemon.notice in.tftpd[72]: RRQ from 10.0.23.31 filename /grub.cfg-0A0017</span><br><span class="line">tftp daemon.notice in.tftpd[73]: RRQ from 10.0.23.31 filename /grub.cfg-0A0017</span><br><span class="line">tftp daemon.notice in.tftpd[74]: RRQ from 10.0.23.31 filename /grub.cfg-0A001</span><br><span class="line">tftp daemon.notice in.tftpd[75]: RRQ from 10.0.23.31 filename /grub.cfg-0A001</span><br><span class="line">tftp daemon.notice in.tftpd[76]: RRQ from 10.0.23.31 filename /grub.cfg-0A00</span><br><span class="line">tftp daemon.notice in.tftpd[77]: RRQ from 10.0.23.31 filename /grub.cfg-0A00</span><br><span class="line">tftp daemon.notice in.tftpd[78]: RRQ from 10.0.23.31 filename /grub.cfg-0A0</span><br><span class="line">tftp daemon.notice in.tftpd[79]: RRQ from 10.0.23.31 filename /grub.cfg-0A0</span><br><span class="line">tftp daemon.notice in.tftpd[80]: RRQ from 10.0.23.31 filename /grub.cfg-0A</span><br><span class="line">tftp daemon.notice in.tftpd[81]: RRQ from 10.0.23.31 filename /grub.cfg-0A</span><br><span class="line">tftp daemon.notice in.tftpd[82]: RRQ from 10.0.23.31 filename /grub.cfg-0</span><br><span class="line">tftp daemon.notice in.tftpd[83]: RRQ from 10.0.23.31 filename /grub.cfg-0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;华三服务器的ipmi的web提供了nfs挂载iso去安装，也是我之前使用的，发现研发给的镜像在4g以上(镜像基于centos7.3改的，我之前测试都是用的minimal镜像890
      
    
    </summary>
    
    
      <category term="pxe" scheme="http://zhangguanzhang.github.io/categories/pxe/"/>
    
      <category term="docker" scheme="http://zhangguanzhang.github.io/categories/pxe/docker/"/>
    
      <category term="kickstart" scheme="http://zhangguanzhang.github.io/categories/pxe/docker/kickstart/"/>
    
    
      <category term="initrd" scheme="http://zhangguanzhang.github.io/tags/initrd/"/>
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/tags/grub/"/>
    
      <category term="tftp" scheme="http://zhangguanzhang.github.io/tags/tftp/"/>
    
  </entry>
  
  <entry>
    <title>拟定excel表格服务器自动按照表格配置信息和安装的实现过程</title>
    <link href="http://zhangguanzhang.github.io/2019/06/23/autoInstallServer/"/>
    <id>http://zhangguanzhang.github.io/2019/06/23/autoInstallServer/</id>
    <published>2019-06-23T11:11:10.000Z</published>
    <updated>2019-08-21T13:42:23.016Z</updated>
    
    <content type="html"><![CDATA[<p>修改镜像以及编程实现了从服务器买来上电就会自动化安装指定ip和hostname的步骤（包含了自动做raid）,全程非交互</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先讲讲事情的由来，新节点建设，几百台服务器得人为安装系统，虽说服务器有带外ipmi，但是raid和安装系统时候hostname和ip啥的得去配置。系统镜像还是修改过的，安装界面的菜单自动应答通用的流程还不行，于是决定看看能不能研究出来。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想要达到的一个效果就是：服务器送货到节点后，一个人带着电脑和设备的标签，高主频高io啥的分类好后贴上标签，按照贴的写一个所有设备应该配置的信息的excel:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostname  序列号         IPMI IP/maskIPMI 网关管理IP/MASK管理网关  机器型号</span><br><span class="line">test1   210200A00QH18500xxxx10.0.23.34/2410.0.23.110.0.23.41/2410.0.23.1 xxx</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后设备接网线上电后全部自动做raid和安装系统和配置好自己应该配置的那个ip和hostname(而不是装完系统后dhcp上线，而且服务器最少都是八个网口，四个光口和四个电口)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;文章不太会发图片，因为很多中途看的一些资料都过时了导致我走了弯路，以及没有稳定图床，所以我会把图放在我github上在文章里引入，如果不能访问github可能会看不到图。而且服务器安装系统界面那个终端里尝试的命令里一些文本输出无法复制出来，因为没网(虽然后面理解了手动配置了)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我之前对于kickstart和pxe啥的都是看过没实践过，同事说他整pxe和raid的部分，但是后面基本他都太忙了，我就先整镜像的自动应答(打算整出来了他还没整出pxe我就接手试试)，镜像是基于ubuntu修改的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先说说ubuntu的安装自动应答，kickstart是red hat开发的。ubuntu的安装界面是一个debian-installer的二进制文件运行进程提供的选择交互安装界面: </p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/001.png" alt="menu"><br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/002.png" alt="choose"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;安装主要麻烦的是这个交互得频繁人为去输入，ubuntu这个是叫preseed而不是kickstart，经过多方查阅资料，发现安装的菜单定义文件可以在安装完系统后<code>/var/log/machineInstaller/cdebconf/templates.dat</code>找到(<a href="https://www.debian.org/releases/stable/amd64/apbs03.html.zh-cn" target="_blank" rel="noopener">https://www.debian.org/releases/stable/amd64/apbs03.html.zh-cn</a> 该文档说明了也可能安装完会删除)</p><p>找不到的话使用命令查找<code>find /  -not \( -path /proc -prune \) -not \(  -path /var/lib/docker -prune \)  -type f -name templates.dat</code>在ubuntu18.04.2会得出两个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/installer/cdebconf/templates.dat</span><br><span class="line">/var/cache/debconf/templates.dat</span><br></pre></td></tr></table></figure></p><p>第一个文件是菜单文件，第二个是相关的值</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于上面那个选择的界面，我们可以用grep根据关键字找到如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ grep -6 SSV /var/log/machineInstaller/cdebconf/templates.dat</span><br><span class="line">...</span><br><span class="line">Name: xxx-xxx-selection/install</span><br><span class="line">Type: multiselect</span><br><span class="line">Choices: CVM - Cloud Virtualization Manager, CIC - Cloud Intelligence Center, SSV - User Self-Service Portal</span><br><span class="line">Description: Please select install components(press the [Space Bar] to select): </span><br><span class="line">Extended_description: If you choose CVM, CVM will be installed. If you choose CIC, CIC will be installed. If you choose SSV, SSV will be installed. CVK will be installed by default. If you select CVM/CIC, CVM/CIC should be licensed from supplier before running.</span><br><span class="line">Choices-C: CVM, CIC, SSV</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>这个就是菜单来源，查阅资料<br><a href="https://www.debian.org/releases/stable/amd64/apb.html.zh-cn" target="_blank" rel="noopener">https://www.debian.org/releases/stable/amd64/apb.html.zh-cn</a><br><a href="http://ftp.gnome.org/pub/debian-meetings/2006/debconf6/slides/Debian_installer_workshop-Frans_Pop/paper/index.html" target="_blank" rel="noopener">http://ftp.gnome.org/pub/debian-meetings/2006/debconf6/slides/Debian_installer_workshop-Frans_Pop/paper/index.html</a><br>发现debian系列的自动安装都是使用preseed文件，里面写法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;owner&gt; &lt;question name&gt; &lt;question type&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></p><p>owner基本上都是debian-installer，直接写d-i即可，而为<code>&lt;question type&gt;</code>下面这些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ grep -P &apos;^Type&apos; /var/log/machineInstaller/cdebconf/templates.dat | sort -u</span><br><span class="line">Type: boolean</span><br><span class="line">Type: detect-keyboard</span><br><span class="line">Type: entropy</span><br><span class="line">Type: error</span><br><span class="line">Type: multiselect</span><br><span class="line">Type: note</span><br><span class="line">Type: password</span><br><span class="line">Type: select</span><br><span class="line">Type: string</span><br><span class="line">Type: terminal</span><br><span class="line">Type: text</span><br><span class="line">Type: title</span><br></pre></td></tr></table></figure></p><p>各个type见文档 <a href="http://www.fifi.org/doc/debconf-doc/tutorial.html" target="_blank" rel="noopener">http://www.fifi.org/doc/debconf-doc/tutorial.html</a> 里的<code>Table 1. Available data types</code><br>例如上面第二张图那个假设我们安装的时候要选cvm可以写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d-i xxx-xxx-selection/install select CVM</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iso解开的目录<code>/preseed</code>下有一堆seed文件可以参考，preseed文件会写了的话我们得修改内核参数让安装器使用我们的preseed文件应答。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一种方法就是安装界面之前会有个选择内核啥的，我们可以在挂载iso开机的时候赶紧按tab或者e修改内核参数，也可以直接改改启动菜单里的参数</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/003.png" alt="boot-menu"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;菜单的内容是在镜像的<code>isolinux/txt.cfg</code>里:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">default install  # 默认启动的是 &apos;label install&apos; 中标记的启动内核</span><br><span class="line">prompt 1      # 开启会显示命令行&apos;boot: &apos;提示符。prompt值为0时则不提示，将会直接启动&apos;default&apos;参数中指定的内容。</span><br><span class="line">timeout 200   # 超时会自动选择default选择</span><br><span class="line">label install</span><br><span class="line">  menu label ^Install VMC</span><br><span class="line">  kernel /install/vmlinuz</span><br><span class="line">  append DEBCONF_PRIORITY=critical preseed/file=/cdrom/preseed/ubuntu-server.seed vga=788 debian-installer/locale=en_US keyboard-configuration/layoutcode=us console-setup/ask_detect=false console-setup/layoutcode=us localechooser/translation/warn-light=true localechooser/translation/warn-severe=true initrd=/install/initrd.gz quiet --</span><br><span class="line">label cloud</span><br><span class="line">  menu label ^Enlist system with Ubuntu Orchestra Server</span><br><span class="line">  kernel /install/vmlinuz</span><br><span class="line">  append  modules=cobbler-enlist-udeb vga=788 initrd=/install/initrd.gz quiet --</span><br><span class="line">label check</span><br><span class="line">  menu label ^Check disc for defects</span><br><span class="line">  kernel /install/vmlinuz</span><br><span class="line">  append  MENU=/bin/cdrom-checker-menu vga=788 initrd=/install/initrd.gz quiet --</span><br><span class="line">label memtest</span><br><span class="line">  menu label Test ^memory</span><br><span class="line">  kernel /install/mt86plus</span><br><span class="line">label hd</span><br><span class="line">  menu label ^Boot from first hard disk</span><br><span class="line">  localboot 0x80</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中的append段是传递给vmlinuz的内核参数，最后的<code>--</code>后面是传递给后续安装完的内核的参数，<code>preseed/file=</code>后面可以写cdrom，至于vmlinuz和initrd是干啥用的详细可以看看下面的<br><a href="https://blog.51cto.com/smileyouth/1268810" target="_blank" rel="noopener">https://blog.51cto.com/smileyouth/1268810</a><br><a href="https://blog.csdn.net/yangxuan12580/article/details/51372632" target="_blank" rel="noopener">https://blog.csdn.net/yangxuan12580/article/details/51372632</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单来讲就是BIOS加电自检 –&gt;  运行isolinux目录下面的isolinux.bin文件，这个isolinux.bin文件根据isolinux.cfg文件的选项来加载内核vmlinuz和initrd.img文件，initrd.img文件会在内存中生成一个虚拟的linux操作系统，为安装过程提供一个安装环境 -&gt; 执行initrd这个rootfs的/init<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/004.png" alt="initrd-init"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个initrd在安装的时候可以ctrl+shift+f2进到终端里，查看了下进程发现了好像是个busybox，下面一篇文章是busybox的init干了些啥的文章<br><a href="https://blog.csdn.net/yangxuan12580/article/details/51372632" target="_blank" rel="noopener">https://blog.csdn.net/yangxuan12580/article/details/51372632</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;简单的看了下里面shell的调用流程找到了这个，append的参数会在/proc/cmdline里，另外ks或者preseed文件不一定需要放在cdrom里，也可以网络上，如果是网络的话在获取之前会尝试以所有的网卡dhcp获取ip，获取到了就会去下载<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/005.png" alt="initrd-init"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最终实现了自动应答(这里先不追求每个机器配置的ip应该不通)，然后同事告诉我们新节点的镜像后续用centos，我就放下了ubuntu，自己准备摸索下centos的</p><p>后面按照这个文章了解了下pxe<br><a href="https://linuxgeeks.github.io/2018/01/22/162310-Kickstart%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E5%AE%89%E8%A3%85CentOS6.8/" target="_blank" rel="noopener">https://linuxgeeks.github.io/2018/01/22/162310-Kickstart%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E5%AE%89%E8%A3%85CentOS6.8/</a></p><p><img src="https://linuxgeeks.github.io/2018/01/22/162310-Kickstart%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E5%AE%89%E8%A3%85CentOS6.8/pxe1.jpg" alt="pxe"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pxe启动步骤就是如上图，需要配置一个tftp，让类似于安装界面安装包的时候从tftp上去下载，vmlinuz和initrd均是从tftp上下载</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;步骤比较简单，然后用vmware开两台虚机测试了下可行，然后主要是应答，我就直接拿物理服务器nfs挂载centos的iso去看看centos的自动应答咋整。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;服务器是华三的，像dell之类的在服务器没系统的时候有cli可以外部去设置bios一些参数和做raid，华三没有。华三基本都是要人为交互。远程装机是华三的ipmi起了个web页面，页面上能获取基本信息和设置远程<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/006.png" alt="hdm"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于这种web，华三叫hdm，dell叫idrac，hpe叫iLO。上面可以远程，设置下一次从啥设备启动，控制电源啥的。实际上ipmi的硬件还提供了ssh，ssh上可以敲命令获取和设置服务器的信息，各个厂商的命令具体的可能不一样，这个ssh叫做SMASH CLP标准<br>初期想到的思路是:</p><ul><li>1.人为清点服务器，写好所有服务器的序列号，ipmi和系统应该配置的信息，然后服务器贴好hostname的标签上架好布好线</li><li>2.服务器ipmi的硬件网口接网线后会dhcp上线随机分配一个ip</li><li>3.写一个cli或者脚本ssh交换机获取arp信息。扫描机器序列号是否在excel里(这步防止全部操作了不必要的服务器，后期也可以判断加扩展)，是就用SMASH CLP设置ipmi网络信息设置从nfs指定iso启动，并且在excel里记录服务器的四个电口mac地址</li><li>4.启动的iso里指定了kickstart文件，然后服务器在安装界面出来之前会dhcp获取ip去下载ks文件，而dhcp上线的mac就是四张电口的mac地址之一。获取ip是每个网口尝试去发dhcp请求，如下图实际上这个物理机我只连线了一个电口，电口网卡名为enp61s0f2，获取到了ip就会下载ks文件，那个speed相关就是curl下载的进度输出。<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/007.png" alt="initrd-init"></li><li>5.dhcp得到ip后从我这web拿ks文件，我这web返回ks文件之前那客户端的来源ip去连接交换机查客户端的mac地址(因为此时对于每一台服务器的来源ip不是固定的，mac地址是固定的)，查到mac地址后在excel看来源mac地址是那行确定了是哪个机器，返回渲染的ks文件（文件里渲染了ip和hostname之类的信息），服务器会自动安装和设置</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要是从第三部开始实现，SMASH CLP就是ssh执行命令，里面路径信息得自己去找，具体的一些找过的资料可以看我另一个文章里的链接 <a href="https://zhangguanzhang.github.io/2019/06/12/CLP/">https://zhangguanzhang.github.io/2019/06/12/CLP/</a> 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CLP非常麻烦，寻思着有没有hdm的api，询问了社区和相关人员确定了没有api文档，只能浏览器界面上点击然后F12打开network抓包找接口。http请求用go的<code>net/http</code>包，excel用的<code>github.com/360EntSecGroup-Skylar/excelize/v2</code>国人开发的包，主要是由自己的example文档界面 <a href="https://xuri.me/excelize/zh-hans/utils.html#CellNameToCoordinates" target="_blank" rel="noopener">https://xuri.me/excelize/zh-hans/utils.html#CellNameToCoordinates</a> 。ssh操作交换机找了下找到了一个大佬写的包，把其中连接交换机执行命令的部分给扣出来使用，但是字符串提取<code>dis arp</code>的纯ip和mac部分文本遇到了诡异的问题，想着按照<code>\n</code>去split成切片然后去掉前面两个和最后一个就是纯arp列表了，然后每行按照空格split下就能提取到ip和mac了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   Type: S-Static    D-Dynamic    O-Openflow   R-Rule   I-Invalid</span><br><span class="line">IP address      MAC address    SVLAN/VSI  Interface/Link ID        Aging Type </span><br><span class="line">10.254.250.250  dcda-80fb-b321 --         GE1/0/0                  10    D    </span><br><span class="line">61.181.149.xxx  4c09-b4f4-c7f1 --         GE1/0/2                  20    D    </span><br><span class="line">10.0.6.253      a80c-0d00-26d4 --         GE1/0/3                  16    D    </span><br><span class="line">10.101.1.2      3cf5-cc94-155a 20         GE1/0/4                  8     D    </span><br><span class="line">&lt;FW-IT-TJ&gt;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是当时打印了是split后切片元素值不对，以为是库的问题给大佬发了好友请求，想咨询下大佬，后续自己找到问题了，是因为交换机的换行是<code>\r</code>，这里就不放代码了。后续加上大佬交流了下，把整个思路给他说了下，他说没必要ssh交换机，你只是获取信息用snmp就行了。之前对于snmp也是只知道有个mib库和oid啥的，具体干啥的不清楚。查阅了相关资料明白了 <a href="https://blog.csdn.net/zqixiao_09/article/details/77127448" target="_blank" rel="noopener">https://blog.csdn.net/zqixiao_09/article/details/77127448</a><br>我这里办公网的交换机没密码连不上，连了个防火墙，这部分是一样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;FW-IT-TJ&gt;dis current-configuration | include snmp</span><br><span class="line"> snmp-agent</span><br><span class="line"> snmp-agent local-engineid 800063A28088DF9E7356xxxxxxxx</span><br><span class="line"> snmp-agent community read public</span><br><span class="line"> snmp-agent sys-info version v2c v3 </span><br><span class="line">&lt;FW-IT-TJ&gt;</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在来讲所有的网络设备都支持snmp ，协议版本号都是v2居多，v3认证挺严格的一般用的太少。<br>v2协议认证非常简单，snmp协议是161端口，udp和tcp均可，我们可以安装一个snmpwalk命令测试下，<code>community read</code>后面的字符串就是v2协议下认证的口令，默认是<code>public</code>。snmpwalk连接格式为下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v&lt;协议版本&gt; -c &lt;community string&gt; &lt;网络设备的登陆ip&gt;        &lt;对象标识符,也就是oid&gt;</span><br></pre></td></tr></table></figure></p><p>协议版本号为 1|2c|3，我们用2就写2c<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v2c -c public 10.0.23.1     .</span><br></pre></td></tr></table></figure></p><p>命令输出的信息会非常多，因为我们的oid写的是一个点，oid实际上就是一个mib树的路径<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/008.png" alt="mib"></p><p>比如我们要查询系统信息，就是左下角，oid为.1.3.6.1.2.1.1，walk一下测试看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ snmpwalk -v2c -c public 10.0.23.1          .1.3.6.1.2.1.1</span><br><span class="line">SNMPv2-MIB::sysDescr.0 = STRING: H3C Comware Platform Software, Software Version 7.1.070, Release 2510P02</span><br><span class="line">H3C S6800-54QF</span><br><span class="line">Copyright (c) 2004-2017 New H3C Technologies Co., Ltd. All rights reserved.</span><br><span class="line">SNMPv2-MIB::sysObjectID.0 = OID: SNMPv2-SMI::enterprises.25506.1.1733</span><br><span class="line">DISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (1045202613) 120 days, 23:20:26.13</span><br><span class="line">SNMPv2-MIB::sysContact.0 = STRING: New H3C Technologies Co., Ltd.</span><br><span class="line">SNMPv2-MIB::sysName.0 = STRING: IT_S6800-54QF</span><br><span class="line">SNMPv2-MIB::sysLocation.0 = STRING: Hangzhou, China</span><br><span class="line">SNMPv2-MIB::sysServices.0 = INTEGER: 78</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这些基本都是通用的，遵循着上图的那个树，但是具体的信息好像得看厂家的设计，例如arp在ip下面，搜索了下华三交换机的arp oid为<code>.1.3.6.1.2.1.4.22.1.2</code>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后搜索了下go的snmp库，用的gosnmp这个库，后续写cli的时候指定了snmp，ip，community字符等选项。测试了下发现实际上写错误信息也没报错无法连接，看了newClient的时候缺省是udp传输，改成tcp的也不行，于是想着先看看能不能oid获取到交换机信息来判断连接信息传入正确，也就是用上面的systeminfo的oid。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后http api设置服务器下一次以uefi和CDROM启动，挂载我启动的nfs上的iso也写出来了。这个时候主机组那边的iso，我用的官方centos先测，还没做好启动后进入安装界面<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/009.png" alt="install-menu"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按e编辑修改参数加入ks文件，这个ks的web是我用虚机nginx搭建的，这里编辑可以防止去修改iso改菜单加参数。因为我笔记本偶尔wifi，偶尔网线，我虚机是桥接的ip会变化，所以改镜像很麻烦，这里我直接e或者tab编辑手写参数先测试。总之实现的流程是这样:</p><ul><li>1.人为清点服务器，写好所有服务器的序列号，ipmi和系统应该配置的信息，然后服务器贴好hostname的标签上架好布好线</li><li>2.服务器ipmi的硬件网口接网线后会dhcp上线随机分配一个ip</li><li>3.cli snmp交换机获取arp信息。扫描机器序列号是否在excel里(这步防止全部操作了不必要的服务器，后期也可以判断加扩展)，是就用http api设置从nfs指定iso启动，并且在excel里记录服务器的四个电口mac地址，并且设置ipmi的网络信息（因为此时的ipmi硬件是dhcp上线的，不符合表格里的最终设置ip）</li><li>4.启动的iso是修改过的，里面参数里指定了kickstart文件，然后服务器在安装界面出来之前会dhcp获取ip去下载ks文件，文件的url是我的web server，返回ks文件之前会查询</li><li>5.dhcp得到ip后从我这web拿ks文件，我这web返回ks文件之前那客户端的来源ip去连接交换机查客户端的mac地址(因为此时对于每一台服务器的来源ip不是固定的，mac地址是固定的)，查到mac地址后在excel看来源mac地址是那行确定了是哪个机器，返回渲染的ks文件（文件里渲染了ip和hostname之类的信息），服务器会自动安装和设置</li></ul><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/010.png" alt="install-menu"></p><p>ks里返回前是用go的<code>html/tempalte</code>渲染的，模板部分是下面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;if and .IP .Mask .Gateway&#125;&#125;</span><br><span class="line">network  --bootproto=static --device=enp61s0f2 --ip &#123;&#123;.IP&#125;&#125; --netmask &#123;&#123;.Mask&#125;&#125; --gateway &#123;&#123;.Gateway&#125;&#125; --onboot=yes</span><br><span class="line">&#123;&#123;else&#125;&#125;</span><br><span class="line">network  --bootproto=dhcp --device=enp61s0f2 --onboot=yes --ipv6=auto --no-activate</span><br><span class="line">&#123;&#123;end&#125;&#125;</span><br><span class="line">network  --hostname=&#123;&#123;if .Hostname &#125;&#125;&#123;&#123;.Hostname&#125;&#125;&#123;&#123;else&#125;&#125;&#123;&#123;.Mac&#125;&#125;&#123;&#123;end&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>这个时候实现的cli分了阶段，初次是扫描交换机扫描出在表格里的服务器，也就是上面图的H后面的列信息获取了写到excel里</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/011.png" alt="scan"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为我excel里只有我那台测试机器，办公网里实际上还有其他的服务器，由于他们的序列号不在excel里所以不会被填入到excel里和设置启动啥的。第二阶段就是cli启动http让机器获取ks文件，现在其实每个机器返回不同的ks文件都解决了，但是raid还是解决不了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raid部分查阅了挺多的资料的，因为华三的ipmi没有cli连接方式去设置raid，初期搜索的关键词都是uefi shell做raid，找到的资料都是其他厂商的，例如hp的有efi shell(可以在启动顺序选择uefi shell之类的进入)里做raid的脚本，efi看了下需要c去编程<br><a href="https://www.manualshelf.com/manual/hp/hp-z420-workstation/creating-raid-arrays-in-the-efi-shell-white-paper/page-3.html" target="_blank" rel="noopener">https://www.manualshelf.com/manual/hp/hp-z420-workstation/creating-raid-arrays-in-the-efi-shell-white-paper/page-3.html</a><br><a href="https://support.hpe.com/hpsc/doc/public/display?docId=emr_na-c03886480&amp;docLocale=zh_CN" target="_blank" rel="noopener">https://support.hpe.com/hpsc/doc/public/display?docId=emr_na-c03886480&amp;docLocale=zh_CN</a><br><a href="https://support.hpe.com/hpsc/doc/public/display?docId=c04398273" target="_blank" rel="noopener">https://support.hpe.com/hpsc/doc/public/display?docId=c04398273</a><br><a href="http://h17007.www1.hpe.com/docs/iss/proliant_uefi/UEFI_Moonshot_103117/s_sysconfig_attrib.html" target="_blank" rel="noopener">http://h17007.www1.hpe.com/docs/iss/proliant_uefi/UEFI_Moonshot_103117/s_sysconfig_attrib.html</a><br><a href="https://blog.csdn.net/thewayma/article/details/4588182" target="_blank" rel="noopener">https://blog.csdn.net/thewayma/article/details/4588182</a><br><a href="https://blog.csdn.net/lizhihua0925/article/details/53198483" target="_blank" rel="noopener">https://blog.csdn.net/lizhihua0925/article/details/53198483</a></p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/012.png" alt="uefi-menu"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uefi启动的话我们按e进入编辑界面发现路径为图里的，我们打开镜像发现了这些文件，hp在efi shell界面的配置raid是因为他们专门的人员去开发了下面图里类似的xxx.efi文件</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/013.png" alt="uefi-iso"><br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/014.png" alt="uefi-ls"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;后续搜索资料无意中搜到了个pxe自动做raid的文章: <a href="https://blog.csdn.net/lizhihua0925/article/details/53198483" target="_blank" rel="noopener">https://blog.csdn.net/lizhihua0925/article/details/53198483</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个文章帮助了我，安装界面的时候就是一个在跑着的系统，文章里是把阵列命令加到了镜像里，这个跑着的系统虽然不是最终系统，但是我们可以在kickstart的%pre阶段创建出raid。然后我测试的物理机安装了系统后把storcli传进去获取不到，询问了存储同事说可以用arcconf，最后自己摸索出了一些信息。</p><p>一般服务器对应的为这些cli</p><ul><li>IBM(MegaCli) 已经被storcli整合了，LSI控制器的阵列卡均可以使用storcli，部分dell的R系列也是megaraid啥的，应该也可以用strocli</li><li>HP(hpacucli)</li><li>Adaptec(arcconf)</li><li>还有其他的cli，可以去这篇文章看看<a href="https://blog.51cto.com/1130739/1771506" target="_blank" rel="noopener">https://blog.51cto.com/1130739/1771506</a></li></ul><p>如果是要下载storcli可以去博通官网<a href="https://www.broadcom.com搜索sotrcli下载`Latest" target="_blank" rel="noopener">https://www.broadcom.com搜索sotrcli下载`Latest</a> MegaRAID Storcli`</p><p>其他的厂商就不知道啥命令了，大家自行摸索，我这里查到是<code>Adaptec</code>的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dmesg | grep -i raid  </span><br><span class="line">[    4.058107] Adaptec aacraid driver 1.2.1[50877]-custom</span><br></pre></td></tr></table></figure></p><p>arcconf安装在yum源里是没有的，Adaptec现在改名为Microsemi，下载arcconf的话去官网 <a href="https://storage.microsemi.com/en-us/downloads/" target="_blank" rel="noopener">https://storage.microsemi.com/en-us/downloads/</a> 进所有产品-&gt;<code>Adaptec SCSI RAID</code> -&gt; <code>Adaptec Series 8 SAS/SATA 12 Gb</code>  RAID <code>Storage Manager Downloads</code> -&gt; <code>Downloads  Microsemi Adaptec ARCCONF Command Line Utility v3.01.23531</code></p><p>里面有rpm包安装了即可， 下面是我这台测试的物理机安装了后的操作，查看物理卷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">$ arcconf getconfig 1 pd</span><br><span class="line">Controllers found: 1</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Physical Device information</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">      Device #0</span><br><span class="line">         Device is a Hard drive</span><br><span class="line">         State                              : Online</span><br><span class="line">         Block Size                         : 512 Bytes</span><br><span class="line">         Supported                          : Yes</span><br><span class="line">         Programmed Max Speed               : SAS 12.0 Gb/s</span><br><span class="line">         Transfer Speed                     : SAS 12.0 Gb/s</span><br><span class="line">         Reported Channel,Device(T:L)       : 0,0(0:0)</span><br><span class="line">         Reported Location                  : Enclosure 0, Slot 0(Connector 0)</span><br><span class="line">         Reported ESD(T:L)                  : 2,0(0:0)</span><br><span class="line">         Vendor                             : SEAGATE</span><br><span class="line">         Model                              : ST600MM0208</span><br><span class="line">         Firmware                           : N001</span><br><span class="line">         Serial number                      : W0M0P1CK0000E8228T49</span><br><span class="line">         World-wide name                    : 5000C500A13EBBC0</span><br><span class="line">         Reserved Size                      : 956312 KB</span><br><span class="line">         Used Size                          : 571391 MB</span><br><span class="line">         Unused Size                        : 1 MB</span><br><span class="line">         Total Size                         : 572325 MB</span><br><span class="line">         Write Cache                        : Disabled (write-through)</span><br><span class="line">         FRU                                : None</span><br><span class="line">         S.M.A.R.T.                         : No</span><br><span class="line">         S.M.A.R.T. warnings                : 0</span><br><span class="line">         Power State                        : Full rpm</span><br><span class="line">         Supported Power States             : Full rpm,Powered off</span><br><span class="line">         SSD                                : No</span><br><span class="line">         Temperature                        : 20 C/ 68 F </span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">      Device Phy Information                </span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">         Phy #0</span><br><span class="line">            PHY Identifier                  : 0</span><br><span class="line">            SAS Address                     : 5000C500A13EBBC1</span><br><span class="line">            Attached PHY Identifier         : 3</span><br><span class="line">            Attached SAS Address            : 560DA833FB704000</span><br><span class="line">         Phy #1</span><br><span class="line">            PHY Identifier                  : 1</span><br><span class="line">            SAS Address                     : 5000C500A13EBBC2</span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">      Runtime Error Counters                </span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">         Hardware Error Count               : 0</span><br><span class="line">         Medium Error Count                 : 0</span><br><span class="line">         Parity Error Count                 : 0</span><br><span class="line">         Link Failure Count                 : 0</span><br><span class="line">         Aborted Command Count              : 0</span><br><span class="line">         SMART Warning Count                : 0</span><br><span class="line"></span><br><span class="line">      Device #1</span><br><span class="line">         Device is a Hard drive</span><br><span class="line">         State                              : Online</span><br><span class="line">         Block Size                         : 512 Bytes</span><br><span class="line">         Supported                          : Yes</span><br><span class="line">         Programmed Max Speed               : SAS 12.0 Gb/s</span><br><span class="line">         Transfer Speed                     : SAS 12.0 Gb/s</span><br><span class="line">         Reported Channel,Device(T:L)       : 0,1(1:0)</span><br><span class="line">         Reported Location                  : Enclosure 0, Slot 1(Connector 0)</span><br><span class="line">         Reported ESD(T:L)                  : 2,0(0:0)</span><br><span class="line">         Vendor                             : SEAGATE</span><br><span class="line">         Model                              : ST600MM0208</span><br><span class="line">         Firmware                           : N001</span><br><span class="line">         Serial number                      : W0M0MRP60000E8229ZTR</span><br><span class="line">         World-wide name                    : 5000C500A13E6E5C</span><br><span class="line">         Reserved Size                      : 956312 KB</span><br><span class="line">         Used Size                          : 571391 MB</span><br><span class="line">         Unused Size                        : 1 MB</span><br><span class="line">         Total Size                         : 572325 MB</span><br><span class="line">         Write Cache                        : Disabled (write-through)</span><br><span class="line">         FRU                                : None</span><br><span class="line">         S.M.A.R.T.                         : No</span><br><span class="line">         S.M.A.R.T. warnings                : 0</span><br><span class="line">         Power State                        : Full rpm</span><br><span class="line">         Supported Power States             : Full rpm,Powered off</span><br><span class="line">         SSD                                : No</span><br><span class="line">         Temperature                        : 20 C/ 68 F </span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">      Device Phy Information                </span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">         Phy #0</span><br><span class="line">            PHY Identifier                  : 0</span><br><span class="line">            SAS Address                     : 5000C500A13E6E5D</span><br><span class="line">            Attached PHY Identifier         : 2</span><br><span class="line">            Attached SAS Address            : 560DA833FB704000</span><br><span class="line">         Phy #1</span><br><span class="line">            PHY Identifier                  : 1</span><br><span class="line">            SAS Address                     : 5000C500A13E6E5E</span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">      Runtime Error Counters                </span><br><span class="line">      ----------------------------------------------------------------</span><br><span class="line">         Hardware Error Count               : 0</span><br><span class="line">         Medium Error Count                 : 0</span><br><span class="line">         Parity Error Count                 : 0</span><br><span class="line">         Link Failure Count                 : 0</span><br><span class="line">         Aborted Command Count              : 0</span><br><span class="line">         SMART Warning Count                : 0</span><br><span class="line"></span><br><span class="line">      Device #2</span><br><span class="line">         Device is an Enclosure Services Device</span><br><span class="line">         Reported Channel,Device(T:L)       : 2,0(0:0)</span><br><span class="line">         Enclosure ID                       : 0</span><br><span class="line">         Type                               : SES2</span><br><span class="line">         Vendor                             : ADAPTEC</span><br><span class="line">         Model                              : Virtual SGPIO</span><br><span class="line">         Firmware                           :    1</span><br><span class="line">         Status of Enclosure Services Device</span><br><span class="line">            Speaker status                  : Not Available</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command completed successfully.</span><br></pre></td></tr></table></figure></p><p>可以看到两个硬盘，实际上也是只有两块硬盘，而<code>Device #2</code>不是属于硬盘，属于自带的一个抽象的东西，具体是啥不清楚，查看raid<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ arcconf getconfig 1 LD </span><br><span class="line">Controllers found: 1</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Logical device information</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Logical Device number 0</span><br><span class="line">   Logical Device name                      : DefaultValue0</span><br><span class="line">   Block Size of member drives              : 512 Bytes</span><br><span class="line">   RAID level                               : 1</span><br><span class="line">   Unique Identifier                        : B091F52F</span><br><span class="line">   Status of Logical Device                 : Optimal</span><br><span class="line">   Additional details                       : Quick initialized</span><br><span class="line">   Size                                     : 571381 MB</span><br><span class="line">   Parity space                             : 571391 MB</span><br><span class="line">   Interface Type                           : Serial Attached SCSI</span><br><span class="line">   Device Type                              : HDD</span><br><span class="line">   Read-cache setting                       : Enabled</span><br><span class="line">   Read-cache status                        : On</span><br><span class="line">   Write-cache setting                      : On when protected by battery/ZMM</span><br><span class="line">   Write-cache status                       : On</span><br><span class="line">   Partitioned                              : Yes</span><br><span class="line">   Protected by Hot-Spare                   : No</span><br><span class="line">   Bootable                                 : Yes</span><br><span class="line">   Failed stripes                           : No</span><br><span class="line">   Power settings                           : Disabled</span><br><span class="line">   --------------------------------------------------------</span><br><span class="line">   Logical Device segment information</span><br><span class="line">   --------------------------------------------------------</span><br><span class="line">   Segment 0                                : Present (572325MB, SAS, HDD, Enclosure:0, Slot:0) W0M0P1CK0000E8228T49</span><br><span class="line">   Segment 1                                : Present (572325MB, SAS, HDD, Enclosure:0, Slot:1) W0M0MRP60000E8229ZTR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command completed successfully.</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;参照之前ubuntu的，分析了下centos的启动流程，机器bios设置的是uefi启动，启动流程为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST -&gt; 镜像的EFI/BOOT/grub.cfg -&gt; load 镜像里的内核/images/pxeboot/vmlinuz和加载/images/pxeboot/initrd.img -&gt; 安装界面</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面寻思着把arcconf命令整到这个initrd里，initrd是啥看前面那个Linux启动流程的文章，我们可以理解为内存内核vmlinuz的rootfs，但是最终实际上centos似乎多了个步骤，下图是物理机挂载了iso后安装界面ctrl+shift+f2切到终端后看/usr/sbin目录的可执行文件有哪些</p><p><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/015.png" alt="install-shell"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是我们看<code>CentOS-7-x86_64-Minimal-1810.iso\images\pxeboot\initrd.img\initrd\usr\sbin\</code>里的压根就没这些命令，起初我是把arcconf加到这个initrd里，最后安装界面切到终端里压根就没arcconf命令<br><img src="https://raw.githubusercontent.com/zhangguanzhang/Image-Hosting/master/machineInstaller/016.png" alt="initrd-sbin"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实际上centos的具体流程根据推理应该是这样</p><ul><li>vmlinuz内核加载initrd.img挂载成rootfs，然后读取append的参数做一些处理，</li><li>如果有kickstart会根据=后面的value前面看是啥开头。如果是非cdrom就会dhcp去retry每一张网卡去下载ks文件，</li><li><code>inst.stage2=</code>参数: 指定要载入的安装程序运行时映像位置。其语法与 指定安装源 相同。这个选项需要包含有效<code>.treeinfo</code>文件的目录路径；如果发现这个文件，则会从这个文件中读取运行时映象位置。如果<code>.treeinfo</code>文件不可用，Anaconda 会尝试从<code>LiveOS/squashfs.img</code>中载入该映象。</li><li>grub.cfg里的<code>search --no-floppy --set=root -l &#39;CentOS 7 x86_64&#39;</code>会把带label=<code>CentOS 7 x86_64</code>的设置成root磁盘(这段很重要)</li><li>默认的append参数指定stage2为iso，最终安装界面的rootfs就是<code>CentOS-7-x86_64-Minimal-1810.iso\LiveOS\squashfs.img\</code>这个rootfs，这个<code>squashfs.img</code>是个高压缩的rootfs，挂载了它后chroot进去，最终它的rootfs才是我们在安装界面切换到的终端，我们没必要去修改initrd</li></ul><p>这是我刚开始修改initrd的步骤<br>参考<a href="https://wiki.gentoo.org/wiki/Custom_Initramfs" target="_blank" rel="noopener">https://wiki.gentoo.org/wiki/Custom_Initramfs</a><br>虚机上挂载了centos的iso<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd </span><br><span class="line">$ mkdir /root/test</span><br><span class="line">$ mount -t auto /dev/drom /mnt</span><br><span class="line">$ cp -ar /mnt /root/iso   # 原来root下没有iso目录，拷贝过来重命名为iso</span><br><span class="line">$ umount /mnt</span><br><span class="line">$ cp iso/images/pxeboot/initrd.img test/</span><br><span class="line">$ cd  test</span><br><span class="line">$ xz -dc ../initrd.img | cpio -id</span><br><span class="line">271820 blocks</span><br></pre></td></tr></table></figure></p><p>修改一些东西后下面是打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ find . -print0 | cpio --null --create --verbose --format=newc | gzip --best &gt; ../myinitrd</span><br><span class="line">$ yum install mkisofs isomd5sum -y</span><br><span class="line">$ cd iso</span><br><span class="line">  #执行封装镜像的命令：</span><br><span class="line">$ mkisofs -U \</span><br><span class="line">  -A &apos;CentOS 7 x86_64&apos; \</span><br><span class="line">  -V &apos;CentOS 7 x86_64&apos; \</span><br><span class="line">  -volset &apos;CentOS 7 x86_64&apos; \</span><br><span class="line">  -J -joliet-long -r -v -T \</span><br><span class="line">   -o /root/CentOS-MY.iso \</span><br><span class="line">   -b isolinux/isolinux.bin \</span><br><span class="line">   -c isolinux/boot.cat \</span><br><span class="line">   -no-emul-boot -boot-load-size 4 \</span><br><span class="line">    -boot-info-table  \</span><br><span class="line">   -eltorito-alt-boot \</span><br><span class="line">  -e images/efiboot.img -no-emul-boot .</span><br></pre></td></tr></table></figure></p><p>注意<code>CentOS 7 x86_64</code>这部分不能乱写，我看网上的基本都是乱写或者没详细说明的，导致了uefi启动压根就没识别到iso，这个字段必须得是grub.cfg里的字段。也就是因为那个<code>inst.stage2=</code>和search以及这里制作iso的要一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep search EFI/BOOT/grub.cfg </span><br><span class="line">search --no-floppy --set=root -l &apos;CentOS 7 x86_64&apos;</span><br></pre></td></tr></table></figure></p><p>这个字段对上了才能识别到iso，参考 <a href="https://access.redhat.com/discussions/762253" target="_blank" rel="noopener">https://access.redhat.com/discussions/762253</a></p><p>校验并写入 md5 值(可选)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ implantisomd5 /root/CentOS-MY.iso</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的镜像打包命令我们后续也会用到，实际上我们还是得要把arcconf弄到<code>squashfs.img</code>里，因为安装界面对比/usr/sbin里文件就会发现是<code>squashfs.img</code>这个rootfs。此时物理机是安装界面，我切到终端配置了下ip和路由，然后把我安装了arcconf的虚机的命令拷贝到物理机上，因为这个rootfs相比initrd多了很多依赖，我们测试看看能不能使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr add 10.0.23.41/24 dev enp61s0f2</span><br><span class="line">$ route add -net 0.0.0.0/0 gw 10.0.23.1 dev enp61s0f2</span><br><span class="line">$ scp 10.0.23.79:/usr/sbin/arcconf /usr/sbin/</span><br><span class="line">$ arcconf getconfig 1 ld</span><br><span class="line">Controllers found: 1</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">Logical device infomation</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">   No logical devices configured</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command completed successfully.</span><br></pre></td></tr></table></figure></p><p>命令测试可用，我们后面直接修改<code>squashfs.img</code>添加/usr/sbin/arcconf后打包即可。<br>假设命令不可用，我们得把命令相关的动态链接库给拷贝过去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cd /lib64</span><br><span class="line">$ ldd /usr/sbin/arcconf </span><br><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffc8a548000)</span><br><span class="line">libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007fb1fdeee000)</span><br><span class="line">libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fb1fdcd2000)</span><br><span class="line">libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007fb1fd9cb000)</span><br><span class="line">libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fb1fd6c9000)</span><br><span class="line">libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007fb1fd4b3000)</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fb1fd0e6000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007fb1fe0f2000)</span><br><span class="line">$ echo md5sum $(ldd /usr/sbin/arcconf | grep -Po &apos;/lib64/\K\S+&apos;)</span><br><span class="line">md5sum libdl.so.2 libpthread.so.0 libstdc++.so.6 libm.so.6 libgcc_s.so.1 libc.so.6 ld-linux-x86-64.so.2</span><br><span class="line">$ md5sum libdl.so.2 libpthread.so.0 libstdc++.so.6 libm.so.6 libgcc_s.so.1 libc.so.6 ld-linux-x86-64.so.2</span><br><span class="line">df69ee999269a70ee78fed4d39b6ab0a  libdl.so.2</span><br><span class="line">390e1ad4fd8b47508a0b80799acf83bf  libpthread.so.0</span><br><span class="line">bde5a21296b3dc19b0c374b324f97d4a  libstdc++.so.6</span><br><span class="line">0dc5febf77645a7d2e0b8aabbb85995d  libm.so.6</span><br><span class="line">ed3dac8e74ed913de13ee3dd7093e83e  libgcc_s.so.1</span><br><span class="line">03ce524a3e41c8f70daff7ca7a82f9ba  libc.so.6</span><br><span class="line">545bc0249fd1bee457dcec4bbda603b7  ld-linux-x86-64.so.2</span><br></pre></td></tr></table></figure><p>自行看有没有对应的so和md5值一样，其中的<code>linux-vdso.so.1</code>不用管 <a href="https://blog.csdn.net/wang_xya/article/details/43985241" target="_blank" rel="noopener">https://blog.csdn.net/wang_xya/article/details/43985241</a></p><p>接下来修改<code>squashfs.img</code>添加<code>arcconf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ yum install livecd-tools -y</span><br><span class="line">$ cd /root/iso/LiveOS</span><br><span class="line">$ unsquashfs  squashfs.img </span><br><span class="line">Parallel unsquashfs: Using 2 processors</span><br><span class="line">1 inodes (16384 blocks) to write</span><br><span class="line"></span><br><span class="line">[=========================================================================================================================================================|] 16384/16384 100%</span><br><span class="line"></span><br><span class="line">created 1 files</span><br><span class="line">created 2 directories</span><br><span class="line">created 0 symlinks</span><br><span class="line">created 0 devices</span><br><span class="line">created 0 fifos</span><br><span class="line">$ mkdir /root/sq</span><br><span class="line">$ mount -t loop,rw squashfs-root/LiveOS/rootfs.img /root/sq</span><br><span class="line">$ cp /usr/sbin/arcconf /root/sq/usr/sbin/</span><br><span class="line">$ umount /root/sq</span><br><span class="line">$ mv /root/iso/LiveOS/squashfs-root /root/sq/</span><br><span class="line">$ cd /root/sq</span><br><span class="line">$ mksquashfs squashfs-root squashfs.img</span><br><span class="line">$ rm -rf squashfs-root</span><br><span class="line">$ mv squashfs.img /root/iso/LiveOS/</span><br><span class="line">$ mv: overwrite ‘/root/iso/LiveOS/squashfs.img’? y</span><br><span class="line">$ cd /root/iso</span><br><span class="line">$ mkisofs -U \</span><br><span class="line">  -A &apos;CentOS 7 x86_64&apos; \</span><br><span class="line">  -V &apos;CentOS 7 x86_64&apos; \</span><br><span class="line">  -volset &apos;CentOS 7 x86_64&apos; \</span><br><span class="line">  -J -joliet-long -r -v -T \</span><br><span class="line">   -o /root/CentOS-MY.iso \</span><br><span class="line">   -b isolinux/isolinux.bin \</span><br><span class="line">   -c isolinux/boot.cat \</span><br><span class="line">   -no-emul-boot -boot-load-size 4 \</span><br><span class="line">    -boot-info-table  \</span><br><span class="line">   -eltorito-alt-boot \</span><br><span class="line">  -e images/efiboot.img -no-emul-boot .</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把打包的iso放到我起的nfs里，在hdm的web上挂载它，在hdm远程里删掉阵列模拟机器刚出厂的时候，然后在安装界面进去测试命令可用。然后ks里增加创建阵列的逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">%pre</span><br><span class="line"></span><br><span class="line">arcconf getconfig 1 ld | grep -qw &apos;No logical&apos;</span><br><span class="line">if [ &quot;$?&quot; -eq 0 ];then</span><br><span class="line"></span><br><span class="line">    #获取实际硬盘的Channel id存成数组:0,1  0,0</span><br><span class="line">    hardDiskChannelIDArray=( $(arcconf getconfig 1 pd | grep Channel | tac | awk -F&apos;[: ()]+&apos; &apos;NR!=1&#123;print $6&#125;&apos;) )</span><br><span class="line">    arcconf task start 1 device all initialize noprompt  #初始化所有硬盘</span><br><span class="line">    #              控制器id               容量  raid级别</span><br><span class="line">    arcconf create    1     logicaldrive  max    1   $&#123;hardDiskChannelIDArray[@]//,/ &#125;  noprompt</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">ipmitool raw 0x0c 0x02   0x08   0x04 0x00 0x00 | grep -qw &apos;02&apos;   // 专有网口我这为8,共享网口是0x01, 如果8是dhcp的话就配置静态ip</span><br><span class="line">if [ &quot;$?&quot; -eq 0 ];then</span><br><span class="line">  ipmitool lan set 8 ipsrc static</span><br><span class="line">  ipmitool lan set 8 ipaddr &#123;&#123;.IPMIIP&#125;&#125;</span><br><span class="line">  ipmitool lan set 8 netmask &#123;&#123;.IPMIMask&#125;&#125;</span><br><span class="line">  ipmitool lan set 8 defgw ipaddr &#123;&#123;.IPMIGW&#125;&#125; </span><br><span class="line">  ipmitool chassis bootdev disk</span><br><span class="line"></span><br><span class="line">  ipmitool raw 0x00 0x08 0x05  0xE0 0x08  0x00 0x00 0x00 //uefi启动,强制boot from disk</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前是做到这样，后续可能会更改，这几天发现了pxe似乎也可以达到需求，但是不能跨三层。pxe可以在pxelinux.cfg/目录下存放客户端的mac地址文件，客户端实际请求文件有优先级别.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据文档 <a href="https://wiki.syslinux.org/wiki/index.php?title=PXELINUX" target="_blank" rel="noopener">https://wiki.syslinux.org/wiki/index.php?title=PXELINUX</a> 得出: 假设pxe一个客户端的uuid为<code>b8945908-d6a6-41a9-611d-74a6ab80b83d</code>，mac地址为<code>88:99:AA:BB:CC:DD</code>，获取到的ip为<code>192.168.2.91</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mybootdir/pxelinux.cfg/b8945908-d6a6-41a9-611d-74a6ab80b83d</span><br><span class="line">mybootdir/pxelinux.cfg/01-88-99-aa-bb-cc-dd</span><br><span class="line">mybootdir/pxelinux.cfg/C0A8025B</span><br><span class="line">mybootdir/pxelinux.cfg/C0A8025</span><br><span class="line">mybootdir/pxelinux.cfg/C0A802</span><br><span class="line">mybootdir/pxelinux.cfg/C0A80</span><br><span class="line">mybootdir/pxelinux.cfg/C0A8</span><br><span class="line">mybootdir/pxelinux.cfg/C0A</span><br><span class="line">mybootdir/pxelinux.cfg/C0</span><br><span class="line">mybootdir/pxelinux.cfg/C</span><br><span class="line">mybootdir/pxelinux.cfg/default</span><br></pre></td></tr></table></figure></p><p>后续的一些优化点走向</p><ul><li>可以提前渲染好所有的文件，或者自己写一个tftp server，pxe客户端请求mac地址文件的时候查询有没有这个机器，有就返回渲染的文件。其次我现在是读写excel，后期可能会load到数据库里</li><li>再其次，ks的curl好像可以改initrd设置请求的header，pxe都是同一个dhcp下。tftp毕竟是四层，7层处理header结合数据库会非常方便,这样客户端自带header，http那部分逻辑就不需要去snmp连接交换机了</li><li>后续的ks也得加%post部分，部分curl请求一下我cli写的web server告知已经安装完成</li><li><code>squashfs.img</code>里自带了ipmitool，应该在post里设置下ipmi的网络信息和bios的启动顺序啥的，而不应该在挂载iso之前设置</li></ul><p>kickstart详细文档 <a href="https://fedoraproject.org/wiki/Anaconda/Kickstart/zh-cn" target="_blank" rel="noopener">https://fedoraproject.org/wiki/Anaconda/Kickstart/zh-cn</a></p><p>后续优化了的话会继续更新和公布源码在我github上</p><p>默认请求kickstart的header信息为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map[Accept:[*/*] User-Agent:[curl/7.29.0] X-Anaconda-Architecture:[x86_64] X-Anaconda-System-Release:[CentOS]]</span><br></pre></td></tr></table></figure></p><p>在<code>/images/pxeboot/initrd.img/initrd/lib/dracut/hooks/initqueue/online/11-fetch-kickstart-net.sh</code> 里找到了一个逻辑<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If we're doing sendmac, we need to run after anaconda-ks-sendheaders.sh</span></span><br><span class="line"><span class="keyword">if</span> getargbool 0 inst.ks.sendmac kssendmac; <span class="keyword">then</span></span><br><span class="line">    newjob=<span class="variable">$hookdir</span>/initqueue/settled/fetch-ks-<span class="variable">$&#123;netif&#125;</span>.sh</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    newjob=<span class="variable">$hookdir</span>/initqueue/fetch-ks-<span class="variable">$&#123;netif&#125;</span>.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>我用grep查找这个<code>getargbool</code>函数是在<code>usr/lib/dracut/hooks/initqueue/settled/00-anaconda-ks-sendheaders.sh</code>里，内容为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/sh</span></span><br><span class="line"><span class="comment"># anaconda-ks-sendheaders.sh - set various HTTP headers for kickstarting</span></span><br><span class="line"></span><br><span class="line">[ -f /tmp/.ks_sendheaders ] &amp;&amp; <span class="built_in">return</span></span><br><span class="line"><span class="built_in">command</span> -v set_http_header &gt;/dev/null || . /lib/url-lib.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># inst.ks.sendmac: send MAC addresses in HTTP headers</span></span><br><span class="line"><span class="keyword">if</span> getargbool 0 kssendmac inst.ks.sendmac; <span class="keyword">then</span></span><br><span class="line">    ifnum=0</span><br><span class="line">    <span class="keyword">for</span> ifname <span class="keyword">in</span> /sys/class/net/*; <span class="keyword">do</span></span><br><span class="line">        [ -e <span class="string">"<span class="variable">$ifname</span>/address"</span> ] || <span class="built_in">continue</span></span><br><span class="line">        mac=$(cat <span class="variable">$ifname</span>/address)</span><br><span class="line">        ifname=<span class="variable">$&#123;ifname#/sys/class/net/&#125;</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> might need to choose devices better</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$ifname</span>"</span> != <span class="string">"lo"</span> ] &amp;&amp; [ -n <span class="string">"<span class="variable">$mac</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># set_http_header is from url-lib.sh, sourced earlier</span></span><br><span class="line">            set_http_header <span class="string">"X-RHN-Provisioning-MAC-<span class="variable">$ifnum</span>"</span> <span class="string">"<span class="variable">$ifname</span> <span class="variable">$mac</span>"</span></span><br><span class="line">            ifnum=$((<span class="variable">$ifnum</span>+1))</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inst.ks.sendsn: send system serial number in HTTP headers</span></span><br><span class="line"><span class="keyword">if</span> getargbool 0 kssendsn inst.ks.sendsn; <span class="keyword">then</span></span><br><span class="line">    system_serial=$(cat /sys/class/dmi/id/product_serial 2&gt;/dev/null)</span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$system_serial</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        warn <span class="string">"inst.ks.sendsn: can't find system serial number"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        set_http_header <span class="string">"X-System-Serial-Number"</span> <span class="string">"<span class="variable">$system_serial</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&gt; /tmp/.ks_sendheaders</span><br></pre></td></tr></table></figure></p><p>boot的选项加了<code>inst.ks.sendmac</code>和<code>inst.ks.sendsn</code>后在curl请求ks文件的时候会附加header，所有网卡的mac地址和序列号。这个选项我搜了一圈，发现国内的和国外的基本很少用这个</p><p>这个是append的后面可以加的boot选项的官方文档<br><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/chap-anaconda-boot-options" target="_blank" rel="noopener">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/chap-anaconda-boot-options</a><br>而header为下面内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;Accept&quot;: &quot;[*/*]&quot;</span><br><span class="line">&quot;User-Agent&quot;: &quot;curl/7.29.0&quot;</span><br><span class="line">&quot;X-Anaconda-Architecture: x86_64 </span><br><span class="line">&quot;X-Anaconda-System-Release: &quot;CentOS Linux&quot; </span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-0: &quot;enp61s0f0 9c:e8:95:d8:3c:cc&quot;</span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-1: &quot;enp61s0f1 9c:e8:95:d8:3c:cd&quot; </span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-2: &quot;enp61s0f2 9c:e8:95:d8:3c:ce&quot; </span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-3: &quot;enp61s0f3 9c:e8:95:d8:3c:cf&quot; </span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-4: &quot;ens1f0 3c:f5:cc:91:1f:68&quot; </span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-5: &quot;ens1f1 3c:f5:cc:91:1f:6a&quot; </span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-6: &quot;ens2f0 3c:f5:cc:91:1e:48&quot; </span><br><span class="line">&quot;X-Rhn-Provisioning-Mac-7: &quot;ens2f1 3c:f5:cc:91:1e:4a&quot; </span><br><span class="line">&quot;X-System-Serial-Number: &quot;210200A00QH18500xxxx&quot;</span><br></pre></td></tr></table></figure></p><p>看到这个序列号和我服务器居然一样，感觉所有文章在ks的web上做就行了</p><p>一些其他参考<br><a href="https://blog.csdn.net/mintazoedeng/article/details/16804869" target="_blank" rel="noopener">https://blog.csdn.net/mintazoedeng/article/details/16804869</a><br><a href="https://www.thegeekstuff.com/2009/07/how-to-view-modify-and-recreate-initrd-img/" target="_blank" rel="noopener">https://www.thegeekstuff.com/2009/07/how-to-view-modify-and-recreate-initrd-img/</a></p><p><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/chap-installation-server-setup#sect-network-boot-setup-bios" target="_blank" rel="noopener">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/installation_guide/chap-installation-server-setup#sect-network-boot-setup-bios</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修改镜像以及编程实现了从服务器买来上电就会自动化安装指定ip和hostname的步骤（包含了自动做raid）,全程非交互&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;先讲讲事情的由来，新节点建设，几百台服务器
      
    
    </summary>
    
    
      <category term="pxe" scheme="http://zhangguanzhang.github.io/categories/pxe/"/>
    
      <category term="raid" scheme="http://zhangguanzhang.github.io/categories/pxe/raid/"/>
    
      <category term="kickstart" scheme="http://zhangguanzhang.github.io/categories/pxe/raid/kickstart/"/>
    
    
      <category term="initrd" scheme="http://zhangguanzhang.github.io/tags/initrd/"/>
    
      <category term="grub" scheme="http://zhangguanzhang.github.io/tags/grub/"/>
    
      <category term="raid" scheme="http://zhangguanzhang.github.io/tags/raid/"/>
    
  </entry>
  
  <entry>
    <title>SMASH CLP的一些笔记</title>
    <link href="http://zhangguanzhang.github.io/2019/06/12/CLP/"/>
    <id>http://zhangguanzhang.github.io/2019/06/12/CLP/</id>
    <published>2019-06-12T07:50:33.000Z</published>
    <updated>2019-06-17T08:41:08.200Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://support.hpe.com/hpsc/doc/public/display?docId=c03334058" target="_blank" rel="noopener">https://support.hpe.com/hpsc/doc/public/display?docId=c03334058</a><br><a href="https://www.golinuxhub.com/2018/02/hp-ilo4--cli-guide-cheatsheet-example.html" target="_blank" rel="noopener">https://www.golinuxhub.com/2018/02/hp-ilo4--cli-guide-cheatsheet-example.html</a><br><a href="https://h50146.www5.hpe.com/lib/products/software/oe/linux/mainstream/support/doc/general/mgmt/hponcfg/lights-out1.70guide.pdf" target="_blank" rel="noopener">https://h50146.www5.hpe.com/lib/products/software/oe/linux/mainstream/support/doc/general/mgmt/hponcfg/lights-out1.70guide.pdf</a><br><a href="https://server-recycling.nl/images/faq/handleidingen/HP-iLO-5-Scripting-and-Command-Line-Guide-a00018323en_us.pdf" target="_blank" rel="noopener">https://server-recycling.nl/images/faq/handleidingen/HP-iLO-5-Scripting-and-Command-Line-Guide-a00018323en_us.pdf</a><br><a href="http://blog.chinaunix.net/uid-22776959-id-5747914.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-22776959-id-5747914.html</a><br><a href="http://blog.chinaunix.net/uid-29021161-id-5785455.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-29021161-id-5785455.html</a><br><a href="https://www.cisco.com/c/en/us/td/docs/unified_computing/ucs/sw/utilities/smash/reference/guide/ucs_smash_reference/CLP_Access.pdf" target="_blank" rel="noopener">https://www.cisco.com/c/en/us/td/docs/unified_computing/ucs/sw/utilities/smash/reference/guide/ucs_smash_reference/CLP_Access.pdf</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">-&gt; show -h</span><br><span class="line"></span><br><span class="line">   Command Status: COMMAND COMPLETED</span><br><span class="line"></span><br><span class="line">   Command Name: Show</span><br><span class="line">Displays the target&apos;s subtargets, associations, properties and verbs.</span><br><span class="line"></span><br><span class="line">Usage: show [-options] [target] [&lt;property name&gt;==&lt;value&gt;]</span><br><span class="line">The optional [&lt;property name&gt;==&lt;value&gt;] filter allows the display of targets with the specified property value.</span><br><span class="line"></span><br><span class="line">Example: show -level all /admin1</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> all - instructs the verb to perform all possible functions.</span><br><span class="line"> -d,-display - Filters the command output.</span><br><span class="line"> syntax: -display &quot;all&quot; | &lt;associations | properties | targets | verbs&gt; [,&lt;associations | properties | targets | verbs&gt;]*</span><br><span class="line"> -x,-examine - instructs the command processor to validate the command syntax without executing the command.</span><br><span class="line"> -h,-help - shows help on how to use Show</span><br><span class="line"> -k,-keep - retain the Job status information for the specified time</span><br><span class="line"> -l,-level - instructs the verb to operate on targets at additional levels beneath the specified target.</span><br><span class="line">  syntax: -level &lt;n | all&gt;</span><br><span class="line"> -o,-output - specifies the format for the output. </span><br><span class="line"> syntax: -output format=&lt;text | keyword | clpxml&gt;</span><br><span class="line"> -v,-version - shows smash version</span><br><span class="line"> -w,-wait -wait for command to complete execution before returning.</span><br><span class="line"></span><br><span class="line">-&gt; show</span><br><span class="line"></span><br><span class="line">   Command Status: COMMAND COMPLETED</span><br><span class="line"></span><br><span class="line">   ufip=/admin1</span><br><span class="line">   Targets:</span><br><span class="line">hdwr1</span><br><span class="line">smclpprof1</span><br><span class="line">system1</span><br><span class="line">   Properties:</span><br><span class="line">ElementName=SM CLP Admin Domain</span><br><span class="line">CreationClassName=CIM_AdminDomain</span><br><span class="line">Name=MAP</span><br><span class="line">   Verbs:</span><br><span class="line">cd</span><br><span class="line">exit</span><br><span class="line">help</span><br><span class="line">show</span><br><span class="line">version</span><br><span class="line"></span><br><span class="line">-&gt; show -d properties=Name -o format=keyword /admin1       </span><br><span class="line"></span><br><span class="line">commandline=show -d properties=Name -o format=keyword /admin1</span><br><span class="line">status=0</span><br><span class="line">status_tag=COMMAND COMPLETED</span><br><span class="line">job_id=26</span><br><span class="line">command=show</span><br><span class="line">begingroup=target</span><br><span class="line">begingroup=instance</span><br><span class="line">instance=1,ufct=admin</span><br><span class="line">ufip=/admin1</span><br><span class="line">begingroup=properties</span><br><span class="line">begingroup=property</span><br><span class="line">name=Name</span><br><span class="line">val=MAP</span><br><span class="line">endgroup</span><br><span class="line">endgroup</span><br><span class="line">endgroup</span><br><span class="line">endgroup</span><br><span class="line">endoutput</span><br><span class="line"></span><br><span class="line">-&gt;</span><br></pre></td></tr></table></figure><p>show -l all</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://support.hpe.com/hpsc/doc/public/display?docId=c03334058&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://support.hpe.com/hpsc/doc
      
    
    </summary>
    
    
      <category term="ipmi" scheme="http://zhangguanzhang.github.io/categories/ipmi/"/>
    
    
      <category term="ipmi" scheme="http://zhangguanzhang.github.io/tags/ipmi/"/>
    
      <category term="CLP" scheme="http://zhangguanzhang.github.io/tags/CLP/"/>
    
  </entry>
  
  <entry>
    <title>golang cobra的一些笔记</title>
    <link href="http://zhangguanzhang.github.io/2019/06/02/cobra/"/>
    <id>http://zhangguanzhang.github.io/2019/06/02/cobra/</id>
    <published>2019-06-02T07:50:33.000Z</published>
    <updated>2019-07-31T09:55:10.748Z</updated>
    
    <content type="html"><![CDATA[<p>这几天稍微写了下cobra，网上搜到的博客分为两类，一类是把官方的readme翻译一下完事的，一类是写的都太简单了没有实际常见场景的。这里不废话了，先用官方demo讲解下</p><h2 id="Cobra介绍"><a href="#Cobra介绍" class="headerlink" title="Cobra介绍"></a>Cobra介绍</h2><p>是一个golang的库，其提供简单的接口来创建强大现代的CLI接口，类似于git或者go工具。同时，它也是一个应用，用来生成个人应用框架，从而开发以Cobra为基础的应用。热门的docker和k8s源码中都使用了Cobra<br>Cobra 结构由三部分组成：命令( Command )、标志( Flag )、参数( Args )。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type Command struct &#123;</span><br><span class="line">    Use   string  // The one-line usage message.</span><br><span class="line">    Short string  // The short description shown in the &apos;help&apos; output.</span><br><span class="line">    Long  string  // The long message shown in the &apos;help&lt;this-command&gt;&apos; output.</span><br><span class="line">    Run   func(cmd *Command, args []string)  // Run runs the command.</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>命令的格式为下列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rootCommand subcommand -X value --XXXX value  args1  args2</span><br></pre></td></tr></table></figure></p><p>前三个是不同场景下的说明，最后一个是要执行的函数</p><h3 id="安装与导入"><a href="#安装与导入" class="headerlink" title="安装与导入"></a>安装与导入</h3><p>如果拉取不下来用go module<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GO111MODULE=on</span><br><span class="line">export GOPROXY=https://goproxy.cn</span><br></pre></td></tr></table></figure></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/spf13/cobra/cobra</span><br></pre></td></tr></table></figure></p><h3 id="cobra生成器"><a href="#cobra生成器" class="headerlink" title="cobra生成器"></a>cobra生成器</h3><p>安装后会创建一个可执行文件<code>cobra</code>位于<code>$GOPATH/bin</code>目录中，自行配制好GOPATH<br>可以使用它来生成大体代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 guanzhang]# cd $GOPATH</span><br><span class="line">[root@k8s-m1 go]# cd src</span><br><span class="line">[root@k8s-m1 src]# ll</span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x 4 root root 4096 Jun  3 14:03 guanzhang</span><br><span class="line">drwxr-xr-x 3 root root 4096 May 29 13:18 spyder</span><br><span class="line">drwxr-xr-x 2 root root 4096 May 22 11:56 test</span><br><span class="line">[root@k8s-m1 src]# cobra init test/cli</span><br><span class="line">Your Cobra application is ready at</span><br><span class="line">/root/go/src/test/cli</span><br><span class="line"></span><br><span class="line">Give it a try by going there and running `go run main.go`.</span><br><span class="line">Add commands to it by running `cobra add [cmdname]`.</span><br><span class="line">[root@k8s-m1 src]# cd test/cli</span><br><span class="line">[root@k8s-m1 cli]# ll</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x 2 root root  4096 Jun  3 16:26 cmd</span><br><span class="line">-rw-r--r-- 1 root root 11358 Jun  3 16:26 LICENSE</span><br><span class="line">-rw-r--r-- 1 root root   674 Jun  3 16:26 main.go</span><br></pre></td></tr></table></figure></p><p>默认情况下，Cobra将添加Apache许可证。如果您不想这样，可以将标志添加-l none到所有生成器命令。但是，它会在每个文件（// Copyright © 2018 NAME HERE <email address="">）的顶部添加版权声明。如果您通过选项，-a YOUR NAME则索赔将包含您的姓名。这些标志是可选的。</email></p><h3 id="进入目录并运行demo"><a href="#进入目录并运行demo" class="headerlink" title="进入目录并运行demo"></a>进入目录并运行demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@k8s-m1 cli]# go mod init</span><br><span class="line">go: creating new go.mod: module test/cli</span><br><span class="line">[root@k8s-m1 cli]# go mod why</span><br><span class="line"># test/cli</span><br><span class="line">test/cli</span><br></pre></td></tr></table></figure><p>在Cobra应用程序中，通常main.go是暴露的文件。它有一个目的：初始化Cobra，它只是调用executecmd包的功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 app]# cat main.go </span><br><span class="line">// license 信息注释</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;test/cli/cmd&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">cmd.Execute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查看<code>cmd/root.go</code>发现命令的长短帮助文字，字面看的话说使用app运行，然后给app命令添加长短的帮助说明文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// rootCmd represents the base command when called without any subcommands</span><br><span class="line">var rootCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   &quot;cli&quot;,</span><br><span class="line">Short: &quot;A brief description of your application&quot;,</span><br><span class="line">Long: `A longer description that spans multiple lines and likely contains</span><br><span class="line">examples and usage of using your application. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.`,</span><br><span class="line">// Uncomment the following line if your bare application</span><br><span class="line">// has an action associated with it:</span><br><span class="line">//Run: func(cmd *cobra.Command, args []string) &#123; &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Execute adds all child commands to the root command and sets flags appropriately.</span><br><span class="line">// This is called by main.main(). It only needs to happen once to the rootCmd.</span><br><span class="line">func Execute() &#123;</span><br><span class="line">if err := rootCmd.Execute(); err != nil &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">os.Exit(1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 app]# go run main.go</span><br><span class="line">A longer description that spans multiple lines and likely contains</span><br><span class="line">examples and usage of using your application. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.</span><br></pre></td></tr></table></figure></p><p>当前命令为cli没有子命令，无法观察出它的强大</p><h3 id="添加子命令达到想要的层级关系"><a href="#添加子命令达到想要的层级关系" class="headerlink" title="添加子命令达到想要的层级关系"></a>添加子命令达到想要的层级关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">|----app</span><br></pre></td></tr></table></figure><p>使用cobra生成器添加一个上面二级的app命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 cli]# cobra add app</span><br><span class="line">app created at /root/go/src/test/cli/cmd/app.go</span><br><span class="line">[root@k8s-m1 cli]# ll cmd/</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 1611 Jun  3 16:29 app.go</span><br><span class="line">-rw-r--r-- 1 root root 2776 Jun  3 16:26 root.go</span><br></pre></td></tr></table></figure></p><p>再来run一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 cli]# go run main.go </span><br><span class="line">A longer description that spans multiple lines and likely contains</span><br><span class="line">examples and usage of using your application. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cli [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  app         A brief description of your command</span><br><span class="line">  help        Help about any command</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br><span class="line">  -h, --help            help for cli</span><br><span class="line">  -t, --toggle          Help message for toggle</span><br><span class="line"></span><br><span class="line">Use &quot;cli [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure></p><p>发现没有子命令的时候会打印可用的二级命令，里面有我们添加的app命令，来run下app命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 cli]# go run main.go help app</span><br><span class="line">A longer description that spans multiple lines and likely contains examples</span><br><span class="line">and usage of using your command. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cli app [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help   help for app</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br></pre></td></tr></table></figure></p><p>我们可以看到<code>cmd/app.go</code>里有这段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// appCmd represents the app command</span><br><span class="line">var appCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   &quot;app&quot;,</span><br><span class="line">Short: &quot;A brief description of your command&quot;,</span><br><span class="line">Long: `A longer description that spans multiple lines and likely contains examples</span><br><span class="line">and usage of using your command. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.`,</span><br><span class="line">Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line">fmt.Println(&quot;app called&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">rootCmd.AddCommand(appCmd)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>rootCmd为我们init的root.go定义的结构体，<code>rootCmd.AddCommand(appCmd)</code>这里字面意思可以得知command这个结构体生成对应的命令格式，可以用上一层次的命令方法AddCommand添加一个下一级别的命令<br>这里我们测试下如下结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">|----app</span><br><span class="line">      |----remove</span><br></pre></td></tr></table></figure></p><p>按照生成器生成的代码会是下面的结构，所以生成后我们需要修改remove.go里的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">|----app</span><br><span class="line">|----remove</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 cli]# cobra add remove</span><br><span class="line">remove created at /root/go/src/test/cli/cmd/remove.go</span><br><span class="line">[root@k8s-m1 cli]# grep AddCommand cmd/remove.go </span><br><span class="line">rootCmd.AddCommand(removeCmd)</span><br><span class="line">[root@k8s-m1 cli]# sed -i &apos;/rootCmd/s#rootCmd#appCmd#&apos; cmd/remove.go </span><br><span class="line">[root@k8s-m1 cli]# grep AddCommand cmd/remove.go </span><br><span class="line">appCmd.AddCommand(removeCmd)</span><br><span class="line">[root@k8s-m1 cli]# go run main.go app</span><br><span class="line">app called</span><br><span class="line">[root@k8s-m1 cli]# go run main.go app remove</span><br><span class="line">remove called</span><br><span class="line">[root@k8s-m1 cli]# go run main.go app help</span><br><span class="line">app called</span><br><span class="line">[root@k8s-m1 cli]# go run main.go app --help</span><br><span class="line">A longer description that spans multiple lines and likely contains examples</span><br><span class="line">and usage of using your command. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cli app [flags]</span><br><span class="line">  cli app [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  remove      A brief description of your command</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help   help for app</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br><span class="line"></span><br><span class="line">Use &quot;cli app [command] --help&quot; for more information about a command.</span><br></pre></td></tr></table></figure><p>上面并没有达到我们预期的输出，我们期望是<code>go run main.go app</code>的时候输出最后的<code>--help</code>这样的命令帮助提醒用户。这样有两种实现方法，一种是把<code>var appCmd = &amp;cobra.Command</code>的时候Run删掉，或者像下面改成RunE：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RunE: func(cmd *cobra.Command, args []string) error &#123;</span><br><span class="line">    return errors.New(&quot;Provide item to the app command&quot;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>也可以改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Run: func(cmd *cobra.Command, args []string) error &#123;</span><br><span class="line">    if len(args) == 0 &#123;</span><br><span class="line">        cmd.Help()</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    your_need_to_run_func() //这里一般是分包写，另一个包专门接收参数去处理，cmd包专注命令和选项</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>然后再运行看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 cli]# go run main.go app  </span><br><span class="line">Error: Provide item to the app command</span><br><span class="line">Usage:</span><br><span class="line">  cli app [flags]</span><br><span class="line">  cli app [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  remove      A brief description of your command</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help   help for app</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br><span class="line"></span><br><span class="line">Use &quot;cli app [command] --help&quot; for more information about a command.</span><br><span class="line"></span><br><span class="line">Provide item to the app command</span><br></pre></td></tr></table></figure></p><h2 id="选项-Flag"><a href="#选项-Flag" class="headerlink" title="选项(Flag)"></a>选项(Flag)</h2><h3 id="添加选项及其相关"><a href="#添加选项及其相关" class="headerlink" title="添加选项及其相关"></a>添加选项及其相关</h3><p>实际命令都有选项，分为持久和本地，持久例如<code>kubectl</code>的<code>-n</code>可以用在很多二级命令下，本地命令选项则不会被继承到子命令。我们给remove添加一个移除指定名字的选项，修改<code>cmd/remove.go</code>的init函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func init() &#123;</span><br><span class="line">appCmd.AddCommand(removeCmd)</span><br><span class="line">    removeCmd.Flags().StringP(&quot;name&quot;, &quot;n&quot;, &quot;&quot;, &quot;The application to be executed&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了表示出来，我们得在<code>removeCmd</code>的Run里写逻辑获取选项的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line">    name, _:= cmd.Flags().GetString(&quot;name&quot;)</span><br><span class="line">   if name == &quot;&quot; &#123;</span><br><span class="line">       name = &quot;default&quot;</span><br><span class="line">   &#125;</span><br><span class="line">  fmt.Println(&quot;remove the &quot;+name)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 cli]# go run main.go app remove -n test</span><br><span class="line">remove the test</span><br><span class="line">[root@k8s-m1 cli]# go run main.go app remove </span><br><span class="line">remove the default</span><br><span class="line">[root@k8s-m1 cli]# go run main.go app remove --help</span><br><span class="line">A longer description that spans multiple lines and likely contains examples</span><br><span class="line">and usage of using your command. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cli app remove [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help          help for remove</span><br><span class="line">  -n, --name string   The application to be executed</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br></pre></td></tr></table></figure></p><p>添加选项参数都是在init函数里使用<code>cmd.Flags()</code>或者<code>cmd.PersistentFlags()</code>的方法，具体有以下使用规律</p><ul><li>type typeP typeVar typeVarP</li></ul><p>带P的相对没带P的多了个短选项,没带P的选项只能用<code>--long-iotion</code>这样。单独的短选项官方提了issue确定了官方从不打算单独的短选项。获取选项的值用<code>cmd.Flags().GetString(&quot;name&quot;)</code><br>不带P下纯type例如<code>.String(&quot;name&quot;, &quot;&quot;,&quot;The application to be executed&quot;)</code>就是单独的长选项,最后俩参数是默认值和打印输出帮助时候后面的描述字符。<br>不带Var的获取值使用<code>GetType(&quot;optionName&quot;)</code>，这样似乎非常麻烦，实际中都是用后面俩种Var直接传入地址自动注入的，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var dates int32</span><br><span class="line">cmd.Flags().Int32VarP(&amp;dates,&quot;date&quot;, &quot;d&quot;, 1234, &quot;this is var test&quot;)</span><br></pre></td></tr></table></figure></p><ul><li>type也有<code>Slice</code>，<code>Count</code>，<code>Duration</code>,<code>IP</code>,<code>IPMask</code>,<code>IPNet</code>之类的类型,Slice类型可以多个传入，直接获取就是一个切片，例如–master ip1 –master ip2</li><li>类似<code>--force</code>这样的开关型选项，实际上用Bool类型即可，默认值设置为false，单独给选项不带值就是true，也可以手动传入false或者true</li><li>MarkDeprecated告诉用户放弃这个标注位，应该使用新标志位，MarkShorthandDeprecated是只放弃短的，长标志位依然可用。MarkHidden隐藏标志位</li><li>MarkFlagRequired(“region”)表示region是必须的选项，不设置下选项都是可选的</li></ul><h3 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h3><p>类似kubectl的~/.kube/config和gcloud这些cli都会读取一些配置信息，也可以从命令行指定信息。细心观察的话可以看到这个是一直存在在命令帮助上的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br></pre></td></tr></table></figure></p><p>从<code>cmd/root.go</code>里看到viper包的几个方法就是干这个的，viper是cobra集成的配置文件读取的库<br>可以通过环境变量读取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeCmd.Flags().StringP(&quot;name&quot;, &quot;n&quot;, viper.GetString(&quot;ENVNAME&quot;), &quot;The application to be executed&quot;)</span><br></pre></td></tr></table></figure></p><p>默认可以在cmd/root.go文件里看到默认配置文件是家目录下的.应用名，这里我是<code>$HOME/.cli.yaml</code>，创建并添加下面内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: &quot;Billy&quot;</span><br><span class="line">greeting: &quot;Howdy&quot;</span><br></pre></td></tr></table></figure></p><p>Command的Run里提取字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line">    greeting := &quot;Hello&quot;</span><br><span class="line">    name, _ := cmd.Flags().GetString(&quot;name&quot;)</span><br><span class="line">    if name == &quot;&quot; &#123;</span><br><span class="line">        name = &quot;World&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if viper.GetString(&quot;name&quot;)!=&quot;&quot;&#123;</span><br><span class="line">        name = viper.GetString(&quot;name&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    if viper.GetString(&quot;greeting&quot;)!=&quot;&quot;&#123;</span><br><span class="line">        greeting = viper.GetString(&quot;greeting&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(greeting + &quot; &quot; + name)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>也可以bind到变量里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var author string</span><br><span class="line"></span><br><span class="line">func init() &#123;</span><br><span class="line">  rootCmd.PersistentFlags().StringVar(&amp;author, &quot;author&quot;, &quot;YOUR NAME&quot;, &quot;Author name for copyright attribution&quot;)</span><br><span class="line">  viper.BindPFlag(&quot;author&quot;, rootCmd.PersistentFlags().Lookup(&quot;author&quot;))</span><br><span class="line">&#125;</span><br><span class="line">不想使用的话相关可以注释掉viper相关的，编译出来的程序能小几M</span><br></pre></td></tr></table></figure></p><h2 id="Command的常见字段"><a href="#Command的常见字段" class="headerlink" title="Command的常见字段"></a>Command的常见字段</h2><h3 id="别名-Aliases"><a href="#别名-Aliases" class="headerlink" title="别名(Aliases)"></a>别名(Aliases)</h3><p>现在我们想添加一个别名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">|----app</span><br><span class="line">      |----remove|rm</span><br></pre></td></tr></table></figure></p><p>我们修改下初始化值即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var removeCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   &quot;remove&quot;,</span><br><span class="line">    Aliases: []string&#123;&quot;rm&quot;&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="命令帮助添加示例-Example"><a href="#命令帮助添加示例-Example" class="headerlink" title="命令帮助添加示例(Example)"></a>命令帮助添加示例(Example)</h3><p>我们修改下remove的Run为下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Run: func(cmd *cobra.Command, args []string) &#123;</span><br><span class="line">           if len(args) == 0 &#123;</span><br><span class="line">              cmd.Help()</span><br><span class="line">              return</span><br><span class="line">           &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>运行输出里example是空的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 cli]# go run main.go app remove </span><br><span class="line">A longer description that spans multiple lines and likely contains examples</span><br><span class="line">and usage of using your command. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cli app remove [flags]</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  remove, rm</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help          help for remove</span><br><span class="line">  -n, --name string   The application to be executed</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br></pre></td></tr></table></figure></p><p>添加example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var removeCmd = &amp;cobra.Command&#123;</span><br><span class="line">Use:   &quot;remove&quot;,</span><br><span class="line">        Aliases: []string&#123;&quot;rm&quot;&#125;,</span><br><span class="line">        Example: `</span><br><span class="line">cli remove -n test</span><br><span class="line">cli remove --name test</span><br><span class="line">`,</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">go run main.go app remove </span><br><span class="line">A longer description that spans multiple lines and likely contains examples</span><br><span class="line">and usage of using your command. For example:</span><br><span class="line"></span><br><span class="line">Cobra is a CLI library for Go that empowers applications.</span><br><span class="line">This application is a tool to generate the needed files</span><br><span class="line">to quickly create a Cobra application.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  cli app remove [flags]</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  remove, rm</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">cli remove -n test</span><br><span class="line">cli remove --name test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help          help for remove</span><br><span class="line">  -n, --name string   The application to be executed</span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --config string   config file (default is $HOME/.cli.yaml)</span><br></pre></td></tr></table></figure><h3 id="参数验证器-Args"><a href="#参数验证器-Args" class="headerlink" title="参数验证器(Args)"></a>参数验证器(Args)</h3><p>该字段接收类型为<code>type PositionalArgs func(cmd *Command, args []string) error</code><br>内置的为下面几个:</p><ul><li><code>NoArgs</code>: 如果存在任何位置参数，该命令将报告错误。</li><li><code>ArbitraryArgs</code>: 该命令将接受任何args。</li><li><code>OnlyValidArgs</code>: 如果存在任何不在ValidArgs字段中的位置参数，该命令将报告错误Command。</li><li><code>MinimumNArgs(int)</code>: 如果没有至少N个位置参数，该命令将报告错误。</li><li><code>MaximumNArgs(int)</code>: 如果有多于N个位置参数，该命令将报告错误。</li><li><code>ExactArgs(int)</code>: 如果没有确切的N位置参数，该命令将报告错误。</li><li><code>RangeArgs(min, max):</code> 如果args的数量不在预期args的最小和最大数量之间，则该命令将报告错误。</li><li>自己写的话传入符合类型定义的函数即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  Args: func(cmd *cobra.Command, args []string) error &#123;</span><br><span class="line">  if len(args) &lt; 1 &#123;</span><br><span class="line">    return errors.New(&quot;requires at least one arg&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">  if myapp.IsValidColor(args[0]) &#123;</span><br><span class="line">    return nil</span><br><span class="line">  &#125;</span><br><span class="line">  return fmt.Errorf(&quot;invalid color specified: %s&quot;, args[0])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p>前面说的没传递选项和任何值希望打印命令帮助也可以用<code>MinimumNArgs(1)</code>来触发</p><h3 id="Run的hook"><a href="#Run的hook" class="headerlink" title="Run的hook"></a>Run的hook</h3><p>Run功能的执行先后顺序如下：</p><ul><li>PersistentPreRun</li><li>PreRun</li><li>Run</li><li>PostRun</li><li>PersistentPostRun<br>接收<code>func(cmd *Command, args []string)</code>类型的函数，Persistent的能被下面的子命令继承<br>RunE功能的执行先后顺序如下：</li><li>PersistentPreRunE</li><li>PreRunE</li><li>RunE</li><li>PostRunE</li><li>PersistentPostRunE</li></ul><p>接收<code>func(cmd *Command, args []string) error</code>的函数</p><h3 id="自定义help-usage输出"><a href="#自定义help-usage输出" class="headerlink" title="自定义help,usage输出"></a>自定义help,usage输出</h3><ul><li><p>help</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">command.SetHelpCommand(cmd *Command)</span><br><span class="line">command.SetHelpFunc(f func(*Command, []string))</span><br><span class="line">command.SetHelpTemplate(s string)</span><br></pre></td></tr></table></figure></li><li><p>usage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">command.SetUsageFunc(f func(*Command) error)</span><br><span class="line">command.SetUsageTemplate(s string)</span><br></pre></td></tr></table></figure></li></ul><p><a href="http://www.xtgxiso.com/golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%85%B3%E6%B3%A8%E5%93%8D%E5%BA%94%E7%9A%84http%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">http://www.xtgxiso.com/golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%85%B3%E6%B3%A8%E5%93%8D%E5%BA%94%E7%9A%84http%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1/</a><br><a href="https://blog.csdn.net/cs380637384/article/details/81231817" target="_blank" rel="noopener">https://blog.csdn.net/cs380637384/article/details/81231817</a><br><a href="https://studygolang.com/articles/7588" target="_blank" rel="noopener">https://studygolang.com/articles/7588</a><br><a href="https://www.cppentry.com/bencandy.php?fid=78&amp;aid=213235&amp;page=2" target="_blank" rel="noopener">https://www.cppentry.com/bencandy.php?fid=78&amp;aid=213235&amp;page=2</a><br><a href="https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html#getting-started" target="_blank" rel="noopener">https://ordina-jworks.github.io/development/2018/10/20/make-your-own-cli-with-golang-and-cobra.html#getting-started</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天稍微写了下cobra，网上搜到的博客分为两类，一类是把官方的readme翻译一下完事的，一类是写的都太简单了没有实际常见场景的。这里不废话了，先用官方demo讲解下&lt;/p&gt;
&lt;h2 id=&quot;Cobra介绍&quot;&gt;&lt;a href=&quot;#Cobra介绍&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="golang" scheme="http://zhangguanzhang.github.io/categories/golang/"/>
    
    
      <category term="cobra" scheme="http://zhangguanzhang.github.io/tags/cobra/"/>
    
  </entry>
  
  <entry>
    <title>闲谈线上俩k8s环境同等limits下pod启动时间不一样解决过程</title>
    <link href="http://zhangguanzhang.github.io/2019/04/28/k8s-java-start-time-not-same/"/>
    <id>http://zhangguanzhang.github.io/2019/04/28/k8s-java-start-time-not-same/</id>
    <published>2019-04-28T05:10:27.000Z</published>
    <updated>2019-10-22T08:42:22.103Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;线上用的k8s版本是1.6.7非常老，而且HA有问题，上个月研发想把里面的一些服务迁出来到一个新集群里，新集群的搭建是我负责的。上周开始陆陆续续的迁移过来了，但是同等limit下部分pod在测试环境上(测试环境和老环境部署是一样的,下文的老环境和测试环境可以理解为一样)启动非常快，在我搭建的新k8s环境上启动非常慢，研发他们应用都是java+springboot，这里不谈jvm无法识别cgroup，已经加选项识别到了还有那个随机熵的选项肯定也是加了的。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为之前一次有个用户反映他们本地虚机启动springboot应用20s，我们云上启动就三分钟，后面漠然大佬教我加java的启动参数输出log，帮我远程debug找到原因是zk客户端会解析hosts，加条localhost的hosts就解决了。在得知他们用的也是springboot后一开始就怀疑是他们代码问题(毕竟java)，建议他们去开debug自己看log。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;四五天之前研发那边和我对接k8s的同事详细的探讨了启动不一致的问题，我询问了哪个pod可以随意启停，然后在新环境上把该pod的command改成sh和<code>tty:true</code>，去掉就绪和生存探针手动进去启动进程，启动的时候加了java的运行参数打印一系列的更详细的log，把log发给qingmu.io大佬，大佬看了说了句你这cpu限制得太厉害了吧。我才发现新环境上pod的cpu限制得比老环境还小，然后改成老环境一样就非常快了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然后今天研发同事又说启动慢，限制一样的还是启动慢，这里放下他说的原话:<code>相同资源下，A环境服务比测试环境启动慢上一倍-3倍,当cpu3核时，启动时间差距就没那么大了</code>，这个话和qingmu.io大佬之前看到日志说cpu限制得太厉害了是提示了我找到原因的关键。</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>然后同事截图了下pod的limit，我看到cpu是1，这不刚好3倍吗，毕竟k8s的容器cpu限制是基于时间占比的，寻思着cpu是不是不一样，叫同事把他们那边测试环境的lscpu输出截图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ lscpu</span><br><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                24</span><br><span class="line">On-line CPU(s) list:   0-23</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    1</span><br><span class="line">Socket(s):             24</span><br><span class="line">NUMA node(s):          1</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            15</span><br><span class="line">Model:                 6</span><br><span class="line">Model name:            Intel(R) Xeon(R) Gold 5118 CPU @ 2.30GHz</span><br><span class="line">Stepping:              3</span><br><span class="line">CPU MHz:               2700.017</span><br><span class="line">BogoMIPS:              4589.20</span><br><span class="line">Hypervisor vendor:     KVM</span><br><span class="line">Virtualization type:   full</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              4096K</span><br><span class="line">L3 cache:              16384K</span><br><span class="line">NUMA node0 CPU(s):     0-23</span><br><span class="line">Flags:                 fpu de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx lm constant_tsc nopl xtopology eagerfpu pni cx16 x2apic hypervisor lahf_lm</span><br></pre></td></tr></table></figure><p>下面这个是新环境的lscpu输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                56</span><br><span class="line">On-line CPU(s) list:   0-55</span><br><span class="line">Thread(s) per core:    2</span><br><span class="line">Core(s) per socket:    14</span><br><span class="line">Socket(s):             2</span><br><span class="line">NUMA node(s):          2</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            6</span><br><span class="line">Model:                 85</span><br><span class="line">Model name:            Intel(R) Xeon(R) Gold 6132 CPU @ 2.60GHz</span><br><span class="line">Stepping:              4</span><br><span class="line">CPU MHz:               999.914</span><br><span class="line">CPU max MHz:           3700.0000</span><br><span class="line">CPU min MHz:           1000.0000</span><br><span class="line">BogoMIPS:              5200.00</span><br><span class="line">Virtualization:        VT-x</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              1024K</span><br><span class="line">L3 cache:              19712K</span><br><span class="line">NUMA node0 CPU(s):     0-13,28-41</span><br><span class="line">NUMA node1 CPU(s):     14-27,42-55</span><br></pre></td></tr></table></figure></p><p>这一对比就发现了问题所在，新环境的cpu频率平均稳定在999.914,也就是<code>CPU MHz</code>，测试环境是虚机，虽说它没max和min Mhz(应该是虚拟化相关的设置导致没有的)但是它的平均频率也约等于新环境平均频率的三倍，寻思着应该是cpu的省电模式之类的，一对比发现每个核心频率都很低<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">$  grep -i mhz /proc/cpuinfo </span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 1000.231</span><br><span class="line">cpu MHz: 1298.889</span><br><span class="line">cpu MHz: 1001.025</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1000.390</span><br><span class="line">cpu MHz: 1000.390</span><br><span class="line">cpu MHz: 1000.231</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1000.708</span><br><span class="line">cpu MHz: 1001.025</span><br><span class="line">cpu MHz: 1000.231</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 1000.231</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1382.519</span><br><span class="line">cpu MHz: 1327.929</span><br><span class="line">cpu MHz: 999.914</span><br><span class="line">cpu MHz: 1157.653</span><br><span class="line">cpu MHz: 1121.313</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1193.518</span><br><span class="line">cpu MHz: 1000.073</span><br><span class="line">cpu MHz: 1000.231</span><br><span class="line">cpu MHz: 1000.390</span><br><span class="line">cpu MHz: 1000.390</span><br><span class="line">cpu MHz: 1000.073</span><br></pre></td></tr></table></figure></p><h2 id="cpu模式知识"><a href="#cpu模式知识" class="headerlink" title="cpu模式知识"></a>cpu模式知识</h2><p>然后查找了下设置cpu什么最小频率的命令给找到了下面信息.<br>在Linux中，内核的开发者定义了一套框架模型来完成CPU频率动态调整这一目的，它就是CPU Freq系统。尽管在各个Linux发行版中，前端软件稍有差异，但其最终都会通过Linux内核的CPU Freq系统来实现CPU频率动态调整的功能。这些软件都会提供如下CPU模式（governor参数）<br>使用下列命令查看cpu的模式（governor参数）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor</span><br><span class="line">powersave</span><br><span class="line">powersave</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><ul><li><p>ondemand：系统默认的超频模式，按需调节，内核提供的功能，不是很强大，但有效实现了动态频率调节，平时以低速方式运行，当系统负载提高时候自动提高频率。以这种模式运行不会因为降频造成性能降低，同时也能节约电能和降低温度。一般官方内核默认的方式都是ondemand。</p></li><li><p>interactive：交互模式，直接上最高频率，然后看CPU负荷慢慢降低，比较耗电。Interactive 是以 CPU 排程数量而调整频率，从而实现省电。InteractiveX 是以 CPU 负载来调整 CPU 频率，不会过度把频率调低。所以比 Interactive 反应好些，但是省电的效果一般。</p></li><li><p>conservative：保守模式，类似于ondemand，但调整相对较缓，想省电就用他吧。Google官方内核，kang内核默认模式。</p></li><li><p>smartass：聪明模式，是I和C模式的升级，该模式在比interactive 模式不差的响应的前提下会做到了更加省电。</p></li><li><p>performance：性能模式！只有最高频率，从来不考虑消耗的电量，性能没得说，但是耗电量。</p></li><li><p>powersave 省电模式，通常以最低频率运行。</p></li><li><p>userspace：用户自定义模式，系统将变频策略的决策权交给了用户态应用程序，并提供了相应的接口供用户态应用程序调节CPU 运行频率使用。也就是长期以来都在用的那个模式。可以通过手动编辑配置文件进行配置</p></li><li><p>Hotplug：类似于ondemand, 但是cpu会在关屏下尝试关掉一个cpu，并且带有deep sleep，比较省电。</p></li></ul><p>而新环境的cpu就是省电模式运行的，cpu频率极低，新环境不能重启，可能bios里有设置cpu工作模式选项，所以只能找在线修改的方法。查找了下设置模式的命令，最终找到了个靠谱的</p><h2 id="一次性调整-正确姿势在最后"><a href="#一次性调整-正确姿势在最后" class="headerlink" title="一次性调整(正确姿势在最后)"></a>一次性调整(正确姿势在最后)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cpupower -c all frequency-set -g performance</span><br><span class="line">Setting cpu: 0</span><br><span class="line">Setting cpu: 1</span><br><span class="line">Setting cpu: 2</span><br><span class="line">...</span><br><span class="line">Setting cpu: 55</span><br><span class="line">$ cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor</span><br><span class="line">performance</span><br><span class="line">performance</span><br><span class="line">performance</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>模式已经改变了，查看下工核心的作频率<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">grep -i mhz /proc/cpuinfo</span><br><span class="line">cpu MHz: 1870.495</span><br><span class="line">cpu MHz: 3127.331</span><br><span class="line">cpu MHz: 2348.156</span><br><span class="line">cpu MHz: 2160.900</span><br><span class="line">cpu MHz: 1918.896</span><br><span class="line">cpu MHz: 1756.237</span><br><span class="line">cpu MHz: 2635.388</span><br><span class="line">cpu MHz: 2115.673</span><br><span class="line">cpu MHz: 1989.196</span><br><span class="line">cpu MHz: 1708.312</span><br><span class="line">cpu MHz: 2226.916</span><br><span class="line">cpu MHz: 2683.471</span><br><span class="line">cpu MHz: 1654.199</span><br><span class="line">cpu MHz: 2696.643</span><br><span class="line">cpu MHz: 2258.020</span><br><span class="line">cpu MHz: 1957.299</span><br><span class="line">cpu MHz: 2357.360</span><br><span class="line">cpu MHz: 3345.214</span><br><span class="line">cpu MHz: 3096.704</span><br><span class="line">cpu MHz: 1361.413</span><br><span class="line">cpu MHz: 2991.650</span><br><span class="line">cpu MHz: 2209.777</span><br><span class="line">cpu MHz: 2505.102</span><br><span class="line">cpu MHz: 2493.359</span><br><span class="line">cpu MHz: 1823.999</span><br><span class="line">cpu MHz: 2132.812</span><br><span class="line">cpu MHz: 2622.058</span><br><span class="line">cpu MHz: 2049.340</span><br><span class="line">cpu MHz: 2217.871</span><br><span class="line">cpu MHz: 3294.592</span><br><span class="line">cpu MHz: 2478.442</span><br><span class="line">cpu MHz: 3284.436</span><br><span class="line">cpu MHz: 3279.199</span><br><span class="line">cpu MHz: 2265.002</span><br><span class="line">cpu MHz: 2650.622</span><br><span class="line">cpu MHz: 2250.720</span><br><span class="line">cpu MHz: 1804.797</span><br><span class="line">cpu MHz: 1626.269</span><br><span class="line">cpu MHz: 2827.404</span><br><span class="line">cpu MHz: 1602.783</span><br><span class="line">cpu MHz: 3270.312</span><br><span class="line">cpu MHz: 3283.166</span><br><span class="line">cpu MHz: 1676.257</span><br><span class="line">cpu MHz: 3270.312</span><br><span class="line">cpu MHz: 3331.726</span><br><span class="line">cpu MHz: 2591.748</span><br><span class="line">cpu MHz: 3323.950</span><br><span class="line">cpu MHz: 3312.683</span><br><span class="line">cpu MHz: 2978.002</span><br><span class="line">cpu MHz: 3251.269</span><br><span class="line">cpu MHz: 2968.005</span><br><span class="line">cpu MHz: 2234.216</span><br><span class="line">cpu MHz: 1717.199</span><br><span class="line">cpu MHz: 1733.227</span><br><span class="line">cpu MHz: 2282.458</span><br><span class="line">cpu MHz: 1455.358</span><br></pre></td></tr></table></figure></p><p>叫同事再次尝试，完美解决！</p><h2 id="正确姿势"><a href="#正确姿势" class="headerlink" title="正确姿势"></a>正确姿势</h2><p>2019-10-22 15:40<br>今天B环境的物理机内存扩容，重启后发现有几个sprintboot的pod一直crash，看了下生存探针初次delay是180s，恩。感觉又是频率的问题，查看了下果然又回到powersave模式了。搜索了下资料，找群友验证了下下面是永久配置模式。<br>主要依赖<code>Tuned</code>，在CentOS / RHEL 7和Fedora上，默认情况下已预先安装并激活了<code>tuned</code>，但在较旧版本的CentOS / RHEL 6.x上，您需要使用以下yum命令进行安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tuned -y</span><br></pre></td></tr></table></figure></p><p>安装后，您将找到以下重要的调整配置文件。</p><ul><li>/etc/tuned - 调整配置目录。</li><li>/etc/tuned/tuned-main.conf - 调整的邮件配置文件。</li><li>/usr/lib/tuned/ - 存储所有调优配置文件的子目录。</li></ul><p>列出自带的模式，实际上就是目录<code>/usr/lib/tuned/</code>里的目录对应list出的条目，我们可以自己创建目录写配置文件来定制一个模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ tuned-adm list</span><br><span class="line">Available profiles:</span><br><span class="line">- balanced                    - General non-specialized tuned profile</span><br><span class="line">- desktop                     - Optimize for the desktop use-case</span><br><span class="line">- latency-performance         - Optimize for deterministic performance at the cost of increased power consumption</span><br><span class="line">- network-latency             - Optimize for deterministic performance at the cost of increased power consumption, focused on low latency network performance</span><br><span class="line">- network-throughput          - Optimize for streaming network throughput, generally only necessary on older CPUs or 40G+ networks</span><br><span class="line">- powersave                   - Optimize for low power consumption</span><br><span class="line">- throughput-performance      - Broadly applicable tuning that provides excellent performance across a variety of common server workloads</span><br><span class="line">- virtual-guest               - Optimize for running inside a virtual guest</span><br><span class="line">- virtual-host                - Optimize for running KVM guests</span><br><span class="line">$ ll /usr/lib/tuned/</span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 virtual-guest</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 virtual-host</span><br><span class="line">drwxr-xr-x. 2 root root    41 Apr 19  2019 powersave</span><br><span class="line">drwxr-xr-x. 2 root root    27 Apr 19  2019 recommend.d</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 throughput-performance</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 network-throughput</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 latency-performance</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 network-latency</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 balanced</span><br><span class="line">drwxr-xr-x. 2 root root    24 Apr 19  2019 desktop</span><br><span class="line">-rw-r--r--. 1 root root 13997 Jul  5  2018 functions</span><br></pre></td></tr></table></figure></p><p>常用模式介绍：</p><ul><li><p>balanced<br>它的目的是成为性能和功耗之间的折衷。它试图尽量使用自动调节。它有好的结果对于大多数负载。唯一的缺点是增加了延迟。在当前调释放它使CPU、磁盘、音频和视频插件和激活ondemand调控器。radeon_powersave设置为自动。</p></li><li><p>desktop<br>针对桌面系统设计的节能Profile，对SATA适配器、CPU、网络和磁盘插件应用ALPM策略</p></li><li><p>latency-performance<br>典型低延迟的性能模式。此配置会禁用动态调整机制和透明的大页面。cpuspeed模式改变为performance，将性能低的CPU锁定C状态(通过PM QoS)。同时将磁盘 IO 的调度算法更改为 deadline，在Red Hat Enterprise Linux 6.5和更高版本中cpu_dma_latency参数的值注册为1（可能的最低延迟，早期值为0），用于电源管理服务质量，以尽可能限制延迟。</p></li><li><p>throughput-performance<br>高吞吐量优化模式。用于典型吞吐量性能调整的服务器配置文件，它禁止 tuned 和 ktune 节能机制。如果系统没有企业级存储，则建议使用此配置文件。与相同latency-performance，除了：</p><ul><li>kernel.sched_wakeup_granularity_ns（调度程序唤醒粒度）设置为15毫秒</li><li>vm.dirty_ratio 设置为40%: 脏数据限制，内存里的脏数据百分比不能超过这个值。如果脏数据超过这个数量，新的IO请求将会被阻挡，直到脏数据被写进磁盘。这是造成IO卡顿的重要原因，但这也是保证内存中不会存在过量脏数据的保护机制</li><li>透明的大页面已启用</li></ul></li><li><p>virtual-guest<br>基于企业存储配置文件,在其他任务,增加虚拟内存swappiness和减少磁盘预读值。它没有禁用磁盘屏障。</p></li><li><p>oracle<br>基于throughput-performance模式，它另外禁用透明的巨大的页面和修改内核参数相关的一些其他性能。这个配置文件是由tuned-profiles-oracle包。在6.8及以后版本可用。</p></li><li><p>network-latency<br>包括“latency-performance”，禁用 transparent_hugepages，禁用 NUMA 平衡并启用一些基于延迟的网络调整。</p></li><li><p>network-throughput<br>包括“throughput-performance”，并增加网络堆栈缓冲区大小。</p></li></ul><p>获取当前模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tuned-adm active</span><br><span class="line">Current active profile: balanced</span><br><span class="line">$ tuned-adm profile_mode</span><br><span class="line">Profile selection mode: auto</span><br></pre></td></tr></table></figure></p><p>切换到<code>throughput-performance</code>模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tuned-adm profile throughput-performance</span><br></pre></td></tr></table></figure></p><p>重启后查看不是powersave了</p><p>参考:<br><a href="http://www.ncic.ac.cn/~hzg/discuz/forum.php?mod=viewthread&amp;tid=14&amp;page=1" target="_blank" rel="noopener">http://www.ncic.ac.cn/~hzg/discuz/forum.php?mod=viewthread&amp;tid=14&amp;page=1</a><br><a href="http://blog.chinaunix.net/uid-20620288-id-5751294.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-20620288-id-5751294.html</a><br><a href="https://www.cnblogs.com/276815076/p/5434295.html" target="_blank" rel="noopener">https://www.cnblogs.com/276815076/p/5434295.html</a><br><a href="https://cloud.tencent.com/developer/article/1511101" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1511101</a><br><a href="https://www.centos.org/forums/viewtopic.php?t=61949" target="_blank" rel="noopener">https://www.centos.org/forums/viewtopic.php?t=61949</a><br><a href="https://unix.stackexchange.com/questions/164100/centos-7-cpupower-not-setting-the-cpus-to-maximum" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/164100/centos-7-cpupower-not-setting-the-cpus-to-maximum</a><br><a href="https://blog.csdn.net/chalefly/article/details/71216449" target="_blank" rel="noopener">https://blog.csdn.net/chalefly/article/details/71216449</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;线上用的k8s版本是1.6.7非常老，而且HA有问题，上个月研发想把里面的一些服务迁出来到一个新集群里，新集群的搭建是我负责的。上周开始陆陆续续的迁移过来了，但是同等limit下
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://zhangguanzhang.github.io/categories/kubernetes/"/>
    
    
      <category term="k8s" scheme="http://zhangguanzhang.github.io/tags/k8s/"/>
    
      <category term="java" scheme="http://zhangguanzhang.github.io/tags/java/"/>
    
      <category term="springboot" scheme="http://zhangguanzhang.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>一次kube-controller-manager的bug导致的线上无法调度处理过程</title>
    <link href="http://zhangguanzhang.github.io/2019/03/22/k8s-controller-error/"/>
    <id>http://zhangguanzhang.github.io/2019/03/22/k8s-controller-error/</id>
    <published>2019-03-22T12:49:52.000Z</published>
    <updated>2019-03-23T11:01:36.517Z</updated>
    
    <content type="html"><![CDATA[<p>线上的k8s环境普遍版本很低，今天同事心血来潮去一个新节点上去看了下发现根分区满了,清理了后发有一个pod没有创建出来。清理后把因为文件系统满了而down掉的k8s相关进程起来后发现kubelet的log一直报错cannot remove /var/lib/kubelet/xxxxconfig/key resource busy now 啥的。查看了下describe对应rc还没有任何Event<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe rc rabbit3rc </span><br><span class="line">Name:rabbit3rc</span><br><span class="line">Namespace:default</span><br><span class="line">Selector:app=rabbitmq-cluster,node=rabbit3</span><br><span class="line">Labels:app=rabbitmq-cluster</span><br><span class="line">node=rabbit3</span><br><span class="line">Annotations:&lt;none&gt;</span><br><span class="line">Replicas:1 current / 1 desired</span><br><span class="line">Pods Status:0 Running / 0 Waiting / 0 Succeeded / 0 Failed</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:app=rabbitmq-cluster</span><br><span class="line">node=rabbit3</span><br><span class="line">  Containers:</span><br><span class="line">   rabbit3:</span><br><span class="line">    Image:cloud-base/rabbitmq-3.6.5:E3103-PUB-20181015-RC1</span><br><span class="line">    Ports:4369/TCP, 5672/TCP, 15672/TCP, 25672/TCP</span><br><span class="line">    Limits:</span><br><span class="line">      cpu:16</span><br><span class="line">      memory:8Gi</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:400m</span><br><span class="line">      memory:500Mi</span><br><span class="line">    Liveness:exec [health_check.sh] delay=600s timeout=10s period=15s #success=1 #failure=3</span><br><span class="line">    Environment:</span><br><span class="line">      RABBITMQ_DEFAULT_USER:xxx</span><br><span class="line">      RABBITMQ_DEFAULT_PASS:xxx</span><br><span class="line">      RABBITMQ_ERLANG_COOKIE:xxx</span><br><span class="line">    Mounts:</span><br><span class="line">      /etc/localtime from time (rw)</span><br><span class="line">      /var/lib/rabbitmq from rabbitmqvar (rw)</span><br><span class="line">  Volumes:</span><br><span class="line">   time:</span><br><span class="line">    Type:HostPath (bare host directory volume)</span><br><span class="line">    Path:/etc/localtime</span><br><span class="line">   rabbitmqvar:</span><br><span class="line">    Type:HostPath (bare host directory volume)</span><br><span class="line">    Path:/opt/cloud/rabbitmq</span><br><span class="line">Events:&lt;none&gt;</span><br></pre></td></tr></table></figure></p><p>在对应的node上看了下发现没有rabbitmq的容器,只有一个pause的容器,但是状态是Dead并且很多这样的而且删不掉。然后重启了下docker后虽然Dead的没了但是等被拉起来后对应的rabiitmq和它的pause容器都没有。怀疑调度有问题。<br>这个低版本集群的HA这块儿方案一直很迷，从进程存活来判断leader的机器后用systemctl查看上面的kube-controller-manager发现如下信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to update lock: Operation cannot be fulfilled on endpoints &quot;kube-controller-manager&quot;: the object has been modified; please apply your changes to the latest version and try again</span><br></pre></td></tr></table></figure></p><p>其他节点的controller认为它是leader但是它一直报错无法获取选举锁,然后复制systemd启动参数手动启动调整loglevel为8发现信息为如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">I0322 20:26:36.966931   34218 round_trippers.go:395] PUT https://100.68.24.2:6443/api/v1/namespaces/kube-system/endpoints/kube-controller-manager</span><br><span class="line">I0322 20:26:36.966938   34218 round_trippers.go:402] Request Headers:</span><br><span class="line">I0322 20:26:36.966944   34218 round_trippers.go:405]     Accept: application/vnd.kubernetes.protobuf, */*</span><br><span class="line">I0322 20:26:36.966951   34218 round_trippers.go:405]     Content-Type: application/vnd.kubernetes.protobuf</span><br><span class="line">I0322 20:26:36.966956   34218 round_trippers.go:405]     User-Agent: kube-controller-manager/v1.6.7+095136c3078cc (linux/amd64) kubernetes/095136c/leader-election</span><br><span class="line">I0322 20:26:36.967726   34218 round_trippers.go:420] Response Status: 409 Conflict in 0 milliseconds</span><br><span class="line">I0322 20:26:36.967738   34218 round_trippers.go:423] Response Headers:</span><br><span class="line">I0322 20:26:36.967744   34218 round_trippers.go:426]     Content-Type: application/vnd.kubernetes.protobuf</span><br><span class="line">I0322 20:26:36.967749   34218 round_trippers.go:426]     Content-Length: 259</span><br><span class="line">I0322 20:26:36.967754   34218 round_trippers.go:426]     Date: Fri, 22 Mar 2019 12:26:36 GMT</span><br><span class="line">I0322 20:26:36.967888   34218 request.go:988] Response Body:</span><br><span class="line">00000000  6b 38 73 00 0a 0c 0a 02  76 31 12 06 53 74 61 74  |k8s.....v1..Stat|</span><br><span class="line">00000010  75 73 12 ea 01 0a 04 0a  00 12 00 12 07 46 61 69  |us...........Fai|</span><br><span class="line">00000020  6c 75 72 65 1a a1 01 4f  70 65 72 61 74 69 6f 6e  |lure...Operation|</span><br><span class="line">00000030  20 63 61 6e 6e 6f 74 20  62 65 20 66 75 6c 66 69  | cannot be fulfi|</span><br><span class="line">00000040  6c 6c 65 64 20 6f 6e 20  65 6e 64 70 6f 69 6e 74  |lled on endpoint|</span><br><span class="line">00000050  73 20 22 6b 75 62 65 2d  63 6f 6e 74 72 6f 6c 6c  |s &quot;kube-controll|</span><br><span class="line">00000060  65 72 2d 6d 61 6e 61 67  65 72 22 3a 20 74 68 65  |er-manager&quot;: the|</span><br><span class="line">00000070  20 6f 62 6a 65 63 74 20  68 61 73 20 62 65 65 6e  | object has been|</span><br><span class="line">00000080  20 6d 6f 64 69 66 69 65  64 3b 20 70 6c 65 61 73  | modified; pleas|</span><br><span class="line">00000090  65 20 61 70 70 6c 79 20  79 6f 75 72 20 63 68 61  |e apply your cha|</span><br><span class="line">000000a0  6e 67 65 73 20 74 6f 20  74 68 65 20 6c 61 74 65  |nges to the late|</span><br><span class="line">000000b0  73 74 20 76 65 72 73 69  6f 6e 20 61 6e 64 20 74  |st version and t|</span><br><span class="line">000000c0  72 79 20 61 67 61 69 6e  22 08 43 6f 6e 66 6c 69  |ry again&quot;.Confli|</span><br><span class="line">000000d0  63 74 2a 28 0a 17 6b 75  62 65 2d 63 6f 6e 74 72  |ct*(..kube-contr|</span><br><span class="line">000000e0  6f 6c 6c 65 72 2d 6d 61  6e 61 67 65 72 12 00 1a  |oller-manager...|</span><br><span class="line">000000f0  09 65 6e 64 70 6f 69 6e  74 73 28 00 30 99 03 1a  |.endpoints(.0...|</span><br><span class="line">00000100  00 22 00                                          |.&quot;.|</span><br><span class="line">E0322 20:26:36.967960   34218 leaderelection.go:263] Failed to update lock: Operation cannot be fulfilled on endpoints &quot;kube-controller-manager&quot;: the object has been modified; please apply your changes to the latest version and try again</span><br><span class="line">I0322 20:26:36.967971   34218 leaderelection.go:185] failed to acquire lease kube-system/kube-controller-manager</span><br><span class="line">^C</span><br></pre></td></tr></table></figure></p><p>去官方代码仓库准备搜下代码看看选举逻辑是如何获得锁的,结果根本看不懂,于是想着看看有没有人研究过选举逻辑啥的结果。按照关键词搜到了一个国外文章 <a href="http://gogosatellite.blogspot.com/2017/07/how-to-setup-high-availability.html" target="_blank" rel="noopener">http://gogosatellite.blogspot.com/2017/07/how-to-setup-high-availability.html</a> ，里面一行输出日志给了我排查方向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I0607 11:04:32.485502   17291 leaderelection.go:248] lock is held by kuberm and has not yet expired</span><br><span class="line">I0607 11:04:32.485506   17291 leaderelection.go:185] failed to acquire lease kube-system/kube-controller-manager</span><br><span class="line">I0607 11:04:36.263032   17291 round_trippers.go:417] GET http://172.16.155.165:8080/api/v1/namespaces/kube-system/endpoints/kube-controller-manager 200 OK in 1 milliseconds</span><br><span class="line">I0607 11:04:36.263122   17291 leaderelection.go:248] lock is held by kuberm and has not yet expired</span><br><span class="line">I0607 11:04:36.263125   17291 leaderelection.go:185] failed to acquire lease kube-system/kube-controller-manager</span><br></pre></td></tr></table></figure></p><p>猜测到是所有kube-controller-manager请求apiserver然后竞争这个ep来获得锁,用kubectl请求了下这个ep发现如下信息并且一直不会改变,<code>annotations</code>的里的<code>holderIdentity</code>字段是当前leader的node<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;87e9ff0a-388b-11e9-949b-0cda411d3f00&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;36217274&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-02-24T23:25:54Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;xxxxx&#123;nodename&#125;xxxxxx\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;acquireTime\&quot;:\&quot;2019-02-24T23:25:54Z\&quot;,\&quot;renewTime\&quot;:\&quot;2019-03-17T11:20:08Z\&quot;,\&quot;leaderTransitions\&quot;:0&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;subsets&quot;: []</span><br><span class="line">&#125;</span><br><span class="line">$ kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;87e9ff0a-388b-11e9-949b-0cda411d3f00&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;36217274&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-02-24T23:25:54Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;Xxxxxxx-S02\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;acquireTime\&quot;:\&quot;2019-02-24T23:25:54Z\&quot;,\&quot;renewTime\&quot;:\&quot;2019-03-17T11:20:08Z\&quot;,\&quot;leaderTransitions\&quot;:0&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;subsets&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在我自己搭建的新集群上查看了下发现每时每刻<code>resourceVersion</code>一直在改变,而对比上面线上的却没有任何变化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 Kubernetes-ansible]# kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;0915773e-4c4d-11e9-a0b8-fa163e4edb6a&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;52752&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-03-22T02:48:56Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;k8s-m1_00dbe494-4c4d-11e9-a89f-fa163ed10d54\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;aransitions\&quot;:1&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@k8s-m1 Kubernetes-ansible]# kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;0915773e-4c4d-11e9-a0b8-fa163e4edb6a&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;52772&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-03-22T02:48:56Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;k8s-m1_00dbe494-4c4d-11e9-a89f-fa163ed10d54\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;aransitions\&quot;:1&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了确定字段<code>holderIdentity</code>是leader,便尝试通过关闭<code>kube-controller-manager</code>看看字段会不会变,发现真的改变并且会有新的ep又出现了(注意看<code>creationTimestamp</code>实际上不是生成)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-m1 Kubernetes-ansible]# systemctl stop kube-controller-manager.service </span><br><span class="line">[root@k8s-m1 Kubernetes-ansible]# kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;0915773e-4c4d-11e9-a0b8-fa163e4edb6a&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;52819&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-03-22T02:48:56Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;k8s-m1_00dbe494-4c4d-11e9-a89f-fa163ed10d54\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;aransitions\&quot;:1&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">[root@k8s-m1 Kubernetes-ansible]# kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;0915773e-4c4d-11e9-a0b8-fa163e4edb6a&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;52819&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-03-22T02:48:56Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;k8s-m1_00dbe494-4c4d-11e9-a89f-fa163ed10d54\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;aransitions\&quot;:1&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基本就确定了某些原因(可能文件系统满导致的也可能其他),于是生产环境上删除ep来踢出无法修改的leader信息,发现虽然还是他自己获取到leader,但是<code>resourceVersion</code>开始刷新了,而controller的日志里也没报错了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ kubectl -n kube-system delete ep kube-controller-manager</span><br><span class="line">endpoints &quot;kube-controller-manager&quot; deleted</span><br><span class="line">$  kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;dec669dd-4c9f-11e9-949b-0cda411d3f00&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;37542637&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-03-22T12:41:53Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;Xxxxxxx-S02\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;acquireTime\&quot;:\&quot;2019-03-22T12:41:53Z\&quot;,\&quot;renewTime\&quot;:\&quot;2019-03-22T12:41:53Z\&quot;,\&quot;leaderTransitions\&quot;:0&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;subsets&quot;: []</span><br><span class="line">&#125;</span><br><span class="line">$ kubectl get --raw /api/v1/namespaces/kube-system/endpoints/kube-controller-manager | jq .</span><br><span class="line">&#123;</span><br><span class="line">  &quot;kind&quot;: &quot;Endpoints&quot;,</span><br><span class="line">  &quot;apiVersion&quot;: &quot;v1&quot;,</span><br><span class="line">  &quot;metadata&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;kube-controller-manager&quot;,</span><br><span class="line">    &quot;namespace&quot;: &quot;kube-system&quot;,</span><br><span class="line">    &quot;selfLink&quot;: &quot;/api/v1/namespaces/kube-system/endpoints/kube-controller-manager&quot;,</span><br><span class="line">    &quot;uid&quot;: &quot;dec669dd-4c9f-11e9-949b-0cda411d3f00&quot;,</span><br><span class="line">    &quot;resourceVersion&quot;: &quot;37542785&quot;,</span><br><span class="line">    &quot;creationTimestamp&quot;: &quot;2019-03-22T12:41:53Z&quot;,</span><br><span class="line">    &quot;annotations&quot;: &#123;</span><br><span class="line">      &quot;control-plane.alpha.kubernetes.io/leader&quot;: &quot;&#123;\&quot;holderIdentity\&quot;:\&quot;Xxxxxxx-S02\&quot;,\&quot;leaseDurationSeconds\&quot;:15,\&quot;acquireTime\&quot;:\&quot;2019-03-22T12:41:53Z\&quot;,\&quot;renewTime\&quot;:\&quot;2019-03-22T12:41:59Z\&quot;,\&quot;leaderTransitions\&quot;:0&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;subsets&quot;: []</span><br></pre></td></tr></table></figure></p><p>查看rc描述和对应的pod都起来了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">kubectl describe rc rabbit3rc</span><br><span class="line">Name:rabbit3rc</span><br><span class="line">Namespace:default</span><br><span class="line">Selector:app=rabbitmq-cluster,node=rabbit3</span><br><span class="line">Labels:app=rabbitmq-cluster</span><br><span class="line">node=rabbit3</span><br><span class="line">Annotations:&lt;none&gt;</span><br><span class="line">Replicas:1 current / 1 desired</span><br><span class="line">Pods Status:1 Running / 0 Waiting / 0 Succeeded / 0 Failed</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;线上的k8s环境普遍版本很低，今天同事心血来潮去一个新节点上去看了下发现根分区满了,清理了后发有一个pod没有创建出来。清理后把因为文件系统满了而down掉的k8s相关进程起来后发现kubelet的log一直报错cannot remove /var/lib/kubelet/
      
    
    </summary>
    
    
      <category term="kubernetes" scheme="http://zhangguanzhang.github.io/categories/kubernetes/"/>
    
      <category term="kube-controller-manager" scheme="http://zhangguanzhang.github.io/categories/kubernetes/kube-controller-manager/"/>
    
    
      <category term="k8s" scheme="http://zhangguanzhang.github.io/tags/k8s/"/>
    
      <category term="kube-controller-manager" scheme="http://zhangguanzhang.github.io/tags/kube-controller-manager/"/>
    
  </entry>
  
</feed>
